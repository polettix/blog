<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">PolettiX!</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2015-02-05T02:11:25+01:00</updated>
<id>/</id>
<author>
  <name>Flavio Poletti</name>
  <uri>/</uri>
  <email>flavio@polettix.it</email>
</author>


  

<entry>
  <title type="html"><![CDATA[GitHub Pages]]></title>
  <link rel="alternate" type="text/html" href="/github-pages/" />
  <id>/github-pages</id>
  <published>2015-02-04T00:00:00+01:00</published>
  <updated>2015-02-04T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;I recently decided that I should probably write more. &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;
is a good place where to store what I write.&lt;/p&gt;

&lt;h2 id=&quot;what-is-github-pages&quot;&gt;What Is GitHub Pages&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; is a service provided by GitHub to host… pages. It is
a great way to add a website to a project hosted on GitHub, and also
quite simple to do by using git. The idea is that you create a
dedicated &lt;em&gt;branch&lt;/em&gt; in your project repository, called &lt;code&gt;gh-pages&lt;/code&gt;, and
put the website there. GitHub is then smart enough to take the contents
from that branch and expose them on the Internet at the right address.&lt;/p&gt;

&lt;p&gt;If your nickname on GitHub is &lt;code&gt;mynick&lt;/code&gt;, and the project is called
&lt;code&gt;myproject&lt;/code&gt;, then:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the project will be at &lt;code&gt;https://github.com/mynick/myproject&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;its pages will be at &lt;code&gt;http://mynick.github.io/myproject&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, my repository for the &lt;a href=&quot;https://github.com/polettix/Graphics-Potrace&quot;&gt;Potrace&lt;/a&gt; Perl bindings has:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;project repository at address
&lt;a href=&quot;https://github.com/polettix/Graphics-Potrace&quot;&gt;&lt;code&gt;https://github.com/polettix/Graphics-Potrace&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;its associated page(s) at address
&lt;a href=&quot;http://polettix.github.io/Graphics-Potrace&quot;&gt;&lt;code&gt;http://polettix.github.io/Graphics-Potrace&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;project-or-userassociation&quot;&gt;Project or User/Association?&lt;/h2&gt;

&lt;p&gt;What written above is fine for projects hosted on GitHub. As a matter
of fact, there is also a &lt;em&gt;standardized&lt;/em&gt; way to have similar pages for
a user or an organization.&lt;/p&gt;

&lt;p&gt;There is a slight inconsistency in how the thing is handled though:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it still relies on a GitHub project - good&lt;/li&gt;
  &lt;li&gt;the GitHub project MUST have a specific name, e.g.
&lt;code&gt;mynick.github.io&lt;/code&gt; - still good&lt;/li&gt;
  &lt;li&gt;the pages are hosted in the &lt;code&gt;master&lt;/code&gt; branch instead of
&lt;code&gt;gh-pages&lt;/code&gt; - this is a bummer!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;blog&quot;&gt;Blog?&lt;/h2&gt;

&lt;p&gt;With the tools above - especially considering the pages for a user
or an association - it is easy to think about hosting a blog on GitHub.
We will assume that it is hosted as a project by itself, not the one
for the user/association above (although you can easily tweak the
instructions below to make it happen).&lt;/p&gt;

&lt;p&gt;The basic idea is that keeping a blog’s pages is too cumbersome to
be done manually. You will probably want to provide a consistent look,
with all headers, navigation, sides, footers… all the bells and
whistles.&lt;/p&gt;

&lt;p&gt;One of the best approaches to take is to use some blog
generation system - we’ll use &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; here - so that we can concentrate
on writing the stuff, and let the system do the heavy lifting to generate
the final pages. Hence, it makes sense to consider the blog from two
points of view:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the generating system where you put your articles in&lt;/li&gt;
  &lt;li&gt;the final generated site&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This fits perfectly with GitHub: you can keep the generating system
as &lt;em&gt;the project&lt;/em&gt;, and its associated GitHub Pages as the real blog that
is served on the Internet.&lt;/p&gt;

&lt;h2 id=&quot;lets-start&quot;&gt;Let’s Start!&lt;/h2&gt;

&lt;p&gt;I set up my blog infrastructure using &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. After installing it,
create your new blog like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jekyll new myblog
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog
git init
git add .
git commit -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;initial import&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you have your local repository for the blog. At this point, you
are ready for creating a new repository in GitHub (let’s call it
&lt;code&gt;myblog&lt;/code&gt; in user &lt;code&gt;mynick&lt;/code&gt;) and tie them up:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git remote add origin git@github.com:mynick/myblog.git
git push -u origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It’s time to start generating pages at this point. Depending on how
you installed &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; or whatever different, you might have to use
&lt;code&gt;bundle&lt;/code&gt;, which is what we will assume here:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the generated stuff will live inside the &lt;code&gt;_site&lt;/code&gt; subdirectory. This
should be already included inside the &lt;code&gt;.gitignore&lt;/code&gt; file generated by
Jekyll automatically, but in case it’s a good moment for doing this.&lt;/p&gt;

&lt;p&gt;The suggestion is that the &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;gh-pages&lt;/code&gt; branches are really
separated from one another. Again, there might be many ways to do this,
I’m just providing you one here:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout master
git checkout --orphan gh-pages
git rm -rf .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point you should still have the &lt;code&gt;_site&lt;/code&gt; directory lying around,
and this is where the real contents of your site actually are. A basic
strategy can be to just copy the contents of that directory inside the
root directory of the repository:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;tar cf - -C _sites . &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tar xvf -
git add .
git commit -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;gh-pages initial import&amp;#39;&lt;/span&gt;
git push origin gh-pages:gh-pages&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There you go, your blog is online!&lt;/p&gt;

&lt;h2 id=&quot;routine-workflow&quot;&gt;Routine Workflow&lt;/h2&gt;

&lt;p&gt;What’s the workflow from now on? You will normally work in the &lt;code&gt;master&lt;/code&gt;
branch - we set all this up for this reason, actually - and will switch
on the &lt;code&gt;gh-pages&lt;/code&gt; branch only when needed.&lt;/p&gt;

&lt;p&gt;Adding posts or pages in Jekyll is quite easy and there is plenty of
documentation. When you’re done, make sure you are in the &lt;code&gt;master&lt;/code&gt;
branch and that changes are committed, otherwise you will not be able
to switch to the &lt;code&gt;gh-pages&lt;/code&gt; branch later on. It’s OK to have files that
are not yet onboarded in GitHub though, &lt;code&gt;git&lt;/code&gt; will not complain about
them.&lt;/p&gt;

&lt;p&gt;At this point, you have to follow these steps:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build
git checkout gh-pages
tar cf - -C _sites . &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tar xvf -
git add .
git commit -m &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date &lt;span class=&quot;s1&quot;&gt;&amp;#39;+blog status at %Y%m%d-%H%M%S&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
git push origin gh-pages:gh-pages
git checkout master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The copy using &lt;code&gt;tar&lt;/code&gt; is effective although not completely correct. In
particular, it will not take into consideration things that you &lt;em&gt;delete&lt;/em&gt;,
because all items will be added to what is already saved and committed.
In general this should not be a problem though, because you will mostly
be adding things, will you not?&lt;/p&gt;

&lt;p&gt;A better strategy is to use &lt;code&gt;git ls-files&lt;/code&gt; to list all files and remove
most of them before doing the copy with &lt;code&gt;tar&lt;/code&gt;. We should not get rid of
all of them though, because some might be important for the generic
&lt;em&gt;management&lt;/em&gt; of the pages (e.g. the &lt;code&gt;.gitignore&lt;/code&gt; file). We will assume
that there are no files with spaces, so this will work:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build
git checkout gh-pages
rm &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git ls-files &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -v &lt;span class=&quot;s1&quot;&gt;&amp;#39;^\.gitignore$&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
tar cf - -C _sites . &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tar xvf -
git add .
git commit -m &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date &lt;span class=&quot;s1&quot;&gt;&amp;#39;+blog status at %Y%m%d-%H%M%S&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
git push origin gh-pages:gh-pages
git checkout master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I eventually put the commands above in &lt;code&gt;publish.sh&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;MYDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;dirname &lt;span class=&quot;s2&quot;&gt;&amp;quot;$0&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;FULLME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;readlink -f &lt;span class=&quot;s2&quot;&gt;&amp;quot;$0&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BAREME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;s2&quot;&gt;&amp;quot;$0&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

die&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$*&amp;quot;&lt;/span&gt; &amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;2
   &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

main&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$MYDIR&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; die &lt;span class=&quot;s2&quot;&gt;&amp;quot;unable to go in $MYDIR&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; .. &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; die &lt;span class=&quot;s2&quot;&gt;&amp;quot;unable to go in parent directory of $MYDIR&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;in $PWD now&amp;quot;&lt;/span&gt;

   git checkout master &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; die &lt;span class=&quot;s1&quot;&gt;&amp;#39;unable to switch to master&amp;#39;&lt;/span&gt;
   bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; die &lt;span class=&quot;s2&quot;&gt;&amp;quot;unable to update contents&amp;quot;&lt;/span&gt;
   git checkout gh-pages &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; die &lt;span class=&quot;s1&quot;&gt;&amp;#39;unable to switch to gh-pages&amp;#39;&lt;/span&gt;
   tar cf - -C _site . &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tar xvf - &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git add . &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(date &amp;#39;+update at %Y%m%d-%H%M%S&amp;#39;)&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push origin gh-pages
   git checkout master &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; die &lt;span class=&quot;s1&quot;&gt;&amp;#39;unable to switch to master&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

main&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I’m not an expert on this, but it’s very probable that without resorting to
the trick of defining a function &lt;code&gt;main&lt;/code&gt; and calling it, things might go
very wrong in the execution of the script, because the script will live
in the &lt;code&gt;master&lt;/code&gt; branch but it might be unavailable in branch &lt;code&gt;gh-pages&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/github-pages/&quot;&gt;GitHub Pages&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on February 04, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[BitTorrent for personal file sharing]]></title>
  <link rel="alternate" type="text/html" href="/bittorrent/" />
  <id>/bittorrent</id>
  <published>2013-12-10T00:00:00+01:00</published>
  <updated>2013-12-10T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;I sometimes what to transfer a file from A to B and this file might be big.
Like a Virtual Machine Image around 20 GB.&lt;/p&gt;

&lt;p&gt;I discovered that BitTorrent can be quite powerful and robust for the file
transfer, but unfortunately there is not too much information around as to
set up a “personal” file sharing chain.&lt;/p&gt;

&lt;p&gt;One of the things that seem to be available are the DHT or &lt;em&gt;trackerless&lt;/em&gt;
torrents. Well, I did not manage to make one work, so I had to revert to a
more irritating method of setting up a tracker. Here’s how… without
using uTorrent, that is not freely available in Linux.&lt;/p&gt;

&lt;p&gt;The steps are quite simple:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;set up a Tracker&lt;/li&gt;
  &lt;li&gt;generate a torrent file&lt;/li&gt;
  &lt;li&gt;start a BitTorrent client where the file to transfer is, using the
torrent file to load it&lt;/li&gt;
  &lt;li&gt;send the torrent file to the recipient and start another BitTorrent
client with it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will see all of them step by step.&lt;/p&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;

&lt;p&gt;We will use the &lt;em&gt;standard&lt;/em&gt; BitTorrent client:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://bittorrent.cvs.sourceforge.net/viewvc/bittorrent/?view=tar&quot;&gt;tarball&lt;/a&gt; from SourceForge&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/files/bittorrent-20150201.tar.gz&quot;&gt;a snapshot of the above&lt;/a&gt; taken on February 1st, 2015&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unpack the whole thing and get into the BitTorrent directory. We’ll call
the directory you are into &lt;code&gt;$BT&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tracker-set-up&quot;&gt;Tracker Set-Up&lt;/h2&gt;

&lt;p&gt;The tracker is a server program that helps… tracking the download of the
different chunks by the interested clients. It acts as a very minimal web
server that only accepts &lt;code&gt;GET&lt;/code&gt; requests to a specific URI and with a
specific command line. You will not have to worry about this.&lt;/p&gt;

&lt;p&gt;You have to choose a port where your tracker will listen. We will just
select 12345 for our example, so you only have to start the tracker:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$BT&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;12345
./bttrack.py --port &lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; --dfile dfile-&lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; &amp;gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;log-$port.log&amp;quot;&lt;/span&gt; 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will start a Tracker in the background, listening on all the
interfaces at the port of your choice. The related URI is the following:
&lt;code&gt;http://your-server:12345/announce/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course, we are assuming that the Tracker can be reached through port
12345 of server &lt;code&gt;your-server&lt;/code&gt;… adjust according to your environment!&lt;/p&gt;

&lt;h2 id=&quot;torrent-file-creation&quot;&gt;Torrent File Creation&lt;/h2&gt;

&lt;p&gt;You don’t necessarily have a running Tracker to generate the torrent file,
but you will need one anyway… There are only a few really important
things to generate the torrent file: the Tracker’s URI and the file to
transfer. The command is pretty straightforward:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./btmakemetafile.py inputfile.ext http://your-server:12345/announce &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --target mystuff.torrent&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;bittorrent-client-server-side&quot;&gt;BitTorrent Client, &lt;em&gt;Server&lt;/em&gt;-side&lt;/h2&gt;

&lt;p&gt;This is quite easy… but with a twist. The client on the server will be
installed in the same host as the tracker, and this is a problem because the
server &lt;em&gt;normally&lt;/em&gt; relies upon the connection details (IP address) to
figure out where the peer is. In this case, it’s highly likely that you would
get some local address! Luckily there’s a parameter around this: &lt;code&gt;--ip&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./btdownloadheadless.py --ip &lt;span class=&quot;nv&quot;&gt;$visible_ip&lt;/span&gt; --minport &lt;span class=&quot;m&quot;&gt;54321&lt;/span&gt; --maxport &lt;span class=&quot;m&quot;&gt;54321&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&amp;quot;$torrentpath&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As said, you should set &lt;code&gt;$visible_ip&lt;/code&gt; to some address of the
serving machine that can be reached by the intended peer.&lt;/p&gt;

&lt;p&gt;You will have to start this command from the place where your file is,
otherwise this instance will try to download the relevant file instead of
seeding it.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;$torrenpath&lt;/code&gt; is supposed to carry the path to the torrent
file generated in the previous step.&lt;/p&gt;

&lt;p&gt;As you can see, we also chose to stick to a single port. This is important
later for setting up rules in the firewall.&lt;/p&gt;

&lt;h2 id=&quot;bittorrent-client-client-side&quot;&gt;BitTorrent Client, &lt;em&gt;Client&lt;/em&gt;-side&lt;/h2&gt;

&lt;p&gt;Here comes finally when you can download the torrent from the
destination. All you have to do is to send the torrent file (that is
way more compact!) to the recipient, and tell them to use their favourite
BitTorrent client to download it. Voilà!&lt;/p&gt;

&lt;h2 id=&quot;dont-forget-the-firewall&quot;&gt;Don’t Forget the Firewall!&lt;/h2&gt;

&lt;p&gt;If you are using some firewall you will have to ensure that the ports
are open. Most probably, the firewall will be iptables, in which case:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# this is for the Tracker&lt;/span&gt;
sudo iptables -A INPUT -p tcp -m tcp --dport &lt;span class=&quot;m&quot;&gt;12345&lt;/span&gt; -j ACCEPT

&lt;span class=&quot;c&quot;&gt;# this is for the Client&lt;/span&gt;
sudo iptables -A INPUT -p tcp -m tcp --dport &lt;span class=&quot;m&quot;&gt;54321&lt;/span&gt; -j ACCEPT&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;packing-it-all&quot;&gt;Packing it all&lt;/h2&gt;

&lt;p&gt;The following script can be executed on the host where you will be
serving the file. You can provide a port for the tracker, or let it
get one for you. It assumes that the following port is free as well,
and assigns it to the client (yes, not &lt;em&gt;that&lt;/em&gt; robust).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-$(&lt;/span&gt;perl -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;print int(50000 + rand 15000)&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-$(&lt;/span&gt;hostname&lt;span class=&quot;k&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-$(&lt;/span&gt;dig &lt;span class=&quot;s2&quot;&gt;&amp;quot;$hostname&amp;quot;&lt;/span&gt; +short&lt;span class=&quot;k&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CLIENTPORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BINDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;dirname &lt;span class=&quot;s2&quot;&gt;&amp;quot;$0&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BINDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;readlink -f &lt;span class=&quot;s2&quot;&gt;&amp;quot;$BINDIR&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BTTRACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$BINDIR/bttrack.py&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BTCLIENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$BINDIR/btdownloadheadless.py&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BTTORRENTCREATOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$BINDIR/btmakemetafile.py&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TORRENTFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$(basename &amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;)-$port.torrent&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create torrent file&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;$BTTORRENTCREATOR&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$filename&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://$hostname:$port/announce&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   --target &lt;span class=&quot;s2&quot;&gt;&amp;quot;$TORRENTFILE&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;created: $TORRENTFILE&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Start tracker, save pid for later&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;$BTTRACK&amp;quot;&lt;/span&gt; --port &lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; --dfile dfile-&lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &amp;gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;tracker-$port.log&amp;quot;&lt;/span&gt; 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Open ports. The client is blocking, so this has to be done before&lt;/span&gt;
sudo iptables -A INPUT -p tcp -m tcp --dport &lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; -j ACCEPT
sudo iptables -A INPUT -p tcp -m tcp --dport &lt;span class=&quot;nv&quot;&gt;$CLIENTPORT&lt;/span&gt; -j ACCEPT

&lt;span class=&quot;c&quot;&gt;# Start client&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;$BTCLIENT&amp;quot;&lt;/span&gt; --ip &lt;span class=&quot;s2&quot;&gt;&amp;quot;${ip:-$hostname}&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   --minport &lt;span class=&quot;nv&quot;&gt;$CLIENTPORT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   --maxport &lt;span class=&quot;nv&quot;&gt;$CLIENTPORT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&amp;quot;$TORRENTFILE&amp;quot;&lt;/span&gt; &amp;gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;client-$CLIENTPORT.log&amp;quot;&lt;/span&gt; 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# When client is interrupted, clean all up&lt;/span&gt;
sudo iptables -D INPUT -p tcp -m tcp --dport &lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; -j ACCEPT
sudo iptables -D INPUT -p tcp -m tcp --dport &lt;span class=&quot;nv&quot;&gt;$CLIENTPORT&lt;/span&gt; -j ACCEPT
&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$PID&amp;quot;&lt;/span&gt;
rm &lt;span class=&quot;s2&quot;&gt;&amp;quot;$TORRENTFILE&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;dfile-$port&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;client-$CLIENTPORT.log&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;tracker-$port.log&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


    &lt;p&gt;&lt;a href=&quot;/bittorrent/&quot;&gt;BitTorrent for personal file sharing&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on December 10, 2013.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Set up a remote git repository]]></title>
  <link rel="alternate" type="text/html" href="/git-remote-repository/" />
  <id>/git-remote-repository</id>
  <published>2013-11-06T00:00:00+01:00</published>
  <updated>2013-11-06T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;I sometimes happen to start a local repository that then I want to
replicate on my server, here’s what I use.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;basedirname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;s2&quot;&gt;&amp;quot;$PWD&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;perl/$basedirname&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;remote_hostname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;example.com
&lt;span class=&quot;nv&quot;&gt;remote_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ssh://user@$remote_hostname/path/to/git&amp;quot;&lt;/span&gt;

ssh &lt;span class=&quot;s2&quot;&gt;&amp;quot;$remote_hostname&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      cd git &amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      mkdir -p &amp;#39;$repository&amp;#39; &amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      cd &amp;#39;$repository&amp;#39; &amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      git init --bare&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;   &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
   git remote add &lt;span class=&quot;s2&quot;&gt;&amp;quot;$remote&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$remote_base/$repository&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
   git push -u --all origin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I call this script &lt;code&gt;remotise&lt;/code&gt;. When I want to set up the remote
repository, I hop into the relevant repository for the directory and issue:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /path/to/project

&lt;span class=&quot;c&quot;&gt;# Option 1: DWIM&lt;/span&gt;
remotise

&lt;span class=&quot;c&quot;&gt;# Option 2: set the path in the repository (I don&amp;#39;t do Perl only)&lt;/span&gt;
remotise web/someproject

&lt;span class=&quot;c&quot;&gt;# Option 3, set the name of the repository (shown by git memo) as well:&lt;/span&gt;
remotise web/someproject upstream&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s all folks!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/git-remote-repository/&quot;&gt;Set up a remote git repository&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on November 06, 2013.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[RRDtool - Sparse Notes]]></title>
  <link rel="alternate" type="text/html" href="/rrdtool/" />
  <id>/rrdtool</id>
  <published>2013-11-02T00:00:00+01:00</published>
  <updated>2013-11-02T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;http://oss.oetiker.ch/rrdtool/index.en.html&quot;&gt;RRDtool&lt;/a&gt; is a wonderful tool for collecting and graphing data.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;RRDtool is the OpenSource industry standard, high performance data logging
  and graphing system for time series data. RRDtool can be easily integrated
  in shell scripts, perl, python, ruby, lua or tcl applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take a look at the website for additional information… and read on for
some things that I find useful.&lt;/p&gt;

&lt;h2 id=&quot;data-collection&quot;&gt;Data collection&lt;/h2&gt;

&lt;p&gt;Data are collected into the database and fetched from it. The collection is
split into two parts: how they are read, and how they are stored.&lt;/p&gt;

&lt;p&gt;Reading of data is specified through the description of a &lt;em&gt;Data Source&lt;/em&gt;, or
&lt;code&gt;DS&lt;/code&gt;. See the docs about &lt;a href=&quot;http://oss.oetiker.ch/rrdtool/doc/rrdcreate.en.html&quot;&gt;rrdtool create&lt;/a&gt; for the details, but it’s useful
to know that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GAUGE&lt;/strong&gt;s are inputs that can go up and down. Like a temperature, the
voltage at some pin or the amount of money in a bank account.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;COUNTER&lt;/strong&gt; is for meters that can only increase, like e.g. the number of
times that you a light turns on, the quantity of bits that enter an interface
or that the sun rises in the morning.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DERIVE&lt;/strong&gt; can be used for the same kind of data that a GAUGE is for, but
focuses on the difference with respect to the previous read instead of the
absolute value. This can be useful e.g. if you want to track an increase or
decrease rate for a quantity. The docs page about &lt;a href=&quot;http://oss.oetiker.ch/rrdtool/doc/rrdcreate.en.html&quot;&gt;rrdtool create&lt;/a&gt; also has
additional remarks about the relation between DERIVE and COUNTER, so give it
a try if you’re having trouble with your COUNTERs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ABSOLUTE&lt;/strong&gt; is for counters that get reset upon reading. So, each time
you read the value you reset the counter, do you?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RRDtool is mostly interested into rates, so all of the above are actually
translated into a rate, except for GAUGEs that are stored as-is (so that
you can track things that actually have little to do with rates). If you
want to graph the stock market, use GAUGE.&lt;/p&gt;

&lt;h2 id=&quot;times&quot;&gt;Times&lt;/h2&gt;

&lt;p&gt;Time handling in RRDtool is quite interesting. It is assumed that you will
feed a new set of values every &lt;em&gt;step&lt;/em&gt;, where the step is specified
in seconds. The default is 300, so you’re supposed to feed a new set of
values every 5 minutes, but of course you can set what you see fit.&lt;/p&gt;

&lt;p&gt;The relevant concepts for times in RRDtool are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;step&lt;/strong&gt;, i.e. the length of the time range&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;start&lt;/strong&gt;, i.e. when a time range starts&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;end&lt;/strong&gt;, i.e. when a time range ends&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can set a start time when you create a database, but the &lt;em&gt;real&lt;/em&gt; start
time will be set depending on the step - in particular, as an integer
multiple of the step.&lt;/p&gt;

&lt;p&gt;It’s useful to think the line of time as a sequence of time intervals:
interval 1, interval 2, …, interval N. The real start is 0, corresponding
to when the epoch starts (January 1st, 1970), but time is actually a
sequence of intervals and not of points.&lt;/p&gt;

&lt;p&gt;Values stored in the database are always referred to one interval, not to
a point in time.&lt;/p&gt;

&lt;p&gt;So, what do start and end mean actually? They are used as ways to specify
the intervals we are interested into. Each is first framed into one
interval, then the sequence of intervals from the start’s to the end’s
(included) are considered.&lt;/p&gt;

&lt;p&gt;When we specify a point in time that separates two intervals, it is
assigned to the following one. So, if the step is equal to 60 and start
is 600 (separating the two intervals 540-600 and 600-660), the interval
considered is 600-660. This is the same as saying that intervals are
closed on the left and open on the right.&lt;/p&gt;

&lt;p&gt;Intervals are represented with the end time of the interval. so, in the
example above, if you specify start as 600, the related interval that
you will get first is the one marked with 660.&lt;/p&gt;

&lt;p&gt;Example: consider a database with a step of 60 seconds and capable of
collecting up to three values. The start time has to be “quite high” to
avoid incurring in some &lt;em&gt;do what I mean&lt;/em&gt; behaviour of RRDtool.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;600000000
&lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3
&lt;span class=&quot;nv&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;60

rrdtool create test.rrd &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   --step &lt;span class=&quot;nv&quot;&gt;$step&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   --start &lt;span class=&quot;nv&quot;&gt;$start&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   DS:testdata:GAUGE:120:U:U &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   RRA:MAX:0.5:1:&lt;span class=&quot;nv&quot;&gt;$items&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; i in &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$step&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
   rrdtool update test.rrd &lt;span class=&quot;nv&quot;&gt;$time&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;rrdtool last test.rrd&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

rrdtool fetch test.rrd MAX --start&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$start&lt;/span&gt; --end&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;start+180&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 600000060: 1.0000000000e+00
 600000120: 2.0000000000e+00
 600000180: 3.0000000000e+00
 600000240: -nan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which shows how both start, end and the marker for an interval are chosen
according to what described above.&lt;/p&gt;

&lt;p&gt;As an additional note, it has to be considered that real intervals might be
compound of multiples of the configured step. For example, if you have a
round robin archive (RRA) that aggregates 5 values with a step of 60, each
data point actually refers to 300 seconds (5 minutes). When this RRA is
accessed, the relevant start and stops will yield time intervals that align
to a 300-seconds chunking of the time line starting from the origin of the
epochs.&lt;/p&gt;

&lt;h2 id=&quot;getting-the-right-data&quot;&gt;Getting the right data&lt;/h2&gt;

&lt;p&gt;If you want to be sure to get the right data out of an RRD database, you
have to ensure some things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you know which round robin archive you’re looking at&lt;/li&gt;
  &lt;li&gt;you know how many data points to ask&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RRDtool will try to give you the best available data, but e.g. if you have
fine grained data for the last week and you ask for data in the last ten
days, you’ll hit a different RRA (if available).&lt;/p&gt;

&lt;p&gt;To get exactly all the data in a RRA you can do as follows (assuming the
database file is &lt;code&gt;test.rrd&lt;/code&gt;):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;run &lt;code&gt;rrdtool info test.rrd&lt;/code&gt; to get the relevant data. You
will find something like this:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;filename = &quot;test.rrd&quot;
rrd_version = &quot;0003&quot;
step = 60
last_update = 600018000
header_size = 736
ds[testdata].index = 0
ds[testdata].type = &quot;GAUGE&quot;
ds[testdata].minimal_heartbeat = 120
ds[testdata].min = NaN
ds[testdata].max = NaN
ds[testdata].last_ds = &quot;300&quot;
ds[testdata].value = 0.0000000000e+00
ds[testdata].unknown_sec = 0
rra[0].cf = &quot;MAX&quot;
rra[0].rows = 300
rra[0].cur_row = 157
rra[0].pdp_per_row = 1
rra[0].xff = 5.0000000000e-01
rra[0].cdp_prep[0].value = NaN
rra[0].cdp_prep[0].unknown_datapoints = 0
rra[1].cf = &quot;MAX&quot;
rra[1].rows = 300
rra[1].cur_row = 66
rra[1].pdp_per_row = 20
rra[1].xff = 5.0000000000e-01
rra[1].cdp_prep[0].value = -inf
rra[1].cdp_prep[0].unknown_datapoints = 0
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;detect the RRA - there might be many in a database, so pick your
favourite. We will assume that you want to focus on &lt;code&gt;rra[1]&lt;/code&gt; in the
example above;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;identify the following basic variables:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;step&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;last_update&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;pdp_per_row&lt;/code&gt; (&lt;code&gt;rra[1].pdp_per_row&lt;/code&gt; in the example)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;rows&lt;/code&gt; (&lt;code&gt;rra[1].rows&lt;/code&gt; in the example)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;calculate the RRA interval length as &lt;code&gt;superstep = step * pdp_per_row&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;calculate the end time of the last interval with meaningful data as
&lt;code&gt;real_end = last_update % superstep&lt;/code&gt; (&lt;code&gt;%&lt;/code&gt; representing the modulus
function)&lt;/li&gt;
  &lt;li&gt;consider &lt;code&gt;start = real_end - superstep * rows + 1&lt;/code&gt; and
&lt;code&gt;end = real_end - 1&lt;/code&gt;. The addition/subtraction of one second is to be
sure to fall &lt;em&gt;inside&lt;/em&gt; an interval instead of being at one border, just
to avoid surprises (this is actually needed for end only)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can then consider &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt; and &lt;code&gt;superstep&lt;/code&gt; for usage in
&lt;a href=&quot;http://oss.oetiker.ch/rrdtool/doc/rrdfetch.en.html&quot;&gt;rrdtool fetch&lt;/a&gt; (respectively for &lt;code&gt;--start&lt;/code&gt;, &lt;code&gt;--end&lt;/code&gt; and &lt;code&gt;--resolution&lt;/code&gt;)
and in &lt;a href=&quot;http://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html&quot;&gt;rrdtool graph&lt;/a&gt; (respectively for &lt;code&gt;--start&lt;/code&gt;, &lt;code&gt;--end&lt;/code&gt; and &lt;code&gt;--step&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The above is implemented in the following Perl program
&lt;code&gt;get-full-interval.pl&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;English&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw&amp;lt; -no_match_vars &amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Util&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw&amp;lt; reduce &amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dumper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RRDs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$OUTPUT_AUTOFLUSH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rra_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rrd_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rra&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rra_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$superstep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdp_per_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$real_end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$last&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;superstep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$end&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$real_end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$start&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$real_end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$superstep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;$start $end $superstep $rra-&amp;gt;{rows}\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rrd_info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$raw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RRDs::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%retval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%$raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_to_pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%retval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_to_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$$ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%retval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;## end sub rrd_info&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name_to_path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;m{^(.+?)\[(.+)\]$}mxs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;m{^(?:rra|cdp_prep)$}mxs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/\./&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;## end sub name_to_path&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path_to_pointer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# see http://www.perlmonks.org/?node_id=443584&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$$a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$$a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Call this program as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;get-full-interval.pl test.rrd 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where the first parameter is the name of the RRD database and the second
parametrs is the identifier of the RRA you are interested into. The program
will output, in order, the following parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;value for &lt;code&gt;--start&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;value for &lt;code&gt;--end&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;the length of the interval (to be used as &lt;code&gt;--step&lt;/code&gt; or &lt;code&gt;--resolution&lt;/code&gt;
where these parameters make sense)&lt;/li&gt;
  &lt;li&gt;the number of data points you will get (useful for setting the right
&lt;code&gt;--width&lt;/code&gt; if you want to produce a graph)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;graphing-a-whole-database&quot;&gt;Graphing a whole database&lt;/h2&gt;

&lt;p&gt;The following program produces a graph for each variable and each RRA you
have in your database, according to the hints provided in the previous
section:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;s2&quot;&gt;&amp;quot;$db&amp;quot;&lt;/span&gt; .rrd&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;rrdtool info &lt;span class=&quot;s2&quot;&gt;&amp;quot;$db&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^ds\[\(.*\)\]\.index.*/\1/p&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
rrdtool info &lt;span class=&quot;s2&quot;&gt;&amp;quot;$db&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^rra\[\(.*\)\]\.cf.*&amp;quot;\(.*\)&amp;quot;$/\1 \2/p&amp;#39;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;rra cf &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      ./get-full-interval.pl &lt;span class=&quot;s2&quot;&gt;&amp;quot;$db&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rra&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
         &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;start end step rows
         &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; variable in &lt;span class=&quot;nv&quot;&gt;$variables&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            rrdtool graph &lt;span class=&quot;s2&quot;&gt;&amp;quot;$root-$variable-$rra-$cf.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               --start &lt;span class=&quot;nv&quot;&gt;$start&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               --end &lt;span class=&quot;nv&quot;&gt;$end&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               --step &lt;span class=&quot;nv&quot;&gt;$step&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               --width &lt;span class=&quot;nv&quot;&gt;$rows&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               --disable-rrdtool-tag &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               &lt;span class=&quot;s2&quot;&gt;&amp;quot;DEF:v=$db:$variable:$cf&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               LINE1:v#000
         &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course this is one graph per variable without any fancy bell or
whistle… start from &lt;a href=&quot;http://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html&quot;&gt;rrdtool graph&lt;/a&gt; to learn all the masters’ tricks!&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/rrdtool/&quot;&gt;RRDtool - Sparse Notes&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on November 02, 2013.&lt;/p&gt;
  </content>
</entry>

</feed>
