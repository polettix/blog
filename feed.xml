<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">PolettiX!</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2015-09-02T00:25:22+02:00</updated>
<id>/</id>
<author>
  <name>Flavio Poletti</name>
  <uri>/</uri>
  <email>flavio@polettix.it</email>
</author>


  

<entry>
  <title type="html"><![CDATA[Changes, nags and git hooks]]></title>
  <link rel="alternate" type="text/html" href="/changes-nags-and-git-hooks/" />
  <id>/changes-nags-and-git-hooks</id>
  <published>2015-09-01T00:00:00+02:00</published>
  <updated>2015-09-01T00:00:00+02:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;I use &lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla&quot;&gt;Dist::Zilla&lt;/a&gt; with a few plugins, including &lt;code&gt;NextRelease&lt;/code&gt; and
&lt;code&gt;Git::Check&lt;/code&gt;. I was always nagged by the fact that committing actually
left the &lt;code&gt;Changes&lt;/code&gt; file uncommitted… until now.&lt;/p&gt;

&lt;p&gt;First of all, I discovered that there was no reason why I should have to
be nagged at all. The &lt;a href=&quot;http://dzil.org/tutorial/vcs-git.html&quot;&gt;documentation&lt;/a&gt; about
&lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla&quot;&gt;Dist::Zilla&lt;/a&gt; is pretty clear that both plugins run at the same stage, so
it’s only a matter of proper ordering&lt;sup id=&quot;fnref:impatient&quot;&gt;&lt;a href=&quot;#fn:impatient&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Guess what? My &lt;code&gt;dzil&lt;/code&gt;
file always has the &lt;em&gt;wrong&lt;/em&gt; order!&lt;/p&gt;

&lt;p&gt;The funny thing is that today I had some kind of epiphany and I
&lt;strong&gt;understood&lt;/strong&gt; why this thing was nagging me. It &lt;strong&gt;was supposed&lt;/strong&gt; to do
so! It &lt;strong&gt;was designed&lt;/strong&gt; to do so! In this way, I would be nagged to
actually populate the Changes file with something meaningful before doing
a release, right?&lt;/p&gt;

&lt;p&gt;Now, of course this was not the intended behaviour (again, see
&lt;a href=&quot;http://dzil.org/tutorial/vcs-git.html&quot;&gt;here&lt;/a&gt;) and there are better ways to ensure that &lt;code&gt;Changes&lt;/code&gt; is
populated in some meaningful way before doing a release
(&lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla::Plugin::CheckChangesHasContent&quot;&gt;Dist::Zilla::Plugin::CheckChangesHasContent&lt;/a&gt; being my new
plugin of election for this task), but in the excitement for my epiphany I
also figured that &lt;em&gt;presto!&lt;/em&gt;, I need a &lt;a href=&quot;http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks&quot;&gt;git&lt;/a&gt; &lt;a href=&quot;http://githooks.com/&quot;&gt;hook&lt;/a&gt;
to ensure that I don’t commit &lt;code&gt;Changes&lt;/code&gt; without intention (yes, I tend to
&lt;code&gt;git commit -a&lt;/code&gt; a bit too much).&lt;/p&gt;

&lt;p&gt;This is the &lt;code&gt;pre-commit&lt;/code&gt; hook that I came out with:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Changes&amp;#39;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;seen_target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;omode nmode ohash nhash changetype filename&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$filename&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$target&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;seen_target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$skip&lt;/span&gt; -ne &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# skip the first item only&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$seen_target&lt;/span&gt; -eq &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ERROR - &amp;#39;$target&amp;#39; MUST be committed alone&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
   &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &amp;lt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;git diff-index --cached HEAD&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, after the real &lt;em&gt;enlightenment&lt;/em&gt; came (i.e. finding
&lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla::Plugin::CheckChangesHasContent&quot;&gt;DZP::CheckChangesHasContent&lt;/a&gt;) this is obviously not needed any
more… but I’ll keep it around should the need arise.&lt;/p&gt;

&lt;p&gt;While using &lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla::Plugin::CheckChangesHasContent&quot;&gt;DZP::CheckChangesHasContent&lt;/a&gt;, I figured that the
first addition of some &lt;em&gt;change&lt;/em&gt; to the file would spoil all my efforts to
remember about &lt;code&gt;Changes&lt;/code&gt; before the release. My hands were much faster
than my brains, again: I was about to propose a patch for the plugin when
I simply read the documentation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It looks for an unindented line starting with the version to be
released. It then looks for any text from that line until the next
unindented line (or the end of the file), ignoring whitespace. […] If
you had nothing but whitespace between [them], the release would be
halted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, it is sufficient to add a &lt;strong&gt;non-indented&lt;/strong&gt; line immediately after the
&lt;code&gt;{{NEXT}}&lt;/code&gt; string to make sure the plugin will complain, e.g.:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{{NEXT}}
CHECK YOUR CHANGES AND REMOVE THIS LINE!
   - I did this
   - I did that

1.0  1972-11-09 07:45:00 Europe/Rome
   - Born&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now of course I would like that line to be added automatically… this
time, before forking the relevant plugin, I’ll try to think if there’s
some already available way to do that!&lt;/p&gt;

&lt;h2 id=&quot;update&quot;&gt;Update&lt;/h2&gt;

&lt;p&gt;There can be a workaround to obtain something very similar to
the above… It is sufficient to set the &lt;code&gt;format&lt;/code&gt; parameter of the
&lt;code&gt;NextRelease&lt;/code&gt; plugin to something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[NextRelease]
format = Changes for My::Module:%n%n%-9v %{yyyy-MM-dd HH:mm:ssZZZZZ VVVV}d%{ (TRIAL RELEASE)}T&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;i.e. the same format as the default one, but with some meaningful
introduction text (&lt;code&gt;Changes for...&lt;/code&gt; in our example, followed by two
newlines). In this way, the following &lt;code&gt;Changes&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{{NEXT}}
   - I did this
   - I did that

1.0  1972-11-09 07:45:00 Europe/Rome
   - Born&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;will generate this for the release package:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Changes for My::Module:

2.0  1990--11-09 07:45:00 Europe/Rome
   - I did this
   - I did that

1.0  1972-11-09 07:45:00 Europe/Rome
   - Born&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and will be updated into this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{{NEXT}}

Changes for My::Module:

2.0  1990--11-09 07:45:00 Europe/Rome
   - I did this
   - I did that

1.0  1972-11-09 07:45:00 Europe/Rome
   - Born&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, it will be sufficient to add new items &lt;em&gt;below the
introduction line&lt;/em&gt;, like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{{NEXT}}

Changes for My::Module:
   - This happened here
   - This happened there

2.0  1990--11-09 07:45:00 Europe/Rome
   - I did this
   - I did that

1.0  1972-11-09 07:45:00 Europe/Rome
   - Born&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;in order to &lt;em&gt;keep &lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla::Plugin::CheckChangesHasContent&quot;&gt;DZP::CheckChangesHasContent&lt;/a&gt; complain&lt;/em&gt; until
the intro line is removed from the file, like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{{NEXT}}
   - This happened here
   - This happened there

2.0  1990--11-09 07:45:00 Europe/Rome
   - I did this
   - I did that

1.0  1972-11-09 07:45:00 Europe/Rome
   - Born&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We’re ready for a new release now!&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:impatient&quot;&gt;
      &lt;p&gt;For those of you that are too lazy to click on the link and
read through the page, you are supposed to put &lt;code&gt;NextRelease&lt;/code&gt; before
&lt;code&gt;Git::Check&lt;/code&gt;. &lt;a href=&quot;#fnref:impatient&quot; class=&quot;reversefootnote&quot;&gt;&amp;#x2934;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/changes-nags-and-git-hooks/&quot;&gt;Changes, nags and git hooks&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on September 01, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Wrapper...l]]></title>
  <link rel="alternate" type="text/html" href="/wrapperl/" />
  <id>/wrapperl</id>
  <published>2015-04-26T00:00:00+02:00</published>
  <updated>2015-04-26T00:00:00+02:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;code&gt;wrapperl&lt;/code&gt; is a (Perl) program lets you wrap another Perl program
with some local-specific configurations.&lt;/p&gt;

&lt;p&gt;Why would you do this, e.g. as opposed to modifying the
&lt;em&gt;hash-bang&lt;/em&gt; line or setting &lt;code&gt;PERL5LIB&lt;/code&gt;, or calling the perl
executable directly? Well, lazyness of course, but also the fact
that in different environments the same program might need different
configurations, and changing those configurations possibly in many
little Perl programs quickly becomes an error-prone hassle.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wrapperl&lt;/code&gt; provides you with a consistent, minimal and easy to setup
way to concentrate local-specific configurations in
&lt;code&gt;wrapperl.env&lt;/code&gt; file, and be sure
that you will call your Perl program(s) with the right setup every time.&lt;/p&gt;

&lt;p&gt;This article contains only a brief extract from the documentation to
get your feet wet; you can find the whole thing on
&lt;a href=&quot;https://github.com/polettix/wrapperl&quot;&gt;the GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;installing&quot;&gt;Installing&lt;/h2&gt;

&lt;p&gt;Installion is easy: download &lt;code&gt;wrapperl&lt;/code&gt; from &lt;a href=&quot;https://raw.githubusercontent.com/polettix/wrapperl/master/wrapperl&quot;&gt;here&lt;/a&gt;
and put it somewhere in the environment(s) where you need it. It is not
necessary to put it in a directory in the &lt;code&gt;PATH&lt;/code&gt;, although it is
suggested in order to access all functionalities.&lt;/p&gt;

&lt;h2 id=&quot;a-complete-example&quot;&gt;A Complete Example&lt;/h2&gt;

&lt;p&gt;Sometimes an example is worth a thousands manuals.&lt;/p&gt;

&lt;h3 id=&quot;a-few-assumptions&quot;&gt;A few assumptions&lt;/h3&gt;

&lt;p&gt;Let’s make a few assumptions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you will write your program &lt;code&gt;prg.pl&lt;/code&gt;. If
you don’t even want to write one, you can copy and paste this:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env perl&lt;/span&gt;
print &lt;span class=&quot;s2&quot;&gt;&amp;quot;using perl &amp;#39;$^X&amp;#39;, \@INC contains:\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
print &lt;span class=&quot;s2&quot;&gt;&amp;quot;- &amp;#39;$_&amp;#39;\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; @INC&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;you do your coding in a development environment where:
    &lt;ul&gt;
      &lt;li&gt;you develop &lt;code&gt;prg.pl&lt;/code&gt; inside directory &lt;code&gt;/home/me/program&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;perl&lt;/code&gt; is located at &lt;code&gt;/home/me/perl/bin/perl&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;the libraries you need are stored in non-standard positions
  &lt;code&gt;/path/to/some/lib&lt;/code&gt; and &lt;code&gt;/path/to/another/lib&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;you deploy your program in a production environment with a different
setup, namely:
    &lt;ul&gt;
      &lt;li&gt;your program &lt;code&gt;prg.pl&lt;/code&gt; is deployed in directory &lt;code&gt;/app/program&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;perl&lt;/code&gt; is located at &lt;code&gt;/approved/perl/bin/perl&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;the libraries you need are all stored in &lt;code&gt;/approved/lib&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is what how you start in the development environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;me@devhost /home/me/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls -l
-rwxr-xr-x &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me &lt;span class=&quot;m&quot;&gt;74&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt; 22:28 prg.pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is what how you start in the production environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;me@production /app/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls -l
-rwxr-xr-x &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me &lt;span class=&quot;m&quot;&gt;74&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;25&lt;/span&gt; 20:51 prg.pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;step-1-symlink-to-wrapperl&quot;&gt;Step 1: symlink to &lt;code&gt;wrapperl&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In both environments, you create a symbolic link named &lt;code&gt;prg&lt;/code&gt;
pointing towards &lt;code&gt;wrapperl&lt;/code&gt;. The link is located inside the same
directory as &lt;code&gt;prg.pl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is what you end up with in the development environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;me@devhost /home/me/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls -l
lrwxrwxrwx &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me  &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt; 22:51 prg -&amp;gt; /home/me/bin/wrapperl
-rwxr-xr-x &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me &lt;span class=&quot;m&quot;&gt;74&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt; 22:28 prg.pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is what you have in the production environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;me@production /app/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls -l
lrwxrwxrwx &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me  &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;25&lt;/span&gt; 20:51 prg -&amp;gt; /usr/local/bin/wrapperl
-rwxr-xr-x &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me &lt;span class=&quot;m&quot;&gt;74&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;25&lt;/span&gt; 20:51 prg.pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;step-2-create-wrapperlenv-files&quot;&gt;Step 2: create &lt;code&gt;wrapperl.env&lt;/code&gt; files&lt;/h3&gt;

&lt;p&gt;In each environment (development and production in our example)
You create the &lt;code&gt;wrapperl.env&lt;/code&gt; file, which will hold configurations
that are specific for the environment it is located into.
We will put it in the same directory as &lt;code&gt;prg&lt;/code&gt; and &lt;code&gt;prg.pl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wrapperl.env&lt;/code&gt; is a standard Perl file, where you can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;set the environment variable &lt;code&gt;PERL5LIB&lt;/code&gt; to point towards the
library paths you need for loading your modules, and&lt;/li&gt;
  &lt;li&gt;set a specific perl binary by means of the &lt;code&gt;$PERL&lt;/code&gt; variable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For our example, this is what you end up with in the development
environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;me@devhost /home/me/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls -l
lrwxrwxrwx &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me  &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt; 22:51 prg -&amp;gt; /home/me/bin/wrapperl
-rwxr-xr-x &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me &lt;span class=&quot;m&quot;&gt;74&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt; 22:28 prg.pl
-rwxr-xr-x &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me &lt;span class=&quot;m&quot;&gt;90&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;22&lt;/span&gt; 12:35 wrapperl.env

me@devhost /home/me/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat wrapperl.env
&lt;span class=&quot;nv&quot;&gt;$ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;PERL5LIB&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/some/lib:/path/to/another/lib&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$PERL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/home/me/perl/bin/perl&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is what you have in the production environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;me@production /app/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls -l
lrwxrwxrwx &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me  &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;25&lt;/span&gt; 20:51 prg -&amp;gt; /usr/local/bin/wrapperl
-rwxr-xr-x &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me &lt;span class=&quot;m&quot;&gt;74&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;25&lt;/span&gt; 20:51 prg.pl
-rwxr-xr-x &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me &lt;span class=&quot;m&quot;&gt;66&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;25&lt;/span&gt; 20:51 wrapperl.env

me@production /app/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat wrapperl.env
&lt;span class=&quot;nv&quot;&gt;$ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;PERL5LIB&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/approved/lib&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$PERL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/approved/perl/bin/perl&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So yes, they two setups are mostly the same, except for the contents
of the &lt;code&gt;wrapperl.env&lt;/code&gt; files, each containing configurations that
are environment-specific.&lt;/p&gt;

&lt;h3 id=&quot;step-3-use-the-symlinks&quot;&gt;Step 3: use the symlinks&lt;/h3&gt;

&lt;p&gt;Now, you are ready to run your program in either environment, just
remember to execute the symbolic link to &lt;code&gt;wrapperl&lt;/code&gt; instead of your
program.&lt;/p&gt;

&lt;p&gt;In the development environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;me@devhost /home/me/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./prg
using perl &lt;span class=&quot;s1&quot;&gt;&amp;#39;/home/me/perl/bin/perl&amp;#39;&lt;/span&gt;, @INC contains:
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/another/lib/i686-linux&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/another/lib&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/some/lib/i686-linux&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/some/lib&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/home/me/perl/lib/site_perl/5.18.1/i686-linux&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/home/me/perl/lib/site_perl/5.18.1&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/home/me/perl/lib/5.18.1/i686-linux&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/home/me/perl/lib/5.18.1&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the production environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;me@production /app/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./prg
using perl &lt;span class=&quot;s1&quot;&gt;&amp;#39;/approved/perl/bin/perl&amp;#39;&lt;/span&gt;, @INC contains:
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/approved/lib/i686-linux&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/approved/lib&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/approved/perl/lib/site_perl/5.18.1/i686-linux&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/approved/perl/lib/site_perl/5.18.1&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/approved/perl/lib/5.18.1/i686-linux&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/approved/perl/lib/5.18.1&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;can-you-path&quot;&gt;Can you &lt;code&gt;PATH&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;If you can put &lt;code&gt;wrapperl&lt;/code&gt; somewhere in the path (or in the same
location in every environment), you can even spare the symbolic
link. Just point the &lt;em&gt;hash-bang&lt;/em&gt; to &lt;code&gt;wrapperl&lt;/code&gt; and you’re done:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env wrapperl&lt;/span&gt;
print &lt;span class=&quot;s2&quot;&gt;&amp;quot;using perl &amp;#39;$^X&amp;#39;, \@INC contains:\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
print &lt;span class=&quot;s2&quot;&gt;&amp;quot;- &amp;#39;$_&amp;#39;\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; @INC&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As an added bonus of this approach, you can even name the program
whatever you like!&lt;/p&gt;

&lt;h2 id=&quot;where-do-we-go-from-here&quot;&gt;Where Do We Go From Here?&lt;/h2&gt;

&lt;p&gt;I can’t say that we have only scratched the surface, because the
example above covers the main use case for &lt;code&gt;wrapperl&lt;/code&gt;. On the other
hand, it is true that it can offer more, namely:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an easy way to call &lt;code&gt;perl&lt;/code&gt; based on the configurations found
in &lt;code&gt;wrapperl.env&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;an easy way to call &lt;code&gt;perldoc&lt;/code&gt; in a similar way, which of course
allows you to access the documentation of the modules installed
in the local libraries&lt;/li&gt;
  &lt;li&gt;a way to figure out which &lt;code&gt;wrapperl.env&lt;/code&gt; file is in use for a
specific symlink&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and probably something more. You can read the full documentation
&lt;a href=&quot;http://wrapperl.polettix.it&quot;&gt;here&lt;/a&gt; and peruse/fork the code repository
at &lt;a href=&quot;https://github.com/polettix/wrapperl&quot;&gt;wrapperl’s GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For now… That’s all folks!&lt;/p&gt;

&lt;h2 id=&quot;updates&quot;&gt;Updates&lt;/h2&gt;

&lt;p&gt;Added section &lt;em&gt;Can you PATH?&lt;/em&gt; on 2015-04-26.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/wrapperl/&quot;&gt;Wrapper...l&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on April 26, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Gerrit import - the hard way]]></title>
  <link rel="alternate" type="text/html" href="/gerrit-import-the-hard-way/" />
  <id>/gerrit-import-the-hard-way</id>
  <published>2015-03-22T00:00:00+01:00</published>
  <updated>2015-03-22T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;What if you started developing a tool using &lt;a href=&quot;http://www.git-scm.com/&quot;&gt;git&lt;/a&gt;, and after 400+
commits someone tells you to import it into a &lt;a href=&quot;https://code.google.com/p/gerrit/&quot;&gt;Gerrit&lt;/a&gt;-based
central repository where you barely have a bit for pushing
proposed changes? Well… it’s possible!&lt;/p&gt;

&lt;h2 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h2&gt;

&lt;p&gt;Let’s give things names:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;git-repo&lt;/em&gt; is the original repo you used so far. It might even be your
local copy of the code in your computer, this does not affect the test;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;gerrit-origin&lt;/em&gt; is the Fort-Knox central repository where you can push
proposed changes&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;gerrit-local&lt;/em&gt; is your humble local copy of &lt;em&gt;gerrit-origin&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are few assumptions that will make you decide whether it’s
worth reading on or not:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;you have &lt;em&gt;git-repo&lt;/em&gt; with a branch &lt;code&gt;source&lt;/code&gt; containing the commits you
want to push into &lt;em&gt;gerrit-origin&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;you are provided with means to access &lt;em&gt;gerrit-origin&lt;/em&gt; (i.e. clone it
and eventually push to it) and a branch &lt;code&gt;destination&lt;/code&gt; to push your
commits;&lt;/li&gt;
  &lt;li&gt;you want to preserve history, so each commit in the branch of &lt;em&gt;git-repo&lt;/em&gt;
will have to end up in a commit in &lt;em&gt;gerrit-origin&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;you only have a commit bit in &lt;em&gt;gerrit-origin&lt;/em&gt;, i.e. you have the right
to do a &lt;code&gt;git push origin HEAD:refs/for/master&lt;/code&gt; (see
&lt;a href=&quot;https://gerrit-documentation.storage.googleapis.com/Documentation/2.11/intro-quick.html#_creating_the_review&quot;&gt;Gerrit documentation&lt;/a&gt;) and hope that someone will
be so kind as to accept those changes, but nothing fancier.&lt;/li&gt;
  &lt;li&gt;this will be your first import of some consistent history, from that
point in time on you will use &lt;em&gt;gerrit-local&lt;/em&gt; and forget about
&lt;em&gt;git-repo&lt;/em&gt; (i.e. you will definitely jump on the &lt;a href=&quot;https://code.google.com/p/gerrit/&quot;&gt;Gerrit&lt;/a&gt; carriage for
this development).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We’ll see later what you can do if some of the above do not apply… you
lucky!&lt;/p&gt;

&lt;h2 id=&quot;assumptions-are-right&quot;&gt;Assumptions Are Right!&lt;/h2&gt;

&lt;p&gt;So the assumptions are right… let’s proceed in order. This is what we
are going to do (you’ll notice that &lt;a href=&quot;https://code.google.com/p/gerrit/&quot;&gt;Gerrit&lt;/a&gt; is somehow very fussy and
you will have to do a lot of work to make it happy):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;clone the &lt;em&gt;gerrit-origin&lt;/em&gt; into a local copy &lt;em&gt;gerrit-local&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;get the commits from branch &lt;code&gt;source&lt;/code&gt; in &lt;em&gt;git-repo&lt;/em&gt; into branch
&lt;code&gt;intermediate&lt;/code&gt; in &lt;em&gt;gerrit-local&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;adjust the imported commits in &lt;em&gt;gerrit-local&lt;/em&gt; to match the rules
set in &lt;em&gt;gerrit-origin&lt;/em&gt;. E.g. you might want to modify the committer’s
name or email to match what is set in &lt;em&gt;gerrit-origin&lt;/em&gt; in case you
saved your commits with an email address and you want to push
commits with another email;&lt;/li&gt;
  &lt;li&gt;add a ‘Commit-Id` to each commit message (or &lt;em&gt;gerrit-origin&lt;/em&gt; will
complain);&lt;/li&gt;
  &lt;li&gt;rebase &lt;code&gt;intermediate&lt;/code&gt; to &lt;code&gt;destination&lt;/code&gt;, so that &lt;em&gt;gerrit-origin&lt;/em&gt; will
see them as acceptable;&lt;/li&gt;
  &lt;li&gt;push to &lt;em&gt;gerrit-origin&lt;/em&gt; and cross fingers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cloning-the-repository&quot;&gt;Cloning the repository&lt;/h3&gt;

&lt;p&gt;First thing to do is to create &lt;em&gt;gerrit-local&lt;/em&gt; cloning &lt;em&gt;gerrit-origin&lt;/em&gt;.
We will assume that &lt;em&gt;gerrit-origin&lt;/em&gt; is at:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh://gerrithost:29418/GerritRepo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and that you want to clone it into &lt;code&gt;/path/to/GerritRepo&lt;/code&gt; so the clone
will be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /path/to
git clone ssh://gerrithost:29418/GerritRepo.git GerritRepo
cd GerritRepo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will provide you a fresh copy of the repository, but it’s still
not sufficient for setting up your &lt;a href=&quot;https://code.google.com/p/gerrit/&quot;&gt;Gerrit&lt;/a&gt; clone properly. Every time
you have to do a push, in fact, you will have to include a &lt;code&gt;Commit-Id&lt;/code&gt;
inside the commit message, and doing this manually is cumbersome. So
most probably you will do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scp -p -P 29418 john.doe@gerrithost:hooks/commit-msg .git/hooks/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install a &lt;em&gt;hook&lt;/em&gt; that will be called every time a commit
message is created, including the &lt;code&gt;Commit-Id&lt;/code&gt; inside the last paragraph
of the message itself and making Gerrit happy.&lt;/p&gt;

&lt;p&gt;Instructions for cloning and getting the hook script should be also
available in the &lt;a href=&quot;https://code.google.com/p/gerrit/&quot;&gt;Gerrit&lt;/a&gt; GUI - if you have access to it. See
&lt;a href=&quot;https://gerrit-documentation.storage.googleapis.com/Documentation/2.11/intro-quick.html#_cloning_the_repository&quot;&gt;cloning&lt;/a&gt; and &lt;a href=&quot;https://gerrit-documentation.storage.googleapis.com/Documentation/2.11/user-changeid.html#creation&quot;&gt;commit-msg creation&lt;/a&gt;
for details and possible variants that might apply to your case.&lt;/p&gt;

&lt;p&gt;Last thing, we ensure that the &lt;code&gt;destination&lt;/code&gt; branch is available as
a branch in &lt;em&gt;gerrit-local&lt;/em&gt; too:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b development origin/development
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;getting-your-commits-in-gerrit-local&quot;&gt;Getting your commits in &lt;em&gt;gerrit-local&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;We will do most of the work in &lt;em&gt;gerrit-local&lt;/em&gt; so we want to acquire the
relevant commits there. We will assume that &lt;em&gt;git-repo&lt;/em&gt; is at:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh://githost/GitRepo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;so we move into &lt;em&gt;gerrit-local&lt;/em&gt;’s directory and do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add git-repo ssh://githost/GitRepo.git
git fetch git-repo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the checkout its &lt;code&gt;source&lt;/code&gt; branch into the local &lt;code&gt;intermediate&lt;/code&gt;
for doing transformations:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b intermediate git-repo/source
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;transforming-the-commits&quot;&gt;Transforming the commits&lt;/h3&gt;

&lt;p&gt;Time for some commits mangling now. Your friend is &lt;code&gt;filter-branch&lt;/code&gt;, so
you might want to see some additional &lt;a href=&quot;http://www.git-scm.com/docs/git-filter-branch&quot;&gt;documentation&lt;/a&gt;
if you want to do different changes.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The changes in this section will change the SHA1 identifiers for all
  the commits. This should not be a problem because you are probably
  doing a transition towards &lt;a href=&quot;https://code.google.com/p/gerrit/&quot;&gt;Gerrit&lt;/a&gt; and will use &lt;em&gt;gerrit-origin&lt;/em&gt;
  after importing all commits as described in this article.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One problem that I had was about the commiter’s email address. This might
differ between &lt;em&gt;git-repo&lt;/em&gt; (e.g. it might be your personal email address)
and &lt;em&gt;gerrit-origin&lt;/em&gt; (e.g. for your work address, or another address that
you are using to contribute to the project in &lt;a href=&quot;https://code.google.com/p/gerrit/&quot;&gt;Gerrit&lt;/a&gt;). If this is
yours too, the following command (found &lt;a href=&quot;https://help.github.com/articles/changing-author-info/&quot;&gt;here&lt;/a&gt;) can be
useful:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git filter-branch --env-filter '
    OLD_EMAIL=&quot;your-old-email@example.com&quot;
    CORRECT_NAME=&quot;Your Correct Name&quot;
    CORRECT_EMAIL=&quot;your-correct-email@example.com&quot;
    if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]; then
        export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;
        export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;
    fi
    if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]; then
        export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;
        export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;
    fi
' --tag-name-filter cat -- --branches --tags
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, you will surely need to ensure that each commit has a &lt;code&gt;Commit-Id&lt;/code&gt;
inside. The hook you installed will be useful to do this, but it expects
to take its input from a file and not from the standard input so we will
use a pivot file &lt;code&gt;/tmp/mymessage&lt;/code&gt; for exchanging data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HOOK=&quot;$PWD/.git/hooks/commit-msg&quot;
git filter-branch --force --msg-filter &quot;
    cat - &amp;gt;/tmp/mymessage &amp;amp;&amp;amp;
    '$HOOK' /tmp/mymessage &amp;amp;&amp;amp;
    cat /tmp/mymessage
&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;rebasing-and-pushing&quot;&gt;Rebasing and pushing&lt;/h3&gt;

&lt;p&gt;We are now ready to do the rebase. This is needed because there is
currently no link between your new commits and whatever was in
&lt;em&gt;gerrit-origin&lt;/em&gt;, so you have to make sure this link is there.&lt;/p&gt;

&lt;p&gt;Rebase will be very simple - although the results will vary depending
on the contents of branch &lt;code&gt;destination&lt;/code&gt; in &lt;em&gt;gerrit-origin&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout intermediate
git rebase destination
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point it should be easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin HEAD:refs/for/destination
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you get errors, you might want to push only part of the commits and
then repeat - whatever is fine for you!&lt;/p&gt;

&lt;h2 id=&quot;what-if&quot;&gt;What if…&lt;/h2&gt;

&lt;p&gt;You might be in the situation in which some of the assumptions do not
really apply… the following hints might help.&lt;/p&gt;

&lt;h3 id=&quot;assumption-1-or-2-do-not-apply&quot;&gt;Assumption 1 or 2 do not apply?&lt;/h3&gt;

&lt;p&gt;Well, this article is probably not for you at all! Did you read it up
to here? Wow, you’re really curious!&lt;/p&gt;

&lt;h3 id=&quot;assumption-3-does-not-apply&quot;&gt;Assumption 3 does not apply?&lt;/h3&gt;

&lt;p&gt;If you’re not interested into preserving all intermediate commits, you
can just squash the whole thing into one single commit and then
push it. At this point you will not need to do any transformation,
because the commit hook will take care of setting the &lt;code&gt;Change-Id&lt;/code&gt; and
you will surely have updated your email at this point - right?!?&lt;/p&gt;

&lt;h3 id=&quot;assumption-4-does-not-apply&quot;&gt;Assumption 4 does not apply?&lt;/h3&gt;

&lt;p&gt;If you have wider powers on the Gerrit side, and this is an initial
import, then you probably can just work behind the scenes and set a
copy of &lt;em&gt;git-repo&lt;/em&gt; to what’s behind &lt;em&gt;gerrit-origin&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Another alternative is to temporarily disable &lt;code&gt;Change-Id&lt;/code&gt;s in the
Gerrit repo to simplify the import.&lt;/p&gt;

&lt;h3 id=&quot;assumption-5-does-not-apply&quot;&gt;Assumption 5 does not apply?&lt;/h3&gt;

&lt;p&gt;Well, your situation seems to be quite peculiar… good luck!&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/gerrit-import-the-hard-way/&quot;&gt;Gerrit import - the hard way&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on March 22, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Parachuting Whatever]]></title>
  <link rel="alternate" type="text/html" href="/parachuting-whatever/" />
  <id>/parachuting-whatever</id>
  <published>2015-02-15T00:00:00+01:00</published>
  <updated>2015-02-15T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;Many times I craft things that have to be installed in some place,
which means that an installer is a nice thing to have. Here’s one,
Perl-based.&lt;/p&gt;

&lt;p&gt;The basic idea that probably anyone has for a poor man’s deployment
system is to pack stuff in a tarball, together with a deployment
script inside that has to be executed in the target machine. Without
too much fantasy, I figured that I could walk the extra mile and
make a package that behaves like a tarball with a twist - i.e. it
is capable of executing things after unpacking.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Download &lt;a href=&quot;/assets/files/deployable&quot;&gt;&lt;em&gt;self-contained bundled version&lt;/em&gt;&lt;/a&gt; and save
it as &lt;code&gt;deployable&lt;/code&gt; in some directory in your &lt;code&gt;PATH&lt;/code&gt;. Make sure it’s
executable too.&lt;/p&gt;

&lt;p&gt;Put your stuff in a directory. The current directory is fine. Assume
it is exactly as you want it to appear when you unpack in the
destination. Include a deployment script, i.e. the one that you usually
include for starting the real deployment after unpacking –we’ll call
it &lt;code&gt;deploy.sh&lt;/code&gt;– and make sure it’s executable. You should have
something like this in the directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deploy.sh
file1.foo
file2.bar
somedir/
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To generate &lt;code&gt;package.pl&lt;/code&gt; ready for deployment, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deployable -o package.pl -d deploy.sh \
    file1.foo file2.bar somedir ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ship &lt;code&gt;package.pl&lt;/code&gt;, execute in place and you’re done.&lt;/p&gt;

&lt;h2 id=&quot;enter-deployable&quot;&gt;Enter &lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt; is a handful of tools to help you with remote management
of multiple servers. It was born when there was no Puppet or Chef in
town - not that I know of, at least - and worked pretty well for me.&lt;/p&gt;

&lt;p&gt;In this post we’ll concentrate on the main script –named after the
bunch of tools– i.e. the one that allows you to generate smart
packages.&lt;/p&gt;

&lt;p&gt;Before continuing, if you find it interesting, please note that you
will need to carry also the &lt;code&gt;remote&lt;/code&gt; script with you, together with
installing dependencies. If you like compact packages - and you
probably do if you’re interested in packing thing smartly - you
can download the &lt;a href=&quot;/assets/files/deployable&quot;&gt;&lt;em&gt;bundled&lt;/em&gt; version&lt;/a&gt;. Ensure to
put it in some place in &lt;code&gt;PATH&lt;/code&gt; and to set its execution bits, this
is what we will assume in the rest of this post.&lt;/p&gt;

&lt;p&gt;So what was your workflow before &lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt;? Let’s assume it was
something like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;place all relevant files in a directory (possibly in a subdirectory)&lt;/li&gt;
  &lt;li&gt;add a deployment script to the directory&lt;/li&gt;
  &lt;li&gt;create a tarball of that directory&lt;/li&gt;
  &lt;li&gt;write instructions to unpack the tarball and execute the
deployment script inside the directory that is created&lt;/li&gt;
  &lt;li&gt;ship the tarball and the instructions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Something along the following line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir foobar
cp /lots/of/stuff/* foobar
vi foobar/deploy.sh # and put what's needed
chmod +x foobar/deploy.sh
tar cvzf package.tar.gz foobar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You actually don’t have to change your workflow that much. If you
want to stick to it, you can &lt;em&gt;still&lt;/em&gt; put all your stuff in a directory,
like the first bullet above, and create a package with the whole
contents of that directory via &lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt; instead of the last step
in the example above:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# preparation goes exactly like before, but packaging is:
deployable -o /path/to/package.pl -H foobar -d deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You end up with &lt;code&gt;/path/to/package.pl&lt;/code&gt; (you can omit the path to create it
in the current directory of course). At this point, you hardly have to
write any instructions: just tell your recipients to put the script in
the destination server with the execution bits turned on, and execute it.&lt;/p&gt;

&lt;p&gt;So what does that command do? Easy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;option &lt;code&gt;-o&lt;/code&gt; sets the output. If not set, the resulting script will
be printed on standard output, but if you provide a filename
&lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt; will make it executable&lt;/li&gt;
  &lt;li&gt;option &lt;code&gt;-H&lt;/code&gt; (alias &lt;code&gt;--heredir&lt;/code&gt;) tells &lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt; where your stuff
is (in terms of a directory). The contents of the directory will
be included in the package, but the initial path set with &lt;code&gt;-H&lt;/code&gt; will
be stripped away. In the example above, file &lt;code&gt;foobar/deploy.sh&lt;/code&gt; will
be included simply as &lt;code&gt;deploy.sh&lt;/code&gt; (actually, as &lt;code&gt;./deploy.sh&lt;/code&gt;). This
is useful if you want to store all files/directories to be shipped
in one single place, but you don’t care about the containing
directory&lt;/li&gt;
  &lt;li&gt;option &lt;code&gt;-d&lt;/code&gt; tells &lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt; that the specified file (i.e.
&lt;code&gt;deploy.sh&lt;/code&gt; in our example) has to be executed. You can specify
whatever file you include, even multiple ones; only remember that
the path to the files that you include will be referred to their
position in the package, so in our example you have to specify it
as &lt;code&gt;deploy.sh&lt;/code&gt; instead of &lt;code&gt;foobar/deploy.sh&lt;/code&gt; because &lt;code&gt;foobar&lt;/code&gt; is
stripped away.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;shortcuts&quot;&gt;Shortcuts?&lt;/h2&gt;

&lt;p&gt;Here are some shortcuts that &lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt; provides.&lt;/p&gt;

&lt;h3 id=&quot;stuff-in-current-directory&quot;&gt;Stuff in current directory&lt;/h3&gt;

&lt;p&gt;If you just want to ship some files in the current directory, you’re not
obliged to use &lt;code&gt;-H&lt;/code&gt; at all, just tell &lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt; which files you want
to include. Remember that they will be recorded with the path you provide.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deployable -o p.pl file1 file2 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;execute-multiple-deployment-programs&quot;&gt;Execute multiple deployment programs&lt;/h3&gt;

&lt;p&gt;If you want to execute multiple programs, make sure they are all
executable and pass them with multiple &lt;code&gt;-d&lt;/code&gt; options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deployable -o p.pl -d exec1 -d exec2 exec1 exec2 file1 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to execute all executable files inside the default &lt;em&gt;current&lt;/em&gt;
directory, you can just pass the &lt;code&gt;-X&lt;/code&gt; command line parameter. Beware that
it will execute whatever it finds, so make sure that this is what you
actually want:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deployable -o p.pl -X exec1 exec2 file1 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;install-stuff-in-place&quot;&gt;Install stuff in place&lt;/h3&gt;

&lt;p&gt;At the time that I needed it, chances where that I had to update
some system files in multiple machines at once. This meant that I
wanted the tarball to &lt;em&gt;optionally&lt;/em&gt; extract things based on the
root directory (i.e. &lt;code&gt;/&lt;/code&gt;) so that the files go in place.&lt;/p&gt;

&lt;p&gt;While this is not hard to do with what explained above –it’s a
matter of crafting the &lt;code&gt;deploy.sh&lt;/code&gt; script for this– it was too
handy to leave outside. You have two ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create a directory &lt;code&gt;target-root&lt;/code&gt; and put all the stuff you want
to install like &lt;code&gt;target-root&lt;/code&gt; were the root directory &lt;code&gt;/&lt;/code&gt; of the
target system, or&lt;/li&gt;
  &lt;li&gt;include files/directories (presumably inside the current directory)
to be directly extracted in the root directory &lt;code&gt;/&lt;/code&gt; of the target
system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you go the first way, this is how you call &lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deployable -o p.pl -r target-root
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can of course add scripts to call within the same command line. If
you’re more into the second, this is how you do it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deployable -o p.pl -R etc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the-surface-is-scratched-now&quot;&gt;The surface is scratched now…&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt; has plenty of documentation. After installing it, you can
run either of these commands, in increasing level of verbosity:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deployable --usage
deployable --help
deployable --man
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and read it. Have fun!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/parachuting-whatever/&quot;&gt;Parachuting Whatever&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on February 15, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Parachuting Perl]]></title>
  <link rel="alternate" type="text/html" href="/parachuting-perl/" />
  <id>/parachuting-perl</id>
  <published>2015-02-07T00:00:00+01:00</published>
  <updated>2015-02-07T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;I’m probably not the only one in the world to work in an Enterprise-like
world. Which basically boils down to little Perl knowledge (at least
in the admittedly few Enteprises I got in contact with) and usage of
streamline Linux distribution with horribly old Perl versions.&lt;/p&gt;

&lt;p&gt;What I’m probably, again, not the only one in the world to do is to
just set up &lt;em&gt;my&lt;/em&gt; own &lt;code&gt;perl&lt;/code&gt; installation for usage by my applications. This
makes me comfortable about what I’m going to use, without messing with
the system’s &lt;code&gt;perl&lt;/code&gt;. After that, of course, there comes the problem of
many possible applications living together… so I have to cope with
this as well.&lt;/p&gt;

&lt;p&gt;One additional problem that might kick-in is when I have to use a different
&lt;code&gt;perl&lt;/code&gt; version for an application. As an example, I recently discovered
&lt;a href=&quot;https://metacpan.org/pod/Regexp::Grammars&quot;&gt;Regexp::Grammars&lt;/a&gt; is compatible with &lt;code&gt;perl&lt;/code&gt; starting from version 5.10, but
only if different from 5.18… so what if my environment is 5.18? There might
be the need to handle different &lt;code&gt;perl&lt;/code&gt; installations too, then.&lt;/p&gt;

&lt;p&gt;There are currently a lot of tools that simplify the task of having
one’s own &lt;code&gt;perl&lt;/code&gt;, keeping a private library for an application, possibly
shipping also the modules because there’s no connectivity to the
Internet… let’s see one possible workflow.&lt;/p&gt;

&lt;h2 id=&quot;the-plan&quot;&gt;The Plan&lt;/h2&gt;

&lt;p&gt;The plan is very simple:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;install &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; to address the possibility of multiple Perl versions. It
is quite lean and it seems to do its work without getting too much in
the way&lt;/li&gt;
  &lt;li&gt;build a private &lt;code&gt;perl&lt;/code&gt; through &lt;a href=&quot;https://metacpan.org/pod/distribution/Perl-Build/script/perl-build&quot;&gt;perl-build&lt;/a&gt;, which can be installed as
a plugin of &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt;, so that we can use &lt;code&gt;plenv&lt;/code&gt; only&lt;/li&gt;
  &lt;li&gt;install &lt;a href=&quot;https://github.com/miyagawa/cpanminus&quot;&gt;cpanminus&lt;/a&gt; (a.k.a. &lt;code&gt;cpanm&lt;/code&gt;) to easily handle module installation
later. Again, this can be handled as a plugin of &lt;code&gt;plenv&lt;/code&gt;, we’ll see how&lt;/li&gt;
  &lt;li&gt;declare the dependencies of our application in the root directory of the
application itself, through a &lt;code&gt;cpanfile&lt;/code&gt; declaration.&lt;/li&gt;
  &lt;li&gt;use &lt;a href=&quot;https://metacpan.org/pod/Carton&quot;&gt;carton&lt;/a&gt; to handle the installation of an application-private library
of code from the dependencies, so that we will be able to decouple from
the shared libraries installed in whatever &lt;code&gt;perl&lt;/code&gt; we will use. This allows
e.g. to have two different application use two different versions of a
library, but leverating on the exact same &lt;code&gt;perl&lt;/code&gt; installation. Carton
will also help us run our application with the right environment, more on
this later.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Should you have your development and deployment environment equal to each
other? Yes and no. For example, I already have [perlbrew] installed on my
dev machine, and the shift to &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; is something to do with a bit of
calm… so as long as I’m sure that I use the same &lt;code&gt;perl&lt;/code&gt; version in the
two places I should be fine. This means that steps 1..3 above will in
general be a pre-requisite on the target deployment machine, while
steps 4 and 5 are more on the development machine.&lt;/p&gt;

&lt;p&gt;So let’s start!&lt;/p&gt;

&lt;h2 id=&quot;deployment-environment-set-up&quot;&gt;Deployment Environment Set-Up&lt;/h2&gt;

&lt;p&gt;Depending on the target machine you will be using, it might be easy or
impossible to actually install your own &lt;code&gt;perl&lt;/code&gt; and its modules (especially
when compilation is needed). If this is the case, try to see if you can
create a compatible environment somewhere else, e.g. in a virtual machine
in your computer or online, so that you can be pretty sure that when you
copy things over you will be fine.&lt;/p&gt;

&lt;p&gt;In the following, then, we will assume
that the deployment machine is equipped with all the tools needed to
compile and install &lt;code&gt;perl&lt;/code&gt; and modules, which e.g. for a Debian release
would mean ensuring that package &lt;code&gt;build-essentials&lt;/code&gt; is in place, with
the addition of a system &lt;code&gt;perl&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt;. For other
&lt;em&gt;enterprise&lt;/em&gt;-like distributions like RHEL and SLES there are the
applicable package managers, otherwise you will have to roll your own!&lt;/p&gt;

&lt;p&gt;Before starting, we have to note that there is absolutely no need to
be &lt;code&gt;root&lt;/code&gt; here. As a matter of fact, it’s probably better &lt;em&gt;not&lt;/em&gt; to be
&lt;code&gt;root&lt;/code&gt; at all.&lt;/p&gt;

&lt;h3 id=&quot;plenv&quot;&gt;&lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The installation of &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; is (or can be) as simple as cloning its
repository on GitHub. We’ll also take care to install the other tools
as suggested by the documentation, that I will blatantly copy here (or so):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~
git clone git://github.com/tokuhirom/plenv.git .plenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it’s time to add &lt;code&gt;~/.plenv/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt; environment variable.
Where it is stored/set is actually a matter of the system you are in,
so your mileage may vary with the suggestion provided in the &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt;
documentation. Good places to look are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.bash_profile&lt;/code&gt; or &lt;code&gt;~/.profile&lt;/code&gt; if you’re using bash&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;~/.zshrc&lt;/code&gt; if you’re using zsh&lt;/li&gt;
  &lt;li&gt;whatever provided by the other shells&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can either edit the place where &lt;code&gt;PATH&lt;/code&gt; is set, or add a line like this
at the end (file and syntax depend from the shell and considerations above):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo 'export PATH=&quot;$HOME/.plenv/bin:$PATH&quot;' &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, you can execute the following and have &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; &lt;em&gt;visible&lt;/em&gt;
in your shell:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exec &quot;$SHELL&quot; -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time for initializing &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; now. A sub-command tells you what to add
to the file you modified for the &lt;code&gt;PATH&lt;/code&gt; variable, just run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plenv init -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and look carefully at the output. For example, I have (more or less) this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PATH=&quot;$HOME/.plenv/shims:${PATH}&quot;
export PLENV_SHELL=bash
source '$HOME/.plenv/libexec/../completions/plenv.bash'
plenv() {
    local command
    command=&quot;$1&quot;
    if [ &quot;$#&quot; -gt 0 ]; then
        shift
    fi

    case &quot;$command&quot; in
    rehash|shell)
        eval &quot;`plenv &quot;sh-$command&quot; &quot;$@&quot;`&quot;;;
    *)
        command plenv &quot;$command&quot; &quot;$@&quot;;;
    esac
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it’s OK with your policies, then you can proceed in installing those
lines like you did for &lt;code&gt;PATH&lt;/code&gt; modification above. Actually, what is
suggested by the author of &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; is to add this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo 'eval &quot;$(plenv init -)&quot;' &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is less save than installing the lines above. Unless you are going
to update &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; in the future (e.g. with &lt;code&gt;git pull&lt;/code&gt; at some time) you’re
fine, but if you do update you might end up with less secure things
happening during that &lt;code&gt;init&lt;/code&gt; process that would be executed at every
login… the choice is yours to take. My only consideration is that you
probably already rely upon work done by complete strangers, and this seems
more or less the same situation.&lt;/p&gt;

&lt;p&gt;Again, to make the changes happen you have to update your shell:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exec &quot;$SHELL&quot; -l
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;plugging-perl-build-in&quot;&gt;Plugging &lt;a href=&quot;https://metacpan.org/pod/distribution/Perl-Build/script/perl-build&quot;&gt;perl-build&lt;/a&gt; in&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://metacpan.org/pod/distribution/Perl-Build/script/perl-build&quot;&gt;Perl-build&lt;/a&gt; is a separate tool from the same author, and
is targeted at assisting in the installation of a new &lt;code&gt;perl&lt;/code&gt;. Being from
the same author, anyway, makes it easy to integrate with &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt;, which
is what we will do here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://github.com/tokuhirom/Perl-Build.git \
   ~/.plenv/plugins/perl-build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, this is it!&lt;/p&gt;

&lt;h3 id=&quot;your-first-perl&quot;&gt;Your first &lt;code&gt;perl&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;It’s time for some serious compilation now. Make sure you know which
&lt;code&gt;perl&lt;/code&gt; version you need, and ask &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; to install it (it will use
&lt;a href=&quot;https://metacpan.org/pod/distribution/Perl-Build/script/perl-build&quot;&gt;perl-build&lt;/a&gt; behind the scenes for the heavy-lifting):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plenv install 5.20.1  # use *your* perl version of course!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wait a few minutes for the installation to complete, then let &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt;
regenerate the &lt;em&gt;shims&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plenv rehash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, this is written in the documentation and I respect it, but I
wonder whether this step is really necessary and, if it is, why at
all. Can’t this be done as the final part of &lt;code&gt;plenv install ...&lt;/code&gt;?
Maybe it is (looking at the contents of &lt;code&gt;~/.plenv/shims&lt;/code&gt; it appears
to be so) and I can’t read the documentation properly, go figure.&lt;/p&gt;

&lt;h3 id=&quot;installing-cpanminus&quot;&gt;Installing &lt;a href=&quot;https://github.com/miyagawa/cpanminus&quot;&gt;cpanminus&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Another capability offered by &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; is to install &lt;a href=&quot;https://github.com/miyagawa/cpanminus&quot;&gt;cpanminus&lt;/a&gt;. I think
most know it today, so I’ll not add anything on it.&lt;/p&gt;

&lt;p&gt;I don’t really like do to this using &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; though, because especially
in deployment machines I prefer to use the &lt;em&gt;fatpacked&lt;/em&gt; self-containing
version. We already added a couple of directories to the &lt;code&gt;PATH&lt;/code&gt;, so
we will install it in one of them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# you can do this with wget as well, of course
curl -L 'https://github.com/miyagawa/cpanminus/raw/devel/cpanm' \
    &amp;gt; ~/.plenv/bin/cpanm
chmod a+x ~/.plenv/bin/cpanm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should Just Work.&lt;/p&gt;

&lt;h3 id=&quot;time-to-pack&quot;&gt;Time to pack…&lt;/h3&gt;

&lt;p&gt;The deployment server is ready at this point. Ok, sort of at least for my
taste.&lt;/p&gt;

&lt;p&gt;First of all there’s a lot of cruft left by &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; after installing
&lt;code&gt;perl&lt;/code&gt;, so I usually get rid of it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.plenv
rm -rf build cache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For perl 5.20.1 this saved me some 170+ MB, which are not bad when you
eventually have to pack it all for distributing into multiple deployment
machines. What I ended up was about 66 MB that shrink down to about 17 MB
after bzip2 compression, so it’s perfectly acceptable to have human
transfer time (unless your datacenter has shiny gigabit or multi-gigabit
networking equipment).&lt;/p&gt;

&lt;p&gt;Another thing that I like to have around is a script for making the
changes to the shell initialization when I will carry the whole
package around (because I usually have to). So I save something like this
inside `~/.plenv/bin/colonize.sh and provide execution permissions to it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# usually saved as ~/.plenv/bin/colonize.sh&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# change the target according to what your system has, e.g.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ~/.profile or ~/.bash_profile or ~/.zshrc or...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$HOME/.bashrc&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; grep &lt;span class=&quot;s1&quot;&gt;&amp;#39;^export PATH=.*/\.plenv/bin&amp;#39;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$target&amp;quot;&lt;/span&gt; &amp;gt;/dev/null 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;plenv already set-up in this system&amp;quot;&lt;/span&gt; &amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;2
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

cat &amp;gt;&amp;gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$target&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&amp;#39;END&amp;#39;&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;export PATH=&amp;quot;$HOME/.plenv/bin:$PATH&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;eval &amp;quot;$(plenv init -)&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;END&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point we’re really ready to pack (feel free to substitute the &lt;code&gt;j&lt;/code&gt;
with e.g. a &lt;code&gt;z&lt;/code&gt; if your system does not have &lt;code&gt;bzip2&lt;/code&gt; installed):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~
tar cvjf myperl.tar.bz2 .plenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install it into another (equivalent) deployment machine you just
have to transfer the file, unpack and &lt;em&gt;colonize&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scp myperl.tar.bz2 &quot;$user&quot;@&quot;$remote&quot;:/tmp
ssh &quot;$user&quot;@&quot;$remote&quot; \
    'cd ~ &amp;amp;&amp;amp; tar xvf /tmp/myperl.tar.bz2 &amp;amp;&amp;amp; ./plenv/bin/colonize.sh'
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;development-environment-set-up&quot;&gt;Development Environment Set-Up&lt;/h2&gt;

&lt;p&gt;You might have a brand new development machine and follow the steps above
to set it up exactly like a deployment one: congratulations! Otherwise, you
should at least ensure that when testing in your dev machine you are
using the same &lt;code&gt;perl&lt;/code&gt; version as you installed in the deployment machines,
with similar compilation options (e.g. with or without threads).&lt;/p&gt;

&lt;p&gt;In the following, we will take the hard way and assume that you don’t have
&lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; in the development machine. This is what I have today, so whatever
I write here wouldn’t be tested if I assumed that &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; is used in the
dev machine.&lt;/p&gt;

&lt;p&gt;It’s now time to concentrate on the application. Assuming it lives in its
own directory, with proper version control set up (e.g. &lt;code&gt;git&lt;/code&gt;), we have to
ensure that non-core modules are properly tracked, and &lt;a href=&quot;https://metacpan.org/pod/Carton&quot;&gt;carton&lt;/a&gt; will help
us out on this.&lt;/p&gt;

&lt;h3 id=&quot;dependencies-handling-with-carton&quot;&gt;Dependencies handling with &lt;a href=&quot;https://metacpan.org/pod/Carton&quot;&gt;carton&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Installing &lt;a href=&quot;https://metacpan.org/pod/Carton&quot;&gt;carton&lt;/a&gt; should not be a problem. You can do it via
&lt;a href=&quot;https://github.com/miyagawa/cpanminus&quot;&gt;cpanm&lt;/a&gt; on the &lt;code&gt;perl&lt;/code&gt; that you use on the development
machine.&lt;/p&gt;

&lt;p&gt;You declare your dependencies in a &lt;code&gt;cpanfile&lt;/code&gt; inside the root of your
project, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# This is file &quot;cpanfile&quot;
requires 'Log::Log4perl::Tiny', '1.2.6';
requires 'Template::Perlish';
requires 'JSON', '2.59';
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, you can either specify the module version - e.g. because
you know that the specific version has a particular feature - or not. At
this point, &lt;a href=&quot;https://metacpan.org/pod/Carton&quot;&gt;carton&lt;/a&gt; helps you install these modules in a local directory
called &lt;code&gt;local&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;carton install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first time you run this it will create the &lt;code&gt;local&lt;/code&gt; directory and put
all installed modules there. Another important file that is created
is &lt;code&gt;cpanfile.snapshot&lt;/code&gt;, that records the &lt;code&gt;cpanfile&lt;/code&gt; and the results
of the installation in a manner that will allow the exact re-creation
of the environment created here. At this point &lt;code&gt;git&lt;/code&gt; will be complaining
about these new files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you definitely want &lt;code&gt;cpanfile&lt;/code&gt; and &lt;code&gt;cpanfile.snapshot&lt;/code&gt; to be tracked by
&lt;code&gt;git&lt;/code&gt;. The first helps you keep track of what you need, the second will
allow you to recreate the environment multiple times, and will help
anyone that wants to collaborate too. We’ll see how in a moment.&lt;/li&gt;
  &lt;li&gt;you definitely do &lt;em&gt;not&lt;/em&gt; want to track &lt;code&gt;local&lt;/code&gt;. At the point where you
have the instructions to recreate it with &lt;code&gt;cpanfile.snapshot&lt;/code&gt;, it does
not make sense to move it around. And, as you probably already guessed,
it will probably be difficult to move compiled modules around, unless
your development environment matches the deployment one perfectly (or
so).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which basically boils down to something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo local/ &amp;gt;&amp;gt; .gitignore
git add .gitignore cpanfile cpanfile.snapshot
git commit -m 'using carton dependencies handling'
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;running-applications&quot;&gt;Running applications&lt;/h3&gt;

&lt;p&gt;Carton has its own way of helping you start applications with the
right environment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;carton exec -- program option option option...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It also plays well with &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt;, so if you set up a &lt;em&gt;local&lt;/em&gt; version of
&lt;code&gt;perl&lt;/code&gt; with it it will use that. My impression is that it fiddles with
&lt;code&gt;PERL5LIB&lt;/code&gt; to point towards the &lt;code&gt;local&lt;/code&gt; directory that was created.&lt;/p&gt;

&lt;p&gt;Another approach that does not require you to wrap your application
calls via &lt;a href=&quot;https://metacpan.org/pod/Carton&quot;&gt;carton&lt;/a&gt; - which might get annoying - is to set up usage
of the &lt;code&gt;local&lt;/code&gt; library directly from your application. You probably
already do something like this if you store most of your code inside
the &lt;code&gt;lib&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use FindBin '$Bin';
use lib &quot;$Bin/../lib&quot;, &quot;$Bin/../local/lib/perl5&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;workflow&quot;&gt;Workflow&lt;/h2&gt;

&lt;p&gt;These are my suggestions for the update of the distributions. In my
case, the deployment machines do not have &lt;code&gt;git&lt;/code&gt; installed (it was on
the first one for installing &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; but it is not a requirement) so
I do my deployments with good ol’ tarballs (well, I use &lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt;
but it’s another story).&lt;/p&gt;

&lt;h3 id=&quot;application-deployment-environment&quot;&gt;Application Deployment Environment&lt;/h3&gt;

&lt;p&gt;I use this kind of layout:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- application-container
    - application -&amp;gt; distro/application-2.0
    - distro
        - application-1.0
            - etc -&amp;gt; ../../etc
            - local -&amp;gt; ../../local
            - vendor -&amp;gt; ../../vendor
        - application-1.2
            - etc -&amp;gt; ../../etc
            - local -&amp;gt; ../../local
            - vendor -&amp;gt; ../../vendor
        - application-2.0
            - etc -&amp;gt; ../../etc
            - local -&amp;gt; ../../local
            - vendor -&amp;gt; ../../vendor
    - etc
    - local
    - vendor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is a higher level container directory that will hold the different
releases and also all local data, i.e. data that are specific to the
installation in the deployment server. In this example, they will be the
&lt;code&gt;etc&lt;/code&gt;, &lt;code&gt;local&lt;/code&gt; and &lt;code&gt;vendor&lt;/code&gt; directories, but there might be more of course.&lt;/p&gt;

&lt;p&gt;New packages are deposited and expanded inside the &lt;code&gt;distro&lt;/code&gt;, where you can
find the different releases in case quick rollback is needed. Installing
a new release is as simple as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;expanding the new tarball inside &lt;code&gt;distro&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;create the symbolic links to link back to &lt;code&gt;etc&lt;/code&gt;, &lt;code&gt;local&lt;/code&gt; and &lt;code&gt;vendor&lt;/code&gt;
(these might be part of the tarball itself)&lt;/li&gt;
  &lt;li&gt;move the &lt;code&gt;application&lt;/code&gt; symbolic link to point towards the new release
from a previous one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What’s the &lt;code&gt;vendor&lt;/code&gt; directory for then? Most of the times the deployment
machines are not connected to the Internet, and so you have to carry the
dependencies with you somehow. &lt;a href=&quot;https://metacpan.org/pod/Carton&quot;&gt;Carton&lt;/a&gt; allows you to create a
bundle of these modules like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;carton bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and this will create a &lt;code&gt;vendor&lt;/code&gt; sub-directory with all the needed stuff.
If you go this route, the suggestion is to put &lt;code&gt;vendor/&lt;/code&gt; too inside
&lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;deployment-strategy&quot;&gt;Deployment Strategy&lt;/h3&gt;

&lt;p&gt;Before the very first deployment, you will have to create the
directory layout described above:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /path/to/application/parent
mkdir -p application-container/{distro,etc,local,vendor}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For your application you create a distribution tarball, e.g.
&lt;code&gt;application-2.0.tar.bz2&lt;/code&gt;, and transfer it into the deployment
machine inside &lt;code&gt;application-container/distro&lt;/code&gt;. You can begin the
installation then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tar xvf application-2.0.tar.bz2
cd application-2.0
ln -s ../../etc
ln -s ../../local
ln -s ../../vendor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most the times you will not need to install new dependencies, but
sometimes (e.g. the very first time) you will. If this is
the case, you can generate the bundle of the dependency files
inside the development machine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;carton bundle
tar cvjf dependencies.tar.bz2 vendor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then transfer this bundle in the deployment machine and install
it (we will assume that &lt;code&gt;application-container/distro&lt;/code&gt; is going to
keep all our packages):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /path/to/application-container
tar xvf distro/dependencies.tar.bz2
cd application-container/distro/application-2.0
carton install --deployment --cached
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Last step is to activate the release:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /path/to/application-container
rm -f application
ln -s distro/application-2.0 application
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and restart your application, if applicable.&lt;/p&gt;

&lt;p&gt;Congratulations! You’re ready to start using your application!&lt;/p&gt;

&lt;h2 id=&quot;updates&quot;&gt;Updates&lt;/h2&gt;

&lt;p&gt;Changed how to call &lt;code&gt;carton exec&lt;/code&gt; to  more robust way - thanks Slobodan
Miskovic!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/parachuting-perl/&quot;&gt;Parachuting Perl&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on February 07, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[GitHub Pages]]></title>
  <link rel="alternate" type="text/html" href="/github-pages/" />
  <id>/github-pages</id>
  <published>2015-02-04T00:00:00+01:00</published>
  <updated>2015-02-04T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;I recently decided that I should probably write more. &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;
is a good place where to store what I write.&lt;/p&gt;

&lt;h2 id=&quot;what-is-github-pages&quot;&gt;What Is GitHub Pages&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; is a service provided by GitHub to host… pages. It is
a great way to add a website to a project hosted on GitHub, and also
quite simple to do by using git. The idea is that you create a
dedicated &lt;em&gt;branch&lt;/em&gt; in your project repository, called &lt;code&gt;gh-pages&lt;/code&gt;, and
put the website there. GitHub is then smart enough to take the contents
from that branch and expose them on the Internet at the right address.&lt;/p&gt;

&lt;p&gt;If your nickname on GitHub is &lt;code&gt;mynick&lt;/code&gt;, and the project is called
&lt;code&gt;myproject&lt;/code&gt;, then:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the project will be at &lt;code&gt;https://github.com/mynick/myproject&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;its pages will be at &lt;code&gt;http://mynick.github.io/myproject&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, my repository for the &lt;a href=&quot;https://github.com/polettix/Graphics-Potrace&quot;&gt;Potrace&lt;/a&gt; Perl bindings has:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;project repository at address
&lt;a href=&quot;https://github.com/polettix/Graphics-Potrace&quot;&gt;&lt;code&gt;https://github.com/polettix/Graphics-Potrace&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;its associated page(s) at address
&lt;a href=&quot;http://polettix.github.io/Graphics-Potrace&quot;&gt;&lt;code&gt;http://polettix.github.io/Graphics-Potrace&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;project-or-userassociation&quot;&gt;Project or User/Association?&lt;/h2&gt;

&lt;p&gt;What written above is fine for projects hosted on GitHub. As a matter
of fact, there is also a &lt;em&gt;standardized&lt;/em&gt; way to have similar pages for
a user or an organization.&lt;/p&gt;

&lt;p&gt;There is a slight inconsistency in how the thing is handled though:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it still relies on a GitHub project - good&lt;/li&gt;
  &lt;li&gt;the GitHub project MUST have a specific name, e.g.
&lt;code&gt;mynick.github.io&lt;/code&gt; - still good&lt;/li&gt;
  &lt;li&gt;the pages are hosted in the &lt;code&gt;master&lt;/code&gt; branch instead of
&lt;code&gt;gh-pages&lt;/code&gt; - this is a bummer!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;blog&quot;&gt;Blog?&lt;/h2&gt;

&lt;p&gt;With the tools above - especially considering the pages for a user
or an association - it is easy to think about hosting a blog on GitHub.
We will assume that it is hosted as a project by itself, not the one
for the user/association above (although you can easily tweak the
instructions below to make it happen).&lt;/p&gt;

&lt;p&gt;The basic idea is that keeping a blog’s pages is too cumbersome to
be done manually. You will probably want to provide a consistent look,
with all headers, navigation, sides, footers… all the bells and
whistles.&lt;/p&gt;

&lt;p&gt;One of the best approaches to take is to use some blog
generation system - we’ll use &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; here - so that we can concentrate
on writing the stuff, and let the system do the heavy lifting to generate
the final pages. Hence, it makes sense to consider the blog from two
points of view:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the generating system where you put your articles in&lt;/li&gt;
  &lt;li&gt;the final generated site&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This fits perfectly with GitHub: you can keep the generating system
as &lt;em&gt;the project&lt;/em&gt;, and its associated GitHub Pages as the real blog that
is served on the Internet.&lt;/p&gt;

&lt;h2 id=&quot;lets-start&quot;&gt;Let’s Start!&lt;/h2&gt;

&lt;p&gt;I set up my blog infrastructure using &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. After installing it,
create your new blog like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jekyll new myblog
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog
git init
git add .
git commit -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;initial import&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you have your local repository for the blog. At this point, you
are ready for creating a new repository in GitHub (let’s call it
&lt;code&gt;myblog&lt;/code&gt; in user &lt;code&gt;mynick&lt;/code&gt;) and tie them up:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git remote add origin git@github.com:mynick/myblog.git
git push -u origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It’s time to start generating pages at this point. Depending on how
you installed &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; or whatever different, you might have to use
&lt;code&gt;bundle&lt;/code&gt;, which is what we will assume here:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the generated stuff will live inside the &lt;code&gt;_site&lt;/code&gt; subdirectory. This
should be already included inside the &lt;code&gt;.gitignore&lt;/code&gt; file generated by
Jekyll automatically, but in case it’s a good moment for doing this.&lt;/p&gt;

&lt;p&gt;The suggestion is that the &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;gh-pages&lt;/code&gt; branches are really
separated from one another. Again, there might be many ways to do this,
I’m just providing you one here:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout master
git checkout --orphan gh-pages
git rm -rf .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point you should still have the &lt;code&gt;_site&lt;/code&gt; directory lying around,
and this is where the real contents of your site actually are. A basic
strategy can be to just copy the contents of that directory inside the
root directory of the repository:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;tar cf - -C _sites . &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tar xvf -
git add .
git commit -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;gh-pages initial import&amp;#39;&lt;/span&gt;
git push origin gh-pages:gh-pages&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There you go, your blog is online!&lt;/p&gt;

&lt;h2 id=&quot;routine-workflow&quot;&gt;Routine Workflow&lt;/h2&gt;

&lt;p&gt;What’s the workflow from now on? You will normally work in the &lt;code&gt;master&lt;/code&gt;
branch - we set all this up for this reason, actually - and will switch
on the &lt;code&gt;gh-pages&lt;/code&gt; branch only when needed.&lt;/p&gt;

&lt;p&gt;Adding posts or pages in Jekyll is quite easy and there is plenty of
documentation. When you’re done, make sure you are in the &lt;code&gt;master&lt;/code&gt;
branch and that changes are committed, otherwise you will not be able
to switch to the &lt;code&gt;gh-pages&lt;/code&gt; branch later on. It’s OK to have files that
are not yet onboarded in GitHub though, &lt;code&gt;git&lt;/code&gt; will not complain about
them.&lt;/p&gt;

&lt;p&gt;At this point, you have to follow these steps:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build
git checkout gh-pages
tar cf - -C _sites . &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tar xvf -
git add .
git commit -m &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date &lt;span class=&quot;s1&quot;&gt;&amp;#39;+blog status at %Y%m%d-%H%M%S&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
git push origin gh-pages:gh-pages
git checkout master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The copy using &lt;code&gt;tar&lt;/code&gt; is effective although not completely correct. In
particular, it will not take into consideration things that you &lt;em&gt;delete&lt;/em&gt;,
because all items will be added to what is already saved and committed.
In general this should not be a problem though, because you will mostly
be adding things, will you not?&lt;/p&gt;

&lt;p&gt;A better strategy is to use &lt;code&gt;git ls-files&lt;/code&gt; to list all files and remove
most of them before doing the copy with &lt;code&gt;tar&lt;/code&gt;. We should not get rid of
all of them though, because some might be important for the generic
&lt;em&gt;management&lt;/em&gt; of the pages (e.g. the &lt;code&gt;.gitignore&lt;/code&gt; file). We will assume
that there are no files with spaces, so this will work:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build
git checkout gh-pages
rm &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git ls-files &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -v &lt;span class=&quot;s1&quot;&gt;&amp;#39;^\.gitignore$&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
tar cf - -C _sites . &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tar xvf -
git add .
git commit -m &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date &lt;span class=&quot;s1&quot;&gt;&amp;#39;+blog status at %Y%m%d-%H%M%S&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
git push origin gh-pages:gh-pages
git checkout master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I eventually put the commands above in &lt;code&gt;publish.sh&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;MYDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;dirname &lt;span class=&quot;s2&quot;&gt;&amp;quot;$0&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;FULLME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;readlink -f &lt;span class=&quot;s2&quot;&gt;&amp;quot;$0&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BAREME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;s2&quot;&gt;&amp;quot;$0&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

die&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$*&amp;quot;&lt;/span&gt; &amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;2
   &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

main&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$MYDIR&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; die &lt;span class=&quot;s2&quot;&gt;&amp;quot;unable to go in $MYDIR&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; .. &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; die &lt;span class=&quot;s2&quot;&gt;&amp;quot;unable to go in parent directory of $MYDIR&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;in $PWD now&amp;quot;&lt;/span&gt;

   git checkout master &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; die &lt;span class=&quot;s1&quot;&gt;&amp;#39;unable to switch to master&amp;#39;&lt;/span&gt;
   bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; die &lt;span class=&quot;s2&quot;&gt;&amp;quot;unable to update contents&amp;quot;&lt;/span&gt;
   git checkout gh-pages &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; die &lt;span class=&quot;s1&quot;&gt;&amp;#39;unable to switch to gh-pages&amp;#39;&lt;/span&gt;
   tar cf - -C _site . &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tar xvf - &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git add . &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(date &amp;#39;+update at %Y%m%d-%H%M%S&amp;#39;)&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push origin gh-pages
   git checkout master &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; die &lt;span class=&quot;s1&quot;&gt;&amp;#39;unable to switch to master&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

main&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I’m not an expert on this, but it’s very probable that without resorting to
the trick of defining a function &lt;code&gt;main&lt;/code&gt; and calling it, things might go
very wrong in the execution of the script, because the script will live
in the &lt;code&gt;master&lt;/code&gt; branch but it might be unavailable in branch &lt;code&gt;gh-pages&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/github-pages/&quot;&gt;GitHub Pages&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on February 04, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[BitTorrent for personal file sharing]]></title>
  <link rel="alternate" type="text/html" href="/bittorrent/" />
  <id>/bittorrent</id>
  <published>2013-12-10T00:00:00+01:00</published>
  <updated>2013-12-10T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;I sometimes what to transfer a file from A to B and this file might be big.
Like a Virtual Machine Image around 20 GB.&lt;/p&gt;

&lt;p&gt;I discovered that BitTorrent can be quite powerful and robust for the file
transfer, but unfortunately there is not too much information around as to
set up a “personal” file sharing chain.&lt;/p&gt;

&lt;p&gt;One of the things that seem to be available are the DHT or &lt;em&gt;trackerless&lt;/em&gt;
torrents. Well, I did not manage to make one work, so I had to revert to a
more irritating method of setting up a tracker. Here’s how… without
using uTorrent, that is not freely available in Linux.&lt;/p&gt;

&lt;p&gt;The steps are quite simple:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;set up a Tracker&lt;/li&gt;
  &lt;li&gt;generate a torrent file&lt;/li&gt;
  &lt;li&gt;start a BitTorrent client where the file to transfer is, using the
torrent file to load it&lt;/li&gt;
  &lt;li&gt;send the torrent file to the recipient and start another BitTorrent
client with it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will see all of them step by step.&lt;/p&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;

&lt;p&gt;We will use the &lt;em&gt;standard&lt;/em&gt; BitTorrent client:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://bittorrent.cvs.sourceforge.net/viewvc/bittorrent/?view=tar&quot;&gt;tarball&lt;/a&gt; from SourceForge&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/files/bittorrent-20150201.tar.gz&quot;&gt;a snapshot of the above&lt;/a&gt; taken on February 1st, 2015&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unpack the whole thing and get into the BitTorrent directory. We’ll call
the directory you are into &lt;code&gt;$BT&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tracker-set-up&quot;&gt;Tracker Set-Up&lt;/h2&gt;

&lt;p&gt;The tracker is a server program that helps… tracking the download of the
different chunks by the interested clients. It acts as a very minimal web
server that only accepts &lt;code&gt;GET&lt;/code&gt; requests to a specific URI and with a
specific command line. You will not have to worry about this.&lt;/p&gt;

&lt;p&gt;You have to choose a port where your tracker will listen. We will just
select 12345 for our example, so you only have to start the tracker:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$BT&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;12345
./bttrack.py --port &lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; --dfile dfile-&lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; &amp;gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;log-$port.log&amp;quot;&lt;/span&gt; 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will start a Tracker in the background, listening on all the
interfaces at the port of your choice. The related URI is the following:
&lt;code&gt;http://your-server:12345/announce/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course, we are assuming that the Tracker can be reached through port
12345 of server &lt;code&gt;your-server&lt;/code&gt;… adjust according to your environment!&lt;/p&gt;

&lt;h2 id=&quot;torrent-file-creation&quot;&gt;Torrent File Creation&lt;/h2&gt;

&lt;p&gt;You don’t necessarily have a running Tracker to generate the torrent file,
but you will need one anyway… There are only a few really important
things to generate the torrent file: the Tracker’s URI and the file to
transfer. The command is pretty straightforward:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./btmakemetafile.py inputfile.ext http://your-server:12345/announce &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --target mystuff.torrent&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;bittorrent-client-server-side&quot;&gt;BitTorrent Client, &lt;em&gt;Server&lt;/em&gt;-side&lt;/h2&gt;

&lt;p&gt;This is quite easy… but with a twist. The client on the server will be
installed in the same host as the tracker, and this is a problem because the
server &lt;em&gt;normally&lt;/em&gt; relies upon the connection details (IP address) to
figure out where the peer is. In this case, it’s highly likely that you would
get some local address! Luckily there’s a parameter around this: &lt;code&gt;--ip&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./btdownloadheadless.py --ip &lt;span class=&quot;nv&quot;&gt;$visible_ip&lt;/span&gt; --minport &lt;span class=&quot;m&quot;&gt;54321&lt;/span&gt; --maxport &lt;span class=&quot;m&quot;&gt;54321&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&amp;quot;$torrentpath&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As said, you should set &lt;code&gt;$visible_ip&lt;/code&gt; to some address of the
serving machine that can be reached by the intended peer.&lt;/p&gt;

&lt;p&gt;You will have to start this command from the place where your file is,
otherwise this instance will try to download the relevant file instead of
seeding it.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;$torrenpath&lt;/code&gt; is supposed to carry the path to the torrent
file generated in the previous step.&lt;/p&gt;

&lt;p&gt;As you can see, we also chose to stick to a single port. This is important
later for setting up rules in the firewall.&lt;/p&gt;

&lt;h2 id=&quot;bittorrent-client-client-side&quot;&gt;BitTorrent Client, &lt;em&gt;Client&lt;/em&gt;-side&lt;/h2&gt;

&lt;p&gt;Here comes finally when you can download the torrent from the
destination. All you have to do is to send the torrent file (that is
way more compact!) to the recipient, and tell them to use their favourite
BitTorrent client to download it. Voilà!&lt;/p&gt;

&lt;h2 id=&quot;dont-forget-the-firewall&quot;&gt;Don’t Forget the Firewall!&lt;/h2&gt;

&lt;p&gt;If you are using some firewall you will have to ensure that the ports
are open. Most probably, the firewall will be iptables, in which case:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# this is for the Tracker&lt;/span&gt;
sudo iptables -A INPUT -p tcp -m tcp --dport &lt;span class=&quot;m&quot;&gt;12345&lt;/span&gt; -j ACCEPT

&lt;span class=&quot;c&quot;&gt;# this is for the Client&lt;/span&gt;
sudo iptables -A INPUT -p tcp -m tcp --dport &lt;span class=&quot;m&quot;&gt;54321&lt;/span&gt; -j ACCEPT&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;packing-it-all&quot;&gt;Packing it all&lt;/h2&gt;

&lt;p&gt;The following script can be executed on the host where you will be
serving the file. You can provide a port for the tracker, or let it
get one for you. It assumes that the following port is free as well,
and assigns it to the client (yes, not &lt;em&gt;that&lt;/em&gt; robust).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-$(&lt;/span&gt;perl -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;print int(50000 + rand 15000)&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-$(&lt;/span&gt;hostname&lt;span class=&quot;k&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-$(&lt;/span&gt;dig &lt;span class=&quot;s2&quot;&gt;&amp;quot;$hostname&amp;quot;&lt;/span&gt; +short&lt;span class=&quot;k&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CLIENTPORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BINDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;dirname &lt;span class=&quot;s2&quot;&gt;&amp;quot;$0&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BINDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;readlink -f &lt;span class=&quot;s2&quot;&gt;&amp;quot;$BINDIR&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BTTRACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$BINDIR/bttrack.py&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BTCLIENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$BINDIR/btdownloadheadless.py&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BTTORRENTCREATOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$BINDIR/btmakemetafile.py&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TORRENTFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$(basename &amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;)-$port.torrent&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create torrent file&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;$BTTORRENTCREATOR&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$filename&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://$hostname:$port/announce&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   --target &lt;span class=&quot;s2&quot;&gt;&amp;quot;$TORRENTFILE&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;created: $TORRENTFILE&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Start tracker, save pid for later&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;$BTTRACK&amp;quot;&lt;/span&gt; --port &lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; --dfile dfile-&lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &amp;gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;tracker-$port.log&amp;quot;&lt;/span&gt; 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Open ports. The client is blocking, so this has to be done before&lt;/span&gt;
sudo iptables -A INPUT -p tcp -m tcp --dport &lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; -j ACCEPT
sudo iptables -A INPUT -p tcp -m tcp --dport &lt;span class=&quot;nv&quot;&gt;$CLIENTPORT&lt;/span&gt; -j ACCEPT

&lt;span class=&quot;c&quot;&gt;# Start client&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;$BTCLIENT&amp;quot;&lt;/span&gt; --ip &lt;span class=&quot;s2&quot;&gt;&amp;quot;${ip:-$hostname}&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   --minport &lt;span class=&quot;nv&quot;&gt;$CLIENTPORT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   --maxport &lt;span class=&quot;nv&quot;&gt;$CLIENTPORT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&amp;quot;$TORRENTFILE&amp;quot;&lt;/span&gt; &amp;gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;client-$CLIENTPORT.log&amp;quot;&lt;/span&gt; 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# When client is interrupted, clean all up&lt;/span&gt;
sudo iptables -D INPUT -p tcp -m tcp --dport &lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; -j ACCEPT
sudo iptables -D INPUT -p tcp -m tcp --dport &lt;span class=&quot;nv&quot;&gt;$CLIENTPORT&lt;/span&gt; -j ACCEPT
&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$PID&amp;quot;&lt;/span&gt;
rm &lt;span class=&quot;s2&quot;&gt;&amp;quot;$TORRENTFILE&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;dfile-$port&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;client-$CLIENTPORT.log&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;tracker-$port.log&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


    &lt;p&gt;&lt;a href=&quot;/bittorrent/&quot;&gt;BitTorrent for personal file sharing&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on December 10, 2013.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Set up a remote git repository]]></title>
  <link rel="alternate" type="text/html" href="/git-remote-repository/" />
  <id>/git-remote-repository</id>
  <published>2013-11-06T00:00:00+01:00</published>
  <updated>2013-11-06T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;I sometimes happen to start a local repository that then I want to
replicate on my server, here’s what I use.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;basedirname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;s2&quot;&gt;&amp;quot;$PWD&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;perl/$basedirname&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;remote_hostname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;example.com
&lt;span class=&quot;nv&quot;&gt;remote_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ssh://user@$remote_hostname/path/to/git&amp;quot;&lt;/span&gt;

ssh &lt;span class=&quot;s2&quot;&gt;&amp;quot;$remote_hostname&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      cd git &amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      mkdir -p &amp;#39;$repository&amp;#39; &amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      cd &amp;#39;$repository&amp;#39; &amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      git init --bare&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;   &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
   git remote add &lt;span class=&quot;s2&quot;&gt;&amp;quot;$remote&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$remote_base/$repository&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
   git push -u --all origin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I call this script &lt;code&gt;remotise&lt;/code&gt;. When I want to set up the remote
repository, I hop into the relevant repository for the directory and issue:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /path/to/project

&lt;span class=&quot;c&quot;&gt;# Option 1: DWIM&lt;/span&gt;
remotise

&lt;span class=&quot;c&quot;&gt;# Option 2: set the path in the repository (I don&amp;#39;t do Perl only)&lt;/span&gt;
remotise web/someproject

&lt;span class=&quot;c&quot;&gt;# Option 3, set the name of the repository (shown by git memo) as well:&lt;/span&gt;
remotise web/someproject upstream&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s all folks!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/git-remote-repository/&quot;&gt;Set up a remote git repository&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on November 06, 2013.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[RRDtool - Sparse Notes]]></title>
  <link rel="alternate" type="text/html" href="/rrdtool/" />
  <id>/rrdtool</id>
  <published>2013-11-02T00:00:00+01:00</published>
  <updated>2013-11-02T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;http://oss.oetiker.ch/rrdtool/index.en.html&quot;&gt;RRDtool&lt;/a&gt; is a wonderful tool for collecting and graphing data.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;RRDtool is the OpenSource industry standard, high performance data logging
  and graphing system for time series data. RRDtool can be easily integrated
  in shell scripts, perl, python, ruby, lua or tcl applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take a look at the website for additional information… and read on for
some things that I find useful.&lt;/p&gt;

&lt;h2 id=&quot;data-collection&quot;&gt;Data collection&lt;/h2&gt;

&lt;p&gt;Data are collected into the database and fetched from it. The collection is
split into two parts: how they are read, and how they are stored.&lt;/p&gt;

&lt;p&gt;Reading of data is specified through the description of a &lt;em&gt;Data Source&lt;/em&gt;, or
&lt;code&gt;DS&lt;/code&gt;. See the docs about &lt;a href=&quot;http://oss.oetiker.ch/rrdtool/doc/rrdcreate.en.html&quot;&gt;rrdtool create&lt;/a&gt; for the details, but it’s useful
to know that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GAUGE&lt;/strong&gt;s are inputs that can go up and down. Like a temperature, the
voltage at some pin or the amount of money in a bank account.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;COUNTER&lt;/strong&gt; is for meters that can only increase, like e.g. the number of
times that you a light turns on, the quantity of bits that enter an interface
or that the sun rises in the morning.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DERIVE&lt;/strong&gt; can be used for the same kind of data that a GAUGE is for, but
focuses on the difference with respect to the previous read instead of the
absolute value. This can be useful e.g. if you want to track an increase or
decrease rate for a quantity. The docs page about &lt;a href=&quot;http://oss.oetiker.ch/rrdtool/doc/rrdcreate.en.html&quot;&gt;rrdtool create&lt;/a&gt; also has
additional remarks about the relation between DERIVE and COUNTER, so give it
a try if you’re having trouble with your COUNTERs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ABSOLUTE&lt;/strong&gt; is for counters that get reset upon reading. So, each time
you read the value you reset the counter, do you?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RRDtool is mostly interested into rates, so all of the above are actually
translated into a rate, except for GAUGEs that are stored as-is (so that
you can track things that actually have little to do with rates). If you
want to graph the stock market, use GAUGE.&lt;/p&gt;

&lt;h2 id=&quot;times&quot;&gt;Times&lt;/h2&gt;

&lt;p&gt;Time handling in RRDtool is quite interesting. It is assumed that you will
feed a new set of values every &lt;em&gt;step&lt;/em&gt;, where the step is specified
in seconds. The default is 300, so you’re supposed to feed a new set of
values every 5 minutes, but of course you can set what you see fit.&lt;/p&gt;

&lt;p&gt;The relevant concepts for times in RRDtool are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;step&lt;/strong&gt;, i.e. the length of the time range&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;start&lt;/strong&gt;, i.e. when a time range starts&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;end&lt;/strong&gt;, i.e. when a time range ends&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can set a start time when you create a database, but the &lt;em&gt;real&lt;/em&gt; start
time will be set depending on the step - in particular, as an integer
multiple of the step.&lt;/p&gt;

&lt;p&gt;It’s useful to think the line of time as a sequence of time intervals:
interval 1, interval 2, …, interval N. The real start is 0, corresponding
to when the epoch starts (January 1st, 1970), but time is actually a
sequence of intervals and not of points.&lt;/p&gt;

&lt;p&gt;Values stored in the database are always referred to one interval, not to
a point in time.&lt;/p&gt;

&lt;p&gt;So, what do start and end mean actually? They are used as ways to specify
the intervals we are interested into. Each is first framed into one
interval, then the sequence of intervals from the start’s to the end’s
(included) are considered.&lt;/p&gt;

&lt;p&gt;When we specify a point in time that separates two intervals, it is
assigned to the following one. So, if the step is equal to 60 and start
is 600 (separating the two intervals 540-600 and 600-660), the interval
considered is 600-660. This is the same as saying that intervals are
closed on the left and open on the right.&lt;/p&gt;

&lt;p&gt;Intervals are represented with the end time of the interval. so, in the
example above, if you specify start as 600, the related interval that
you will get first is the one marked with 660.&lt;/p&gt;

&lt;p&gt;Example: consider a database with a step of 60 seconds and capable of
collecting up to three values. The start time has to be “quite high” to
avoid incurring in some &lt;em&gt;do what I mean&lt;/em&gt; behaviour of RRDtool.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;600000000
&lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3
&lt;span class=&quot;nv&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;60

rrdtool create test.rrd &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   --step &lt;span class=&quot;nv&quot;&gt;$step&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   --start &lt;span class=&quot;nv&quot;&gt;$start&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   DS:testdata:GAUGE:120:U:U &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   RRA:MAX:0.5:1:&lt;span class=&quot;nv&quot;&gt;$items&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; i in &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$step&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
   rrdtool update test.rrd &lt;span class=&quot;nv&quot;&gt;$time&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;rrdtool last test.rrd&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

rrdtool fetch test.rrd MAX --start&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$start&lt;/span&gt; --end&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;start+180&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 600000060: 1.0000000000e+00
 600000120: 2.0000000000e+00
 600000180: 3.0000000000e+00
 600000240: -nan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which shows how both start, end and the marker for an interval are chosen
according to what described above.&lt;/p&gt;

&lt;p&gt;As an additional note, it has to be considered that real intervals might be
compound of multiples of the configured step. For example, if you have a
round robin archive (RRA) that aggregates 5 values with a step of 60, each
data point actually refers to 300 seconds (5 minutes). When this RRA is
accessed, the relevant start and stops will yield time intervals that align
to a 300-seconds chunking of the time line starting from the origin of the
epochs.&lt;/p&gt;

&lt;h2 id=&quot;getting-the-right-data&quot;&gt;Getting the right data&lt;/h2&gt;

&lt;p&gt;If you want to be sure to get the right data out of an RRD database, you
have to ensure some things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you know which round robin archive you’re looking at&lt;/li&gt;
  &lt;li&gt;you know how many data points to ask&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RRDtool will try to give you the best available data, but e.g. if you have
fine grained data for the last week and you ask for data in the last ten
days, you’ll hit a different RRA (if available).&lt;/p&gt;

&lt;p&gt;To get exactly all the data in a RRA you can do as follows (assuming the
database file is &lt;code&gt;test.rrd&lt;/code&gt;):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;run &lt;code&gt;rrdtool info test.rrd&lt;/code&gt; to get the relevant data. You
will find something like this:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;filename = &quot;test.rrd&quot;
rrd_version = &quot;0003&quot;
step = 60
last_update = 600018000
header_size = 736
ds[testdata].index = 0
ds[testdata].type = &quot;GAUGE&quot;
ds[testdata].minimal_heartbeat = 120
ds[testdata].min = NaN
ds[testdata].max = NaN
ds[testdata].last_ds = &quot;300&quot;
ds[testdata].value = 0.0000000000e+00
ds[testdata].unknown_sec = 0
rra[0].cf = &quot;MAX&quot;
rra[0].rows = 300
rra[0].cur_row = 157
rra[0].pdp_per_row = 1
rra[0].xff = 5.0000000000e-01
rra[0].cdp_prep[0].value = NaN
rra[0].cdp_prep[0].unknown_datapoints = 0
rra[1].cf = &quot;MAX&quot;
rra[1].rows = 300
rra[1].cur_row = 66
rra[1].pdp_per_row = 20
rra[1].xff = 5.0000000000e-01
rra[1].cdp_prep[0].value = -inf
rra[1].cdp_prep[0].unknown_datapoints = 0
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;detect the RRA - there might be many in a database, so pick your
favourite. We will assume that you want to focus on &lt;code&gt;rra[1]&lt;/code&gt; in the
example above;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;identify the following basic variables:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;step&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;last_update&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;pdp_per_row&lt;/code&gt; (&lt;code&gt;rra[1].pdp_per_row&lt;/code&gt; in the example)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;rows&lt;/code&gt; (&lt;code&gt;rra[1].rows&lt;/code&gt; in the example)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;calculate the RRA interval length as &lt;code&gt;superstep = step * pdp_per_row&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;calculate the end time of the last interval with meaningful data as
&lt;code&gt;real_end = last_update % superstep&lt;/code&gt; (&lt;code&gt;%&lt;/code&gt; representing the modulus
function)&lt;/li&gt;
  &lt;li&gt;consider &lt;code&gt;start = real_end - superstep * rows + 1&lt;/code&gt; and
&lt;code&gt;end = real_end - 1&lt;/code&gt;. The addition/subtraction of one second is to be
sure to fall &lt;em&gt;inside&lt;/em&gt; an interval instead of being at one border, just
to avoid surprises (this is actually needed for end only)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can then consider &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt; and &lt;code&gt;superstep&lt;/code&gt; for usage in
&lt;a href=&quot;http://oss.oetiker.ch/rrdtool/doc/rrdfetch.en.html&quot;&gt;rrdtool fetch&lt;/a&gt; (respectively for &lt;code&gt;--start&lt;/code&gt;, &lt;code&gt;--end&lt;/code&gt; and &lt;code&gt;--resolution&lt;/code&gt;)
and in &lt;a href=&quot;http://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html&quot;&gt;rrdtool graph&lt;/a&gt; (respectively for &lt;code&gt;--start&lt;/code&gt;, &lt;code&gt;--end&lt;/code&gt; and &lt;code&gt;--step&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The above is implemented in the following Perl program
&lt;code&gt;get-full-interval.pl&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;English&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw&amp;lt; -no_match_vars &amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Util&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw&amp;lt; reduce &amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dumper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RRDs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$OUTPUT_AUTOFLUSH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rra_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rrd_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rra&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rra_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$superstep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdp_per_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$real_end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$last&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;superstep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$end&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$real_end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$start&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$real_end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$superstep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;$start $end $superstep $rra-&amp;gt;{rows}\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rrd_info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$raw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RRDs::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%retval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%$raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_to_pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%retval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_to_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$$ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%retval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;## end sub rrd_info&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name_to_path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;m{^(.+?)\[(.+)\]$}mxs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;m{^(?:rra|cdp_prep)$}mxs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/\./&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;## end sub name_to_path&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path_to_pointer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# see http://www.perlmonks.org/?node_id=443584&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$$a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$$a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Call this program as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;get-full-interval.pl test.rrd 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where the first parameter is the name of the RRD database and the second
parametrs is the identifier of the RRA you are interested into. The program
will output, in order, the following parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;value for &lt;code&gt;--start&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;value for &lt;code&gt;--end&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;the length of the interval (to be used as &lt;code&gt;--step&lt;/code&gt; or &lt;code&gt;--resolution&lt;/code&gt;
where these parameters make sense)&lt;/li&gt;
  &lt;li&gt;the number of data points you will get (useful for setting the right
&lt;code&gt;--width&lt;/code&gt; if you want to produce a graph)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;graphing-a-whole-database&quot;&gt;Graphing a whole database&lt;/h2&gt;

&lt;p&gt;The following program produces a graph for each variable and each RRA you
have in your database, according to the hints provided in the previous
section:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;s2&quot;&gt;&amp;quot;$db&amp;quot;&lt;/span&gt; .rrd&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;rrdtool info &lt;span class=&quot;s2&quot;&gt;&amp;quot;$db&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^ds\[\(.*\)\]\.index.*/\1/p&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
rrdtool info &lt;span class=&quot;s2&quot;&gt;&amp;quot;$db&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^rra\[\(.*\)\]\.cf.*&amp;quot;\(.*\)&amp;quot;$/\1 \2/p&amp;#39;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;rra cf &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      ./get-full-interval.pl &lt;span class=&quot;s2&quot;&gt;&amp;quot;$db&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rra&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
         &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;start end step rows
         &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; variable in &lt;span class=&quot;nv&quot;&gt;$variables&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            rrdtool graph &lt;span class=&quot;s2&quot;&gt;&amp;quot;$root-$variable-$rra-$cf.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               --start &lt;span class=&quot;nv&quot;&gt;$start&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               --end &lt;span class=&quot;nv&quot;&gt;$end&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               --step &lt;span class=&quot;nv&quot;&gt;$step&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               --width &lt;span class=&quot;nv&quot;&gt;$rows&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               --disable-rrdtool-tag &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               &lt;span class=&quot;s2&quot;&gt;&amp;quot;DEF:v=$db:$variable:$cf&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               LINE1:v#000
         &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course this is one graph per variable without any fancy bell or
whistle… start from &lt;a href=&quot;http://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html&quot;&gt;rrdtool graph&lt;/a&gt; to learn all the masters’ tricks!&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/rrdtool/&quot;&gt;RRDtool - Sparse Notes&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on November 02, 2013.&lt;/p&gt;
  </content>
</entry>

</feed>
