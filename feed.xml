<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">PolettiX!</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2016-12-23T23:38:20+01:00</updated>
<id>/</id>
<author>
  <name>Flavio Poletti</name>
  <uri>/</uri>
  <email>flavio@polettix.it</email>
</author>


  

<entry>
  <title type="html"><![CDATA[WebService::Fake - but still usable!]]></title>
  <link rel="alternate" type="text/html" href="/webservice-fake-but-still-usable/" />
  <id>/webservice-fake-but-still-usable</id>
  <published>2016-11-26T00:00:00+01:00</published>
  <updated>2016-11-26T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;Some time ago one of the rites of passage for a wannabe Perl programmer
was having its own take on a templating system. I duly complied with
&lt;a href=&quot;https://metacpan.org/pod/Template::Perlish&quot;&gt;Template::Perlish&lt;/a&gt;, which I’m quite happy about and I use anywhere
I can. Later, it seems that many people thought they would have a take at
building the next cool web service/application framework; here, I set
quite low expectactions, but it’s still useful!&lt;/p&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#table-of-contents&quot; id=&quot;markdown-toc-table-of-contents&quot;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-it-about&quot; id=&quot;markdown-toc-what-is-it-about&quot;&gt;What is it about?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#care-to-show-an-example&quot; id=&quot;markdown-toc-care-to-show-an-example&quot;&gt;Care to show an example?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#should-i-be-impressed&quot; id=&quot;markdown-toc-should-i-be-impressed&quot;&gt;Should I be impressed?&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#use-the-headers&quot; id=&quot;markdown-toc-use-the-headers&quot;&gt;Use the head(ers)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#craft-your-answer&quot; id=&quot;markdown-toc-craft-your-answer&quot;&gt;Craft your answer&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ive-only-2-minutes-left&quot; id=&quot;markdown-toc-ive-only-2-minutes-left&quot;&gt;I’ve only 2 minutes left…&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#using-templates&quot; id=&quot;markdown-toc-using-templates&quot;&gt;Using Templates&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#accessing-variables&quot; id=&quot;markdown-toc-accessing-variables&quot;&gt;Accessing variables&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#placeholders&quot; id=&quot;markdown-toc-placeholders&quot;&gt;Placeholders&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#defaults&quot; id=&quot;markdown-toc-defaults&quot;&gt;Defaults&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#body-wrapper&quot; id=&quot;markdown-toc-body-wrapper&quot;&gt;Body wrapper&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#times-up&quot; id=&quot;markdown-toc-times-up&quot;&gt;Time’s up!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-it-about&quot;&gt;What is it about?&lt;/h2&gt;

&lt;p&gt;When building &lt;em&gt;real&lt;/em&gt; stuff, quite often I have to interact with some
external API, usually provided as a webservice of some sort. Not always
I have direct access to it (especially from my laptop in some casual
place), or want to hammer the service while doing development. The classic
use case where a &lt;em&gt;mock&lt;/em&gt; can be useful.&lt;/p&gt;

&lt;p&gt;It’s quite easy to setup such an example application by directly using one
of the available web frameworks. Among them, &lt;a href=&quot;https://metacpan.org/pod/Mojolicious&quot;&gt;Mojolicious&lt;/a&gt; is probably
best suited for the job, as it has a really low &lt;em&gt;entrance fee&lt;/em&gt; for setting
it up (a basic installation takes only two distributions and is usually
very, very quick). If you already have &lt;a href=&quot;https://metacpan.org/pod/Dancer&quot;&gt;Dancer&lt;/a&gt; around, anyway, it’s
also very easy to setup a simple application with it too. So, this is the
perfect scenario for &lt;em&gt;reinventing the wheel&lt;/em&gt; and have a personal shot to
the problem.&lt;/p&gt;

&lt;p&gt;I’m actually cheating a lot in this, because &lt;a href=&quot;https://metacpan.org/pod/distribution/WebService-Fake/script/wsf&quot;&gt;WebService::Fake&lt;/a&gt; uses
&lt;a href=&quot;https://metacpan.org/pod/Mojolicious&quot;&gt;Mojolicious&lt;/a&gt; behind the scenes. &lt;em&gt;But hey, what did you expect from
something with &lt;code&gt;Fake&lt;/code&gt; in its name&lt;/em&gt;?!?&lt;/p&gt;

&lt;p&gt;So there you go, &lt;a href=&quot;https://metacpan.org/pod/distribution/WebService-Fake/script/wsf&quot;&gt;WebService::Fake&lt;/a&gt; is my personal take to having
something that lets you build your webservice (or web application, for
what it’s worth) in some way. I’ve not prove it formally, but it &lt;em&gt;should&lt;/em&gt;
let you do almost anything, in some strange and skewed perlish way: easy
things are easy, complicate things are somehow possible but you’d better
do them with something different!&lt;/p&gt;

&lt;h2 id=&quot;care-to-show-an-example&quot;&gt;Care to show an example?&lt;/h2&gt;

&lt;p&gt;Sure! The web service definition is provided via a YAML file, like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;{&amp;quot;message&amp;quot;:&amp;quot;Hello,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;World!&amp;quot;}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Suppose it’s saved as &lt;code&gt;hello-world.wsf&lt;/code&gt;. You can then start the faker in
a shell (assuming &lt;code&gt;wsf&lt;/code&gt; is in &lt;code&gt;PATH&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;shell$ WEBSERVICE_FAKE=hello-world.wsf wsf daemon&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;[Sat Nov 26 15:30:00 2016] [info] Listening at &amp;quot;http://*:3000&amp;quot;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;Server available at http://127.0.0.1:3000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;daemon&lt;/code&gt; should ring some bell about &lt;a href=&quot;https://metacpan.org/pod/Mojolicious&quot;&gt;Mojolicious&lt;/a&gt; I guess. We can
now do a &lt;code&gt;GET&lt;/code&gt; in another shell and see what happens:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;shell$ curl -v http://localhost:3000/
* About to connect() to localhost port 3000 (#0)
*   Trying ::1...
* Connection refused
*   Trying 127.0.0.1...
* connected
* Connected to localhost (127.0.0.1) port 3000 (#0)
&amp;gt; GET / HTTP/1.1
&amp;gt; User-Agent: curl/7.26.0
&amp;gt; Host: localhost:3000
&amp;gt; Accept: */*
&amp;gt; 
* additional stuff not fine transfer.c:1037: 0 0
* HTTP 1.1 or later with persistent connection, pipelining supported
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Content-Type: application/json
&amp;lt; Server: Mojolicious (Perl)
&amp;lt; Content-Length: 27
&amp;lt; Date: Sat, 26 Nov 2016 14:30:03 GMT
&amp;lt; 
* Connection #0 to host localhost left intact
{&amp;quot;message&amp;quot;:&amp;quot;Hello, World!&amp;quot;}* Closing connection #0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A few comments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it works! This can be surprising for something that prides to be &lt;em&gt;fake&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;the &lt;code&gt;Server&lt;/code&gt; is another confirmation we’re building on top of
&lt;a href=&quot;https://metacpan.org/pod/Mojolicious&quot;&gt;Mojolicious&lt;/a&gt;…&lt;/li&gt;
  &lt;li&gt;the default &lt;code&gt;Content-Type&lt;/code&gt; is set to &lt;code&gt;application/json&lt;/code&gt;. There’s
a reason why the module name starts with &lt;code&gt;WebService&lt;/code&gt;, after all,
although you can change it as we will see shortly&lt;/li&gt;
  &lt;li&gt;whatever we set as the &lt;code&gt;body&lt;/code&gt; is returned as… the body.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;should-i-be-impressed&quot;&gt;Should I be impressed?&lt;/h2&gt;

&lt;p&gt;Just for comparison, the equivalent &lt;a href=&quot;https://metacpan.org/pod/Mojolicious::Lite&quot;&gt;Mojolicious::Lite&lt;/a&gt; code for the
previous section would be (without too much golfing, I admit):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Mojolicious::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So yeah… &lt;a href=&quot;https://metacpan.org/pod/distribution/WebService-Fake/script/wsf&quot;&gt;WebService::Fake&lt;/a&gt; lets you spare a few strokes, but it’s
nothing you couldn’t get directly from &lt;a href=&quot;https://metacpan.org/pod/Mojolicious&quot;&gt;Mojolicious&lt;/a&gt; anyway.&lt;/p&gt;

&lt;h3 id=&quot;use-the-headers&quot;&gt;Use the head(ers)&lt;/h3&gt;

&lt;p&gt;Let’s complicate the web service definition a bit, for example to set
a new server name and set a customized header too:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;{&amp;quot;message&amp;quot;:&amp;quot;Hello,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;World!&amp;quot;}&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;WebService::Fake/0.001&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;X-Whatever&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;whatever&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;whatever&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It does what you expect:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;shell$ curl -v http://localhost:3000/
#....
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Content-Length: 27
&amp;lt; Date: Sat, 26 Nov 2016 14:46:10 GMT
&amp;lt; X-Whatever: whatever is whatever
&amp;lt; Server: WebService::Fake/0.001
&amp;lt; Content-Type: application/json
&amp;lt; 
* Connection #0 to host localhost left intact
{&amp;quot;message&amp;quot;:&amp;quot;Hello, World!&amp;quot;}* Closing connection #0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is easy with &lt;a href=&quot;https://metacpan.org/pod/Mojolicious::Lite&quot;&gt;Mojolicious::Lite&lt;/a&gt; too of course:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Mojolicious::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;WebService::Fake/0.001&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;X-Whatever&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;whatever is whatever&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It’s just &lt;em&gt;slightly&lt;/em&gt; more complicated but still quite compact.
&lt;a href=&quot;https://metacpan.org/pod/Mojolicious&quot;&gt;Mojolicious&lt;/a&gt; provides a few headers shortcuts but you have somehow to
remember them, although you can fallback with the generic &lt;code&gt;header&lt;/code&gt; method
for both known and custom ones.&lt;/p&gt;

&lt;p&gt;The real difference is actually that &lt;a href=&quot;https://metacpan.org/pod/Mojolicious&quot;&gt;Mojolicious&lt;/a&gt; provides a complete
(and consistent) set of tools as part of the toolkit, while
&lt;a href=&quot;https://metacpan.org/pod/distribution/WebService-Fake/script/wsf&quot;&gt;WebService::Fake&lt;/a&gt; tries to optimize for the case where you somehow
&lt;em&gt;already know&lt;/em&gt; the shape of the answer you want to get, and want to
describe it as quickly as possible.&lt;/p&gt;

&lt;h3 id=&quot;craft-your-answer&quot;&gt;Craft your answer&lt;/h3&gt;

&lt;p&gt;As a last example for this section, suppose you also want to provide
a different return code, e.g. &lt;code&gt;203 Non-Authoritative Information&lt;/code&gt;. It’s
easy to do this in our definition YAML:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;{&amp;quot;message&amp;quot;:&amp;quot;Hello,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;World!&amp;quot;}&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;203&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;WebService::Fake/0.001&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;X-Whatever&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;whatever&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;whatever&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, it’s up to the promise:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;shell$ curl -v http://localhost:3000/
#....
&amp;lt; HTTP/1.1 203 Non-Authoritative Information
&amp;lt; X-Whatever: whatever is whatever
&amp;lt; Content-Length: 27
&amp;lt; Server: WebService::Fake/0.001
&amp;lt; Date: Sat, 26 Nov 2016 14:58:20 GMT
&amp;lt; Content-Type: application/json
&amp;lt; 
* Connection #0 to host localhost left intact
{&amp;quot;message&amp;quot;:&amp;quot;Hello, World!&amp;quot;}* Closing connection #0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The same thing in &lt;a href=&quot;https://metacpan.org/pod/Mojolicious::Lite&quot;&gt;Mojolicious::Lite&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Mojolicious::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;WebService::Fake/0.001&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;X-Whatever&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;whatever is whatever&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;{&amp;quot;message&amp;quot;: &amp;quot;Hello, World!&amp;quot;}&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rendered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;204&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Things get a bit more complicated. To set the custom HTTP status code, we
have to take a different route for rendering the body (I hereby declare my
ignorance with respect to how keep the &lt;code&gt;json =&amp;gt; {...}&lt;/code&gt; alive, but it’s not
essential), because &lt;code&gt;render&lt;/code&gt; is not useful here.&lt;/p&gt;

&lt;p&gt;Again, it’s a matter of understanding what shortcuts are most useful in
the general case: in a real application/service, &lt;a href=&quot;https://metacpan.org/pod/Mojolicious&quot;&gt;Mojolicious&lt;/a&gt; takes
sane defaults, in this whole &lt;em&gt;faking someone else’s webservice&lt;/em&gt; context
&lt;a href=&quot;https://metacpan.org/pod/distribution/WebService-Fake/script/wsf&quot;&gt;WebService::Fake&lt;/a&gt; goes for a different optimization route.&lt;/p&gt;

&lt;h2 id=&quot;ive-only-2-minutes-left&quot;&gt;I’ve only 2 minutes left…&lt;/h2&gt;

&lt;p&gt;So let’s go fast. If you already have the right answers to the requests
you want to fake, then you should be all set. If you need to add a bit of
logic though…&lt;/p&gt;

&lt;h3 id=&quot;using-templates&quot;&gt;Using Templates&lt;/h3&gt;

&lt;p&gt;Body and headers are actually defined in terms of &lt;a href=&quot;https://metacpan.org/pod/Template::Perlish&quot;&gt;Template::Perlish&lt;/a&gt;
templates, so this does what you think:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;{&amp;quot;now&amp;quot;:&amp;quot;[%=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;scalar&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;localtime&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%]&amp;quot;}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;accessing-variables&quot;&gt;Accessing variables&lt;/h3&gt;

&lt;p&gt;You can &lt;em&gt;spice up&lt;/em&gt; your fake answers including a few elements from the
request too, e.g. parameters:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;{&amp;quot;name&amp;quot;:&amp;quot;[%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;params.name&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%]&amp;quot;}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;placeholders&quot;&gt;Placeholders&lt;/h3&gt;

&lt;p&gt;Did I mention that there’s &lt;a href=&quot;https://metacpan.org/pod/Mojolicious&quot;&gt;Mojolicious&lt;/a&gt; providing features? You can
define routes with placeholders, and later access them:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/hello/:name&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;{&amp;quot;greeting&amp;quot;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hello&amp;quot;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;:&amp;quot;[%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;stash.name&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%]&amp;quot;}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;defaults&quot;&gt;Defaults&lt;/h3&gt;

&lt;p&gt;Have a lot of routes and want to set common things once and for all?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;text/plain&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;X-Whatever&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;whatever&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Something/Fake&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/hello/:name&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Hello,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;stash.name&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%]!&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/negate/:something&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;[%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;stash.something&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;no-no!&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;body-wrapper&quot;&gt;Body wrapper&lt;/h3&gt;

&lt;p&gt;Suppose you have to fake some API that has some boilerplate that never
changes across different routes, and you want to change only a single
part. This is where a body wrapper comes handy:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;body_wrapper&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;&amp;quot;status&amp;quot;: &amp;quot;OK&amp;quot;,&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;&amp;quot;timestamp&amp;quot;: &amp;quot;[%= scalar localtime %]&amp;quot;,&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;&amp;quot;data&amp;quot;: [% content %]&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/hello/:name&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;{&amp;quot;greeting&amp;quot;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hello&amp;quot;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;:&amp;quot;[%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;stash.name&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%]&amp;quot;}&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/negate/:something&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;{&amp;quot;action&amp;quot;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;negate&amp;quot;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;what&amp;quot;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;stash.something&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%]&amp;quot;}&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/text/hello/:name&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;text/plain&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;body_wrapper&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;~&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Hello,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;stash.name&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%]!&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see from the last route, you can selectively disable the
wrapper on a per-route basis.&lt;/p&gt;

&lt;h2 id=&quot;times-up&quot;&gt;Time’s up!&lt;/h2&gt;

&lt;p&gt;You have surely noticed that there’s no specific support for security and
the like, there’s no explicit support for sanitizing your inputs, escaping
your output, etc. etc. i.e. all those goodies that help you build
something robust to put into the wild.&lt;/p&gt;

&lt;p&gt;So what’s it good for?!? I told you in the beginning… fake web services,
that’s it! It’s meant to be a sparring partner for your programs to
excercise against something that can actually answer them something, not
to put in front of your “customers” (so don’t try to do that!).&lt;/p&gt;

&lt;p&gt;We didn’t go too much in depth, and you might find a few additional tricks
if you’re curious enough to take a look at the &lt;a href=&quot;https://metacpan.org/pod/distribution/WebService-Fake/script/wsf&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It would be great to hear from you! Comment below, or abuse the code and
find bugs, or file suggestions on &lt;a href=&quot;https://github.com/polettix/WebService-Fake&quot;&gt;GitHub&lt;/a&gt; but whatever you decide to
make of it… happy faking!&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/webservice-fake-but-still-usable/&quot;&gt;WebService::Fake - but still usable!&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on November 26, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Dokku - Your Tiny PaaS]]></title>
  <link rel="alternate" type="text/html" href="/dokku-your-tiny-paas/" />
  <id>/dokku-your-tiny-paas</id>
  <published>2016-10-09T00:00:00+02:00</published>
  <updated>2016-10-09T00:00:00+02:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;Do you like &lt;a href=&quot;https://en.wikipedia.org/wiki/Platform_as_a_service&quot;&gt;Platform as a Service&lt;/a&gt;? Ever wondered about rolling
your own, especially if you have some capacity that you don’t use and you
are always struggling deploying your stuff? Meet &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt;, &lt;em&gt;[t]he smallest
PaaS implementation you’ve ever seen&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#table-of-contents&quot; id=&quot;markdown-toc-table-of-contents&quot;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#platform-as-a-service&quot; id=&quot;markdown-toc-platform-as-a-service&quot;&gt;Platform as a Service?&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#is-it-right-for-me&quot; id=&quot;markdown-toc-is-it-right-for-me&quot;&gt;Is it right for me?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#i-like-it-but-i-have-this-server&quot; id=&quot;markdown-toc-i-like-it-but-i-have-this-server&quot;&gt;I like it, but I have this server…&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dokku&quot; id=&quot;markdown-toc-dokku&quot;&gt;Dokku&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#work-on-a-project&quot; id=&quot;markdown-toc-work-on-a-project&quot;&gt;Work On A Project&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#starting-point&quot; id=&quot;markdown-toc-starting-point&quot;&gt;Starting point&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#paas-project-setup-in-dokku&quot; id=&quot;markdown-toc-paas-project-setup-in-dokku&quot;&gt;PaaS project setup in Dokku&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#how-to-build-buildpacks&quot; id=&quot;markdown-toc-how-to-build-buildpacks&quot;&gt;How to build: &lt;code&gt;.buildpacks&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#how-to-run-procfile&quot; id=&quot;markdown-toc-how-to-run-procfile&quot;&gt;How to run: &lt;code&gt;Procfile&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#ready&quot; id=&quot;markdown-toc-ready&quot;&gt;Ready!&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#moar-moar-moar&quot; id=&quot;markdown-toc-moar-moar-moar&quot;&gt;Moar! Moar! Moar!&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#first-evolve-the-code&quot; id=&quot;markdown-toc-first-evolve-the-code&quot;&gt;First, evolve the code…&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#then-add-a-new-service&quot; id=&quot;markdown-toc-then-add-a-new-service&quot;&gt;Then, add a new service…&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#then-learn-about-scaling&quot; id=&quot;markdown-toc-then-learn-about-scaling&quot;&gt;Then, learn about scaling…!&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#then-we-think-were-ready-but&quot; id=&quot;markdown-toc-then-we-think-were-ready-but&quot;&gt;Then, we think we’re ready &lt;strong&gt;but&lt;/strong&gt;…&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#it-will-not-take-long-now&quot; id=&quot;markdown-toc-it-will-not-take-long-now&quot;&gt;It will not take long now!&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#backing-services&quot; id=&quot;markdown-toc-backing-services&quot;&gt;Backing Services&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#encryption-anyone&quot; id=&quot;markdown-toc-encryption-anyone&quot;&gt;Encryption Anyone?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summing-up&quot; id=&quot;markdown-toc-summing-up&quot;&gt;Summing Up&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#updates&quot; id=&quot;markdown-toc-updates&quot;&gt;Updates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;platform-as-a-service&quot;&gt;Platform as a Service?&lt;/h2&gt;

&lt;p&gt;Wikipedia describes &lt;a href=&quot;https://en.wikipedia.org/wiki/Platform_as_a_service&quot;&gt;Platform as a Service&lt;/a&gt; (abbreviated PaaS) like
this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Platform as a service (PaaS) is a category of cloud computing services
that provides a platform allowing customers to develop, run, and manage
applications without the complexity of building and maintaining the
infrastructure typically associated with developing and launching an
app.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the most widely used &lt;a href=&quot;https://en.wikipedia.org/wiki/Platform_as_a_service&quot;&gt;PaaS&lt;/a&gt; platforms that I know of is
&lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;. Once you set up your project on Heroku (which takes very
little energy with a few commands and configuration files), the promise is
that your development/deployment workflow will be this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# hack on your code
$ vi app.pl

# commit your changes
$ git commit app.pl -m &amp;#39;Add killer feature&amp;#39;
[master 7bb308e] Add killer feature
1 file changed...

# push new commit(s) to the repository in Heroku
$ git push heroku master
Counting objects: 6, done.
# ... several lines of automated deployment...
=====&amp;gt; Application deployed:
       http://sample-mojo.example.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So yes, the promise is that all your deployment effort is &lt;em&gt;just&lt;/em&gt; the &lt;code&gt;git
push&lt;/code&gt; command. Nifty, uh?&lt;/p&gt;

&lt;h3 id=&quot;is-it-right-for-me&quot;&gt;Is it right for me?&lt;/h3&gt;

&lt;p&gt;Should you use this? It depends on you, what your goals are and what level
of control you want to retain. Do you have a personal project, or are just
starting a new one and you want to get something up and running before you
lose momentum? Then it’s probably for you. Do you have a well-established
project with some complex gating rules for going in production? Chances
are you already have something in place, and switching would not be
beneficial.&lt;/p&gt;

&lt;p&gt;Unless… you want to have a sandbox/staging environment where you want to
be able to hack quickly. So, there are plenty of occasions in which
&lt;a href=&quot;https://en.wikipedia.org/wiki/Platform_as_a_service&quot;&gt;PaaS&lt;/a&gt; can be beneficial, especially if you want to concentrate on the
coding part and have little to no resources to take care of the system
management part.&lt;/p&gt;

&lt;p&gt;Public &lt;a href=&quot;https://en.wikipedia.org/wiki/Platform_as_a_service&quot;&gt;PaaS&lt;/a&gt; services like &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; come with a cost, of course. You
might be a shiny new startup in Silicon Valley and got a voucher for one
of them, of course; in this case you just have to reclaim your voucher.
Like other cloud services (e.g. IaaS), it’s a nice way for investors to
give you money that they know will be invested in the infrastructure for
your services, instead of parties.&lt;/p&gt;

&lt;p&gt;For the average people in the rest of the world, anyway, the story can be
different. Whether it’s the right choiche to shell out money for
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Platform_as_a_service&quot;&gt;PaaS&lt;/a&gt; service or not is something that only you can assess; it’s good
to know about it anyway. And also know what the alternatives are.&lt;/p&gt;

&lt;h3 id=&quot;i-like-it-but-i-have-this-server&quot;&gt;I like it, but I have this server…&lt;/h3&gt;

&lt;p&gt;Doubts about using &lt;a href=&quot;https://en.wikipedia.org/wiki/Platform_as_a_service&quot;&gt;PaaS&lt;/a&gt; are especially fit if you already have
capacity that you are using, or planning to use, for your project. It
feels like a waste of resources, doesn’t it? This is where &lt;em&gt;DIY&lt;/em&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Platform_as_a_service&quot;&gt;PaaS&lt;/a&gt;
projects come to the rescue: they allow you to setup a &lt;a href=&quot;https://en.wikipedia.org/wiki/Platform_as_a_service&quot;&gt;PaaS&lt;/a&gt;-like
workflow but leveraging on infrastructure that you might already have (or
that you feel more comfortable with).&lt;/p&gt;

&lt;p&gt;One use case I find particularly useful is for test services or very
little personal projects. &lt;em&gt;Dynos&lt;/em&gt; in &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; each have a cost,
independently of how much resources they actually consume: in my private
&lt;a href=&quot;https://en.wikipedia.org/wiki/Platform_as_a_service&quot;&gt;PaaS&lt;/a&gt; I can easily stuff a lot of them inside a single VPS, spending
a lot less money. The drawback is more administration on my side and less
robustness, of course.&lt;/p&gt;

&lt;h2 id=&quot;dokku&quot;&gt;Dokku&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; is a tiny &lt;a href=&quot;https://en.wikipedia.org/wiki/Platform_as_a_service&quot;&gt;PaaS&lt;/a&gt; platform that you can install on your server.
Note that I used the singular form: it’s meant for very restricted
environments where all you have &lt;em&gt;and need&lt;/em&gt; is one single server; nothing
important or &lt;em&gt;production&lt;/em&gt; that you care too much, so.&lt;/p&gt;

&lt;p&gt;It is described as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The smallest PaaS implementation you’ve ever seen&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and rightly so: it’s a smart integration of other tools that can keep the
project itself up in a few (well, a couple thousand) lines of Bash code.&lt;/p&gt;

&lt;p&gt;It’s easy to &lt;a href=&quot;http://dokku.viewdocs.io/dokku/getting-started/installation/&quot;&gt;get
started&lt;/a&gt; so
I will not repeat the official steps here.&lt;/p&gt;

&lt;p&gt;If you want to give it a try, you can also head to &lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;Digital Ocean&lt;/a&gt; and
use one of their &lt;a href=&quot;https://www.digitalocean.com/products/one-click-apps/&quot;&gt;one-click
apps&lt;/a&gt;. I don’t
&lt;em&gt;completely&lt;/em&gt; like this approach because their deployment is Ubuntu (I tend
to like Debian more) and their &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; version is &lt;code&gt;0.6.5&lt;/code&gt; (there’s
&lt;code&gt;0.7.2&lt;/code&gt; around) right now.&lt;/p&gt;

&lt;p&gt;You can find a small project &lt;a href=&quot;https://github.com/polettix/dokku-boot&quot;&gt;dokku-boot&lt;/a&gt; on GitHub that will help you
set up &lt;code&gt;0.7.2&lt;/code&gt; on a new Debian instance (it should work just fine on
Ubuntu too). It’s more or less a simple wrapper around the main
installation instructions, but it also installs a couple of handy
extensions for &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt;, like support for &lt;a href=&quot;https://github.com/dokku/dokku-letsencrypt&quot;&gt;Let’s Encrypt&lt;/a&gt; (for free and hassle-free SSL certificates), &lt;a href=&quot;https://github.com/dokku/dokku-redis&quot;&gt;Redis&lt;/a&gt; and
&lt;a href=&quot;https://github.com/dokku/dokku-postgres&quot;&gt;Postgres&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From the &lt;code&gt;README&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Spin up a new VPS somewhere, e.g. &lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;Digital Ocean&lt;/a&gt;. I usually choose
the latest Debian release. You can select the smallest size if you just
want to give it a try. (And please… set up and use SSH keys, it’s 2016
or later!). Let’s say we save the IP address of this VPS in variable
&lt;code&gt;DOKKU_IP&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Log in a shell in the VPS as user &lt;code&gt;root&lt;/code&gt; and run:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;apt-get update
apt-get install -y curl perl
curl -LO https://github.com/polettix/dokku-boot/raw/master/dokku-boot.pl
perl dokku-boot.pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Wait for installation to complete, then go to &lt;code&gt;http://$DOKKU_IP/&lt;/code&gt; and
complete the setup of &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You end up with a reasonably &lt;em&gt;close&lt;/em&gt; system (only ports &lt;code&gt;22&lt;/code&gt;, &lt;code&gt;80&lt;/code&gt; and &lt;code&gt;443&lt;/code&gt;
will be open for incoming traffic). The last point can be somehow commented
further.&lt;/p&gt;

&lt;p&gt;You will land in a page where the SSH keys you defined for user &lt;code&gt;root&lt;/code&gt; are used
by default to initialize access to user &lt;code&gt;dokku&lt;/code&gt; too. If you defined more keys,
only the first one will &lt;em&gt;actually&lt;/em&gt; be used, so ensure that the one you will use
is actually the first one.&lt;/p&gt;

&lt;p&gt;Next, you can define the hostname. Here we will assume that you &lt;em&gt;do own&lt;/em&gt;
something registered directly after a &lt;a href=&quot;https://publicsuffix.org/&quot;&gt;public suffix&lt;/a&gt;. You can do &lt;em&gt;most&lt;/em&gt; of
what we describe in the following if you don’t (actually, the only thing
you will struggle with is the &lt;a href=&quot;https://github.com/dokku/dokku-letsencrypt&quot;&gt;Let’s Encrypt plugin&lt;/a&gt;). As of October
2016, owning one such domain can cost as low as about 3$ (&lt;a href=&quot;https://www.cloudns.net/&quot;&gt;ClouDNS&lt;/a&gt;
usually has a few offers in their &lt;a href=&quot;https://www.cloudns.net/domain-pricing-list/&quot;&gt;pricing
list&lt;/a&gt;). In this example we will assume to own the
ever-present &lt;code&gt;example.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After this, you get to decide how your application will appear to the world.
There are two alternatives:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Take the form &lt;code&gt;application-name.example.com&lt;/code&gt;. This is probably the most
elegant, but it is available only if you actually set a hostname and not an
IP address. We will stick with this as we are assuming to own &lt;code&gt;example.com&lt;/code&gt;
(which we don’t… of course!)&lt;/li&gt;
  &lt;li&gt;Take the form &lt;code&gt;&amp;lt;domain-or-ip&amp;gt;:&amp;lt;port&amp;gt;&lt;/code&gt;, where &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; will allocate a port
for each application. This will not be described here, as it requires some
additional settings on the &lt;code&gt;iptables&lt;/code&gt; firewall rules for letting the ports to
be accessible from the outside.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After all of this, you can just submit the form in the page and you will be all
set (you will be redirected to &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt;’s documentation page after this step).&lt;/p&gt;

&lt;p&gt;In the case you actually own a domain and you have control over its DNS
settings (as in our example), you should also set up a wildcard resolution
towards your &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; installation, with a A record like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;*.example.com IN A $DOKKU_IP&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code&gt;$DOKKU_IP&lt;/code&gt; must be expanded with your installation’s IP address, of
course. This setting will guarantee that a resolution for &lt;code&gt;someapp.example.com&lt;/code&gt;
will actually be pointed towards your personal &lt;a href=&quot;https://en.wikipedia.org/wiki/Platform_as_a_service&quot;&gt;PaaS&lt;/a&gt; system.&lt;/p&gt;

&lt;h2 id=&quot;work-on-a-project&quot;&gt;Work On A Project&lt;/h2&gt;

&lt;p&gt;Now you have your personal &lt;a href=&quot;https://en.wikipedia.org/wiki/Platform_as_a_service&quot;&gt;PaaS&lt;/a&gt; instance up and running, waiting for
your code to come. I’m a Perl enthusiast, so my example will be in Perl.&lt;/p&gt;

&lt;p&gt;In the following sub-sections, we’ll see:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a few assumptions about how your project is structured&lt;/li&gt;
  &lt;li&gt;what you have to do for connecting it to your &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; instance&lt;/li&gt;
  &lt;li&gt;enjoy!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;starting-point&quot;&gt;Starting point&lt;/h3&gt;

&lt;p&gt;Our starting point is a project that tracked with &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt;. In this
example, we will assume that we want to work on a simple &lt;code&gt;Hello World!&lt;/code&gt;
application (what else) built with &lt;a href=&quot;https://metacpan.org/pod/Mojolicious&quot;&gt;Mojolicious&lt;/a&gt;, and we will see
a couple of directions for evolving to a more complex application. You can
find the whole example in &lt;a href=&quot;https://github.com/polettix/sample-mojo&quot;&gt;this repository&lt;/a&gt; in GitHub if you
want to skip its construction.&lt;/p&gt;

&lt;p&gt;The application itself (in file &lt;code&gt;app.pl&lt;/code&gt;) is quite straightforward:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Mojolicious::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, World!\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You are probably already using something to track the automation of
installing the dependencies, we will use a &lt;code&gt;cpanfile&lt;/code&gt; because it’s used by
both [cpanm][] and [carton][] (the former being quite important for our
later automation, as we will see). It’s quite straightforward in this
case:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Mojolicious&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;7.08&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can install the module locally and check that it works actually:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cpanm -L local --notest --quiet --installdeps .
Successfully installed IO-Socket-IP-0.38
Successfully installed Mojolicious-7.08
2 distributions installed

$ alias ploc=&amp;quot;perl -I&amp;#39;$PWD&amp;#39;/local/lib/perl5&amp;quot;

$ ploc app.pl get /
[Sat Oct  8 18:40:34 2016] [debug] GET &amp;quot;/&amp;quot;
[Sat Oct  8 18:40:34 2016] [debug] Routing to a callback
[Sat Oct  8 18:40:34 2016] [debug] 200 OK (0.000391s, 2557.545/s)
Hello, World!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We only lack tracking it with &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; at this point:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# https://hackernoon.com/lesser-known-git-commands-151a1918a60
# see hint about `git it`
$ git init . &amp;amp;&amp;amp; git commit -m Root --allow-empty

$ git add . &amp;amp;&amp;amp; git commit -m &amp;#39;Import initial files&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Up to this point there was almost no overhead related to &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt;: we
would have written or application, installed the needed modules and
tracked changes with &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; anyway.&lt;/p&gt;

&lt;h3 id=&quot;paas-project-setup-in-dokku&quot;&gt;PaaS project setup in Dokku&lt;/h3&gt;

&lt;p&gt;Dokku mostly works sending commands via &lt;code&gt;ssh&lt;/code&gt; to the user &lt;code&gt;dokku&lt;/code&gt; in the
machine where it is installed. For this reason, it’s useful to define the
following alias:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ alias dokku=&amp;quot;ssh &amp;#39;dokku@$DOKKU_IP&amp;#39;&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The following steps are needed whatever application you want to deploy via&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# we will call our application &amp;quot;sample-mojo&amp;quot;
$ dokku apps:create sample-mojo

# we assume to be in our project sample-mojo directory
$ git remote add dokku &amp;quot;dokku@$DOKKU_IP:sample-mojo&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Are we ready for the first push? Well… not yet. We still have to fix a couple
things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;how will &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; figure out how to build our project? Like installing the
right modules, etc.?&lt;/li&gt;
  &lt;li&gt;how will it know what to run?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It turns out the &lt;a href=&quot;https://github.com/polettix/heroku-buildpack-perl-procfile&quot;&gt;heroku-buildpack-perl-procfile&lt;/a&gt; project on GitHub can ease
our life for both steps, let’s see how.&lt;/p&gt;

&lt;h4 id=&quot;how-to-build-buildpacks&quot;&gt;How to build: &lt;code&gt;.buildpacks&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; and &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; don’t support &lt;a href=&quot;http://www.perl.org/ [CPAN]: http://metacpan.org&quot;&gt;Perl&lt;/a&gt; applications out of the box.
I know, it’s a shame, but it’s easy to fix this via so-called &lt;a href=&quot;https://github.com/dokku/dokku/blob/master/docs/deployment/methods/buildpacks.md&quot;&gt;custom
buildpacks&lt;/a&gt; (which are the same as &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;’s) and many different clever
persons did this in slightly different ways.&lt;/p&gt;

&lt;p&gt;The philosophy under &lt;a href=&quot;https://github.com/polettix/heroku-buildpack-perl-procfile&quot;&gt;heroku-buildpack-perl-procfile&lt;/a&gt; is to make no
assumption on your application, apart that it’s written in &lt;a href=&quot;http://www.perl.org/ [CPAN]: http://metacpan.org&quot;&gt;Perl&lt;/a&gt; and will
need modules from either [CPAN][] or from some project-local directory.&lt;/p&gt;

&lt;p&gt;If you mostly stick with web projects and you want to run them via [Starman][],
you will probably want to look into some other package. I wanted to keep
control, so evolved the awesome &lt;a href=&quot;https://github.com/kazeburo/heroku-buildpack-perl-procfile&quot;&gt;original
heroku-buildpack-perl-procfile&lt;/a&gt; by &lt;a href=&quot;https://github.com/kazeburo&quot;&gt;kazeburo&lt;/a&gt; to suit my needs.&lt;/p&gt;

&lt;p&gt;To tell &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; that you want to use a buildpack you have a couple options
(see &lt;a href=&quot;https://github.com/dokku/dokku/blob/master/docs/deployment/methods/buildpacks.md&quot;&gt;custom buildpacks&lt;/a&gt; for some alternatives), in our case we will just add
a &lt;code&gt;.buildpacks&lt;/code&gt; file in our project’s root directory:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# in the project&amp;#39;s root directory
$ echo https://github.com/polettix/heroku-buildpack-perl-procfile.git \
     &amp;gt; .buildpacks

$ git add .buildpacks &amp;amp;&amp;amp; git commit -m &amp;#39;Add .buildpacks for Dokku builds&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;how-to-run-procfile&quot;&gt;How to run: &lt;code&gt;Procfile&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;The &lt;em&gt;standard&lt;/em&gt; way to describe an application in &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; is via a so-called
&lt;code&gt;Procfile&lt;/code&gt; (so-called in this context means that you &lt;em&gt;MUST&lt;/em&gt; call it with the
initial uppercase an the rest, otherwise it will not work!). It contains a line
for each component of your application, so that you can have e.g. a &lt;code&gt;web&lt;/code&gt; part,
a &lt;code&gt;database&lt;/code&gt; part, some &lt;code&gt;worker&lt;/code&gt;s and so on.&lt;/p&gt;

&lt;p&gt;You can name components with almost any reasonable name (e.g. use alphanumerics
or look for the rules). &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; assign no particular semantic to the names,
&lt;em&gt;except&lt;/em&gt; to &lt;code&gt;web&lt;/code&gt; which has (at least) to attached strings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;one instance of a &lt;code&gt;web&lt;/code&gt; service is always started initially (unless
explicitly configured differently or no &lt;code&gt;web&lt;/code&gt; is defined)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;web&lt;/code&gt; instances are accessible from the outside, there’s an [nginx][] reverse
proxy that is set-up automatically.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will start with one single &lt;code&gt;web&lt;/code&gt; component, so our &lt;code&gt;Procfile&lt;/code&gt; is quite
simple:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;web: perl ./app.pl daemon --listen &amp;quot;http://*:$PORT&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, when &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; starts a new web instance, it also passes the
&lt;code&gt;PORT&lt;/code&gt; environment variable so that your application can bind to the correct
port. How this parameter is used is dependent on the specific application
and/or framework that the application is using.&lt;/p&gt;

&lt;p&gt;As for the &lt;code&gt;.buildpacks&lt;/code&gt; file, we have to add &lt;code&gt;Procfile&lt;/code&gt; to our &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; project
and commit:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git add Procfile &amp;amp;&amp;amp; git commit -m &amp;#39;Add Procfile for Dokku runs&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;ready&quot;&gt;Ready!&lt;/h4&gt;

&lt;p&gt;At this point, we are ready for our first push to our &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; instance, YAY!
In our first push we will also set the &lt;code&gt;--set-upstream&lt;/code&gt; so that our following
&lt;code&gt;push&lt;/code&gt;es of &lt;code&gt;master&lt;/code&gt; will be automatically sent to the remote &lt;code&gt;dokku&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git push --set-upstream dokku master
Counting objects: 6, done.
# ... several lines of automated deployment...
=====&amp;gt; Application deployed:
       http://sample-mojo.example.com

To dokku@example.com:sample-mojo
* [new branch]      master -&amp;gt; master
Branch master set up to track remote branch master from dokku.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we are ready to send the very first HTTP request towards our new service.
As you can see, there’s a couple of lines that tells us where the service
lives:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;=====&amp;gt; Application deployed:
http://sample-mojo.example.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, it’s easy to send the request:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ curl http://sample-mojo.foobar.example.com
Hello, World!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Seems to work!&lt;/p&gt;

&lt;p&gt;At this point you can start hacking on your application and follow the pattern
we described in the beginning:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# hack on your code
$ vi app.pl

# commit your changes
$ git commit app.pl -m &amp;#39;Add killer feature&amp;#39;
[master 7bb308e] Add killer feature
1 file changed...

# push new commit(s) to the repository in Heroku
$ git push heroku master
Counting objects: 6, done.
# ... several lines of automated deployment...
=====&amp;gt; Application deployed: http://sample-mojo.example.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;moar-moar-moar&quot;&gt;Moar! Moar! Moar!&lt;/h2&gt;

&lt;p&gt;You can get tired of your single-service application pretty soon. Want to add
a database and cannot live with &lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt; for too long? Need to add some
&lt;em&gt;worker&lt;/em&gt; process to handle housekeeping or long-running jobs? Concentrating all
in a single instance of a &lt;em&gt;web&lt;/em&gt; thingie is clearly not the right way to go
unless you’re out of headaches.&lt;/p&gt;

&lt;p&gt;This is where your &lt;code&gt;Procfile&lt;/code&gt; comes to the rescue. For every &lt;em&gt;kind&lt;/em&gt; of
additional service, you just need to add a line with the name of the service
and the command line to start it.&lt;/p&gt;

&lt;h3 id=&quot;first-evolve-the-code&quot;&gt;First, evolve the code…&lt;/h3&gt;

&lt;p&gt;In our example, we will add support for a &lt;a href=&quot;https://metacpan.org/pod/Minion&quot;&gt;Minion&lt;/a&gt; worker trying to replicate
the example in the &lt;a href=&quot;https://metacpan.org/pod/Minion#DESCRIPTION&quot;&gt;DESCRIPTION&lt;/a&gt;, with just a little twist
in the database used (we’re going to use &lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt; in this example). This is
how we transform our &lt;code&gt;app.pl&lt;/code&gt; into:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Mojolicious::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Minion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;sqlite:test.db&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Slow task&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;poke_mojo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$job&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;$job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ua&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mojolicious.org&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;$job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;We have poked mojolicious.org for a visitor&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Perform job in a background worker process&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;poke_mojo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;We will poke mojolicious.org for you soon.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course we will need to make sure that the needed plugins are correctly
installed, so our &lt;code&gt;cpanfile&lt;/code&gt; becomes:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Mojolicious&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;7.08&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Minion&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;6.0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Minion::Backend::SQLite&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;0.007&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, we can install them locally and make sure that everything works fine:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cpanm -L local --notest --quiet --installdeps .
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s make a little local test: we first generate a &lt;code&gt;get&lt;/code&gt; to the regular
web application, then we start the minion (we might make it in two different
shells but it will work anyway because &lt;a href=&quot;https://metacpan.org/pod/Minion&quot;&gt;Minion&lt;/a&gt; is decoupled through the
database):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ alias ploc=&amp;quot;perl -I&amp;#39;$PWD&amp;#39;/local/lib/perl5&amp;quot;

$ ploc app.pl get /
[Sat Oct  8 22:53:42 2016] [debug] GET &amp;quot;/&amp;quot;
[Sat Oct  8 22:53:42 2016] [debug] Routing to a callback
[Sat Oct  8 22:53:42 2016] [debug] 200 OK (0.012938s, 77.292/s) 
We will poke mojolicious.org for you soon.

$ ploc app.pl minion worker
[Sat Oct  8 22:53:47 2016] [debug] Worker 18861 started
[Sat Oct  8 22:53:47 2016] [debug] Checking worker registry and job queue
[Sat Oct  8 22:53:47 2016] [debug] Performing job &amp;quot;1&amp;quot; with task &amp;quot;poke_mojo&amp;quot; in process 18862
[Sat Oct  8 22:53:47 2016] [debug] We have poked mojolicious.org for a visitor&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;then-add-a-new-service&quot;&gt;Then, add a new service…&lt;/h3&gt;

&lt;p&gt;Now, we make sure that the Minion worker is defined in &lt;code&gt;Procfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;web:    perl ./app.pl daemon --listen &amp;quot;http://*:$PORT&amp;quot;
minion: perl ./app.pl minion worker&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;then-learn-about-scaling&quot;&gt;Then, learn about scaling…!&lt;/h3&gt;

&lt;p&gt;At this stage, we &lt;em&gt;just&lt;/em&gt; need to commit and push, right? Let’s see:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git commit -am &amp;#39;Evolve example to use Minion&amp;#39;
[master af4ba9d] Evolve example to use Minion
3 files changed, 18 insertions(+), 3 deletions(-)

$ git push
Counting objects: 9, done.
#... some building happens here...
-----&amp;gt; Discovering process types
       Procfile declares types -&amp;gt; web, minion
#... something else happens...
=====&amp;gt; web=1
-----&amp;gt; Attempting...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, it seems that &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; knows about our &lt;code&gt;minion&lt;/code&gt; service type, but it
starts none. Now you understand what we meant before when we said that &lt;code&gt;web&lt;/code&gt; is
special because &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; starts one by default!&lt;/p&gt;

&lt;p&gt;A quick look to the current scaling setup is worth the time as a double check:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dokku ps:scale sample-mojo
-----&amp;gt; Scaling for sample-mojo
-----&amp;gt; proctype           qty                                                                          
-----&amp;gt; --------           ---                                                                          
-----&amp;gt; web                1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So… no &lt;code&gt;minion&lt;/code&gt;, no party? Fortunately, &lt;code&gt;ps:scale&lt;/code&gt; is not only for querying
the current status, but for changing it as well; let’s bump &lt;code&gt;minion&lt;/code&gt; then:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dokku ps:scale sample-mojo minion=1
-----&amp;gt; Scaling sample-mojo:minion to 1
#... some lines...
=====&amp;gt; web=1
=====&amp;gt; minion=1
#... some lines...
=====&amp;gt; Application deployed:
       http://sample-mojo.example.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that’s right!&lt;/p&gt;

&lt;h3 id=&quot;then-we-think-were-ready-but&quot;&gt;Then, we think we’re ready &lt;strong&gt;but&lt;/strong&gt;…&lt;/h3&gt;

&lt;p&gt;Are we ready now? Well… let’s see!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ curl http://sample-mojo.example.com
We will poke mojolicious.org for you soon.

# now we wait a few seconds to give the worker process the time get hold of the
# new task. The number of seconds might be reduced but let&amp;#39;s play safely
$ sleep 5

$ dokku logs sample-mojo
2016-10-08T21:10:42.160743389Z app[minion.1]: [Sat Oct  8 21:10:42 2016] [debug] Worker 8 started
2016-10-08T21:10:42.182393541Z app[minion.1]: [Sat Oct  8 21:10:42 2016] [debug] Checking worker registry and job queue
2016-10-08T21:10:30.978550240Z app[web.1]: [Sat Oct  8 21:10:30 2016] [info] Listening at &amp;quot;http://*:5000&amp;quot;
2016-10-08T21:14:44.107362361Z app[web.1]: [Sat Oct  8 21:14:44 2016] [debug] GET &amp;quot;/&amp;quot;
2016-10-08T21:14:44.108955921Z app[web.1]: [Sat Oct  8 21:14:44 2016] [debug] Routing to a callback
2016-10-08T21:14:44.127066080Z app[web.1]: [Sat Oct 8 21:14:44 2016] [debug] 200 OK (0.019002s, 52.626/s)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Uhm… the &lt;code&gt;worker&lt;/code&gt; seems still unaware of the request from the frontend…
what’s happening?&lt;/p&gt;

&lt;p&gt;It turns out that it’s a database issue here. When we run the example in our
development box, &lt;em&gt;both&lt;/em&gt; the web service and the minion worker were running in
the same directory of the same box. On the other hand, in this case the two are
running inside two separate &lt;em&gt;Linux containers&lt;/em&gt; created via &lt;a href=&quot;http://docker.io/&quot;&gt;Docker&lt;/a&gt;, so it’s
&lt;em&gt;like&lt;/em&gt; they are running in separate hosts.&lt;/p&gt;

&lt;p&gt;Fact is that &lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt; is a &lt;strong&gt;single&lt;/strong&gt; file database: for our system to work,
both the web and the minion services MUST operate on the same file! Now you
understand why &lt;a href=&quot;https://github.com/polettix/dokku-boot&quot;&gt;dokku-boot&lt;/a&gt; includes &lt;a href=&quot;https://github.com/dokku/dokku-postgres&quot;&gt;Postgres&lt;/a&gt; and &lt;a href=&quot;https://github.com/dokku/dokku-redis&quot;&gt;Redis&lt;/a&gt; plugins,
don’t you?&lt;/p&gt;

&lt;h3 id=&quot;it-will-not-take-long-now&quot;&gt;It will not take long now!&lt;/h3&gt;

&lt;p&gt;The problem still remains though: how do I manage to share files/directory
across services? That’s simple… use &lt;em&gt;persistent&lt;/em&gt; &lt;code&gt;storage&lt;/code&gt;! They are
directories created in the &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; node that will be &lt;em&gt;mounted&lt;/em&gt; in your
services, let’s see how to do this.&lt;/p&gt;

&lt;p&gt;First, we need a place where our shared directory will live. It MUST be
accessible with full permissions by user &lt;code&gt;dokku&lt;/code&gt;, so we will stick with the
best practice (as of October 2016, at least) of using
&lt;code&gt;/var/lib/dokku/data/storage&lt;/code&gt; and we will ask &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; to use sub-directory
&lt;code&gt;sample-mojo&lt;/code&gt; inside it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dokku storage:mount sample-mojo \
     /var/lib/dokku/data/storage/sample-mojo:/app/shared&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The command above tells us that the &lt;em&gt;host&lt;/em&gt; directory &lt;code&gt;/var/lib/.../sample-mojo&lt;/code&gt;
will be mapped to directory &lt;code&gt;/app/shared&lt;/code&gt; inside the containers (all of them)
where the application will run.&lt;/p&gt;

&lt;p&gt;As of version &lt;code&gt;0.7.2&lt;/code&gt;, you don’t need to create the shared directory
beforehand: &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; will take care to create one for you. The directory
will be created only when the first container will need it.&lt;/p&gt;

&lt;p&gt;Now we just have to tell our application where to put/look for the shared
database, which is a single-line change:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git diff
diff --git a/app.pl b/app.pl
index 70b7418..25183d8 100755
--- a/app.pl
+++ b/app.pl @@ -1,7 +1,7 @@ #!/usr/bin/env perl use Mojolicious::Lite;
 
-plugin Minion =&amp;gt; {SQLite =&amp;gt; &amp;#39;sqlite:test.db&amp;#39;};
+plugin Minion =&amp;gt; {SQLite =&amp;gt; &amp;#39;sqlite:/app/shared/test.db&amp;#39;};
 
 # Slow task
 app-&amp;gt;minion-&amp;gt;add_task(poke_mojo =&amp;gt; sub {

$ git commit -am &amp;#39;Change position of Minion database&amp;#39;
[master 8a139bc] Change position of Minion database
 1 file changed, 1 insertion(+), 1 deletion(-)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let’s push and try again:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git push
#... wait for it...

$ curl http://sample-mojo.example.com/
We will poke mojolicious.org for you soon.

# now we wait a few seconds to give the worker process the time get hold of the
# new task. The number of seconds might be reduced but let&amp;#39;s play safely
$ sleep 5

$ dokku logs sample-mojo
2016-10-08T21:53:17.079481775Z app[minion.1]: [Sat Oct  8 21:53:17 2016] [debug] Worker 7 started
2016-10-08T21:53:17.106477103Z app[minion.1]: [Sat Oct  8 21:53:17 2016] [debug] Checking worker registry and job queue
2016-10-08T21:54:42.166105068Z app[minion.1]: [Sat Oct  8 21:54:42 2016] [debug] Performing job &amp;quot;1&amp;quot; with task &amp;quot;poke_mojo&amp;quot; in process 143
2016-10-08T21:54:42.245450605Z app[minion.1]: [Sat Oct  8 21:54:42 2016] [debug] We have poked mojolicious.org for a visitor
2016-10-08T21:53:05.831553141Z app[web.1]: [Sat Oct  8 21:53:05 2016] [info] Listening at &amp;quot;http://*:5000&amp;quot;
2016-10-08T21:54:41.207238916Z app[web.1]: [Sat Oct  8 21:54:41 2016] [debug] GET &amp;quot;/&amp;quot;
2016-10-08T21:54:41.210001387Z app[web.1]: [Sat Oct  8 21:54:41 2016] [debug] Routing to a callback
2016-10-08T21:54:41.221802741Z app[web.1]: [Sat Oct  8 21:54:41 2016] [debug] 200 OK (0.013645s, 73.287/s)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It works! As you can see, there are two logs line from the &lt;code&gt;minion.1&lt;/code&gt; app component that say:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[...] [debug] Performing job &amp;quot;1&amp;quot; with task &amp;quot;poke_mojo&amp;quot; in process 143
[...] [debug] We have poked mojolicious.org for a visitor&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which tell us that the &lt;code&gt;minion&lt;/code&gt; received the task and executed it.&lt;/p&gt;

&lt;p&gt;It’s instructive at this point to take a look at the directory that was
created as &lt;code&gt;/var/lib/dokku/data/storage/sample-mojo&lt;/code&gt;; we will need to
impersonate &lt;code&gt;root&lt;/code&gt; on the &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; node this time:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ssh &amp;quot;root@$DOKKU_IP&amp;quot; ls -l /var/lib/dokku/data/storage
total 8
drwxr-xr-x 2 32767 32767 4096 Oct  8 21:53 sample-mojo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What’s this thing with user and group ids &lt;code&gt;32767&lt;/code&gt;? Simple: when &lt;a href=&quot;http://docker.io/&quot;&gt;Docker&lt;/a&gt;
is instructed to run containers by &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt;, it is told to start them as
these user and group id. They are &lt;em&gt;different enough&lt;/em&gt; from what you have in
the machine (the highest user id is &lt;code&gt;dokku&lt;/code&gt;’s at &lt;code&gt;1000&lt;/code&gt;, the highest group
id is still &lt;code&gt;dokku&lt;/code&gt;’s at &lt;code&gt;1000&lt;/code&gt; except for a few service group ids that
are at &lt;code&gt;65534&lt;/code&gt;, so still very &lt;em&gt;distant&lt;/em&gt; from &lt;code&gt;32767&lt;/code&gt;) so that you can be
reasonably sure there will be no clash or overlapping &lt;em&gt;by chance&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;backing-services&quot;&gt;Backing Services&lt;/h2&gt;

&lt;p&gt;As we saw in a previous &lt;a href=&quot;#then-we-think-were-ready-but&quot;&gt;section&lt;/a&gt;, each
service instance runs inside its own container and is quite isolated from the
other ones, even though they actually run on the same node. That’s what makes
&lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; powerful: it allows you to run multiple services, which might each
have their own quirk about filesystem, configurations, running processes,
library versions and so on, but still guarantee that they will play nicely in
the same host.&lt;/p&gt;

&lt;p&gt;One of the consequences is that you have to take explicit actions to have
them share files/directories: in our case, we wanted the &lt;code&gt;web&lt;/code&gt; and
&lt;code&gt;minion&lt;/code&gt; services to share a common directory where they would be able to
operate on the same &lt;code&gt;SQLite&lt;/code&gt; file. We were lucky that there is the storage
management to help us with this.&lt;/p&gt;

&lt;p&gt;What if we want to connect services &lt;em&gt;differently&lt;/em&gt;? For example, we might
need to use a different database technology, and choose &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;
instead. &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; and &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; can get you covered for a lot of
technologies, and lucky for us there’s the &lt;a href=&quot;https://github.com/dokku/dokku-postgres&quot;&gt;Postgres&lt;/a&gt; plugin that will
help us right out of the box.&lt;/p&gt;

&lt;p&gt;The initial &lt;a href=&quot;http://dokku.viewdocs.io/dokku/deployment/application-deployment/&quot;&gt;Dokku tutorial&lt;/a&gt; help us here, so we will just take the
relevant command without too many comments. First, we take care to see
whether the plugin is really installed or not:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dokku help
Usage: dokku [--quiet|...

Primary help options, ...

Commands:

    apps             L...
    certs            M...
    ...

Community plugin commands:

    letsencrypt &amp;lt;app&amp;gt; ...
    ...
    postgres          ...
    redis             ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Fine, we do have plugins for &lt;a href=&quot;https://github.com/dokku/dokku-letsencrypt&quot;&gt;Let’s Encrypt&lt;/a&gt;,
&lt;a href=&quot;https://github.com/dokku/dokku-redis&quot;&gt;Redis&lt;/a&gt; and &lt;a href=&quot;https://github.com/dokku/dokku-postgres&quot;&gt;Postgres&lt;/a&gt;, listed in the &lt;code&gt;Community plugin commands&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;These services provided out of the box are called &lt;em&gt;backing services&lt;/em&gt;;
there are quite a number of them (e.g. &lt;a href=&quot;http://dokku.viewdocs.io/dokku/community/plugins/#official-plugins-beta&quot;&gt;see the official ones&lt;/a&gt;) and they should get you covered in most situations.&lt;/p&gt;

&lt;p&gt;Let’s define one backing service for our application then, by first
creating it and then linking to our application:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dokku postgres:create sample-mojo-pg
       Waiting for container to be ready
       Creating container database
       Securing connection to database
=====&amp;gt; Postgres container created: sample-mojo-db
=====&amp;gt; Container Information
       Config dir:          /var/lib/dokku/services/postgres/sample-mojo-db/config
       Data dir:            /var/lib/dokku/services/postgres/sample-mojo-db/data
       Dsn:                 postgres://postgres:1b8c1fb63db2cbee3c407c8fd815152a@dokku-po...
       Exposed ports:       -                        
       Id:                  ecaf7be1f12cc146da63c2da1b4f9c737e26ccce6f3aef27d7af302feb1d674d
       Internal ip:         172.17.0.5               
       Links:               -                        
       Service root:        /var/lib/dokku/services/postgres/sample-mojo-db
       Status:              running
       Version:             postgres:9.5.4

$ dokku postgres:link sample-mojo-pg sample-mojo
-----&amp;gt; Setting config vars
       DATABASE_URL: postgres://postgres:1b8c1fb63db2cbee3c407c8fd815152a@dokku-postgres-...
-----&amp;gt; Restarting app sample-mojo
... other lines about application restart..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As we can see, the plugin took care to set the environment variable
&lt;code&gt;DATABASE_URL&lt;/code&gt; in our application to the right value for consumption by
the application itself. We can now use it in our code then, so the
&lt;code&gt;app.pl&lt;/code&gt; file is modified as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Mojolicious::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dsn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATABASE_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;sqlite:/app/shared/test.db&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dsn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;m{^postgres:}mxs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Pg&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;SQLite&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Minion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Slow task&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;poke_mojo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$job&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;$job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ua&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mojolicious.org&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;$job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;We have poked mojolicious.org for a visitor&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Perform job in a background worker process&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;poke_mojo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;We will poke mojolicious.org for you soon.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will make sure that we can continue to use &lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt; locally and
&lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt; remotely (even though you should strive to have perfect
alignment across all your deployment environments!).&lt;/p&gt;

&lt;p&gt;We just have to make sure that our Perl application will be able to use
&lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt; now, so the &lt;code&gt;cpanfile&lt;/code&gt; becomes as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Mojolicious&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;7.08&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Minion&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;6.0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Minion::Backend::SQLite&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;0.007&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Mojo::Pg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;2.30&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Commit, then push:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git commit -am &amp;#39;Add support for PostgreSQL backing service&amp;#39;
[master 4ad17b9] Add support for PostgreSQL backing service
 2 files changed, 4 insertions(+), 1 deletion(-)

$ git push
Counting objects: 7, done.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 578 bytes, done.
Total 4 (delta 2), reused 0 (delta 0)
-----&amp;gt; Cleaning up...
-----&amp;gt; Building sample-mojo from herokuish...
-----&amp;gt; Adding BUILD_ENV to build environment...
-----&amp;gt; Multipack app detected
=====&amp;gt; Downloading Buildpack: https://github.com/polettix/heroku-buildpack-perl-procfile.git
=====&amp;gt; Detected Framework: Perl/Procfile
-----&amp;gt; Installing dependencies
       Successfully installed DBD-Pg-3.5.3
       Successfully installed Mojo-Pg-2.30
       2 distributions installed
... all good up to now...
remote: App container failed to start!!
=====&amp;gt; sample-mojo web container output:
       Invalid PostgreSQL connection string &amp;quot;postgres://postgres:1b8c1fb63db2...
... last message repeated a few times...
 ! [remote rejected] master -&amp;gt; master (pre-receive hook declined) error:
 failed to push some refs to ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ouch! Well, I think &lt;a href=&quot;http://blog.plover.com/&quot;&gt;Mark Jason Dominus&lt;/a&gt; got it right at this point:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://perl.plover.com/pics/jc8.gif&quot; alt=&quot;You can&#39;t just make...&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Simply put, the &lt;code&gt;DATABASE_URL&lt;/code&gt; environment variable will need some
adaptation before we can use it, right? This error at least told us one
thing though: the application we are trying to deploy is &lt;em&gt;actually&lt;/em&gt;
attempting to use the &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt; database backing service after all!&lt;/p&gt;

&lt;p&gt;It turns out that we just have to force the URL scheme to &lt;code&gt;postgresql&lt;/code&gt;
(with the final &lt;code&gt;ql&lt;/code&gt; part):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Mojolicious::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dsn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATABASE_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;sqlite:/app/shared/test.db&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$dsn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;s{^postgres.*?:}{postgresql:}mxs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dsn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;m{^postgresql:}mxs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Pg&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;SQLite&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Minion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Slow task&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;poke_mojo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$job&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;$job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ua&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mojolicious.org&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;$job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;We have poked mojolicious.org for a visitor&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Perform job in a background worker process&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;poke_mojo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;We will poke mojolicious.org for you soon.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;As of release &lt;code&gt;2.31&lt;/code&gt; of &lt;a href=&quot;https://metacpan.org/pod/Mojo::Pg&quot;&gt;Mojo::Pg&lt;/a&gt; this should not be necessary any more,
although it’s still not out as of &lt;code&gt;2016-10-16&lt;/code&gt;. See &lt;a href=&quot;#updates&quot;&gt;Updates&lt;/a&gt;
for details.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, commit, push and check:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git commit -am &amp;#39;Adapt DATABASE_URL to Mojo::Pg URL scheme&amp;#39;
[master c7f2d50] Adapt DATABASE_URL to Mojo::Pg URL scheme
 1 file changed, 2 insertions(+), 1 deletion(-)

poletti@Polebian2:sm (master)$ git push
...
=====&amp;gt; Application deployed:
       http://sample-mojo.example.com
...

# deployment was fine, let&amp;#39;s send a GET
$ curl http://sample-mojo.example.com
We will poke mojolicious.org for you soon.

# take some time
$ sleep 5

# check logs
$ dokku logs sample-mojo
... app[minion.1]:... Worker 8 started
... app[minion.1]:... Checking worker registry and job queue
... app[minion.1]:... Performing job &amp;quot;1&amp;quot; with task &amp;quot;poke_mojo&amp;quot; in process 145
... app[minion.1]:... We have poked mojolicious.org for a visitor
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The fact that it’s performing job &lt;code&gt;1&lt;/code&gt; again is another hint that it is
actually using &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;, because the jobs numbering was restarted.
Anyway, we don’t need the persistent storage any more at this time, so we
can double check by just removing it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dokku storage:list sample-mojo
sample-mojo volume bind-mounts:
     /var/lib/dokku/data/storage/sample-mojo:/app/shared

$ dokku storage:unmount sample-mojo /var/lib/dokku/data/storage/sample-mojo:/app/shared

$ dokku storage:list sample-mojo
sample-mojo volume bind-mounts:

$ dokku ps:restart sample-mojo
... usual stuff here...

$ curl http://sample-mojo.example.com
We will poke mojolicious.org for you soon.

# take some time
$ sleep 5

# check logs
$ dokku logs sample-mojo
... app[minion.1]:... Worker 7 started
... app[minion.1]:... Checking worker registry and job queue
... app[minion.1]:... Performing job &amp;quot;2&amp;quot; with task &amp;quot;poke_mojo&amp;quot; in process 145
... app[minion.1]:... We have poked mojolicious.org for a visitor
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;YAY, it’s still working indeed!&lt;/p&gt;

&lt;h2 id=&quot;encryption-anyone&quot;&gt;Encryption Anyone?&lt;/h2&gt;

&lt;p&gt;Up to this point, all our traffic has been left into the wilderness of
plain text. If you think that encrypting communications can be a good
thing, though, you probably already started wondering how to add TLS to
the lot.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; provides you means for managing certificates via the &lt;code&gt;certs&lt;/code&gt;
group of commands:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dokku certs:help
Usage: dokku certs:COMMAND

Manage Dokku apps SSL (TLS) certs.

Additional commands:
    certs:add &amp;lt;app&amp;gt; CRT KEY             Add an ssl endpoint to an app. Can also import from a tarball on stdin
    certs:chain CRT [CRT ...]           [NOT IMPLEMENTED] Print the ordered and complete chain for the given certificate
    certs:generate &amp;lt;app&amp;gt; DOMAIN         Generate a key and certificate signing request (and self-signed certificate)
    certs:info &amp;lt;app&amp;gt;                    Show certificate information for an ssl endpoint
    certs:key &amp;lt;app&amp;gt; CRT KEY [KEY ...]   [NOT IMPLEMENTED] Print the correct key for the given certificate
    certs                               Manage Dokku apps SSL (TLS) certs
    certs:remove &amp;lt;app&amp;gt;                  Remove an SSL Endpoint from an app
    certs:rollback &amp;lt;app&amp;gt;                [NOT IMPLEMENTED] Rollback an SSL Endpoint for an app
    certs:update &amp;lt;app&amp;gt; CRT KEY          Update an SSL Endpoint on an app. Can also import from a tarball on stdin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is definitely the way to go if you are using a domain where you can’t
define a wildcard resolution or it’s not immediately below a &lt;a href=&quot;https://publicsuffix.org/&quot;&gt;public
suffix&lt;/a&gt;, or more simply you want to use your homebrewn self-signed
certificates (which is perfectly secure if you have full control on all
clients, of course!).&lt;/p&gt;

&lt;p&gt;If you instead:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;have control over your domain DNS configurations&lt;/li&gt;
  &lt;li&gt;the domain is immediately below a &lt;a href=&quot;https://publicsuffix.org/&quot;&gt;public suffix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;then you can enjoy the services of the &lt;a href=&quot;https://github.com/dokku/dokku-letsencrypt&quot;&gt;Let’s Encrypt plugin&lt;/a&gt;. Let’s see how.&lt;/p&gt;

&lt;p&gt;The only real setup you have to do is define an email address; this is
used by &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt; to notify you about certificates that are about
to expire (this will be our safenet, because we can setup the plugin to
renew the certificates automatically). Then you just have to activate the
plugin.&lt;/p&gt;

&lt;p&gt;If you’re lazy like me, you can set the email address up as a global
variable, so that every project will use the same. You can still override
this on a per-project basis, anyway.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dokku config:set --global DOKKU_LETSENCRYPT_EMAIL=you@example.com
-----&amp;gt; Setting config vars
       DOKKU_LETSENCRYPT_EMAIL: you@example.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, you just have to activate the plugin for your app:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dokku letsencrypt sample-mojo
=====&amp;gt; Let&amp;#39;s Encrypt sample-mojo
-----&amp;gt; Updating letsencrypt docker image...
latest: Pulling from dokkupaas/letsencrypt-simp_le
420890c9e918: Already exists
e4a2ae244258: Already exists
5c6ac6d1c950: Already exists
Digest: sha256:18a19b34beceba79dd5be458abe7e132fc7486da1da19cc4d0395ad4578031ef
Status: Image is up to date for dokkupaas/letsencrypt-simp_le:latest
       done updating
-----&amp;gt; Enabling ACME proxy for sample-mojo...
-----&amp;gt; Getting letsencrypt certificate for sample-mojo...
        - Domain &amp;#39;sample-mojo.example.com&amp;#39;
darkhttpd/1.11, copyright (c) 2003-2015 Emil Mikulic.
listening on: http://0.0.0.0:80/
2016-10-09 07:05:42,620:INFO:__main__:1211: Generating new account key
2016-10-09 07:05:44,514:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
2016-10-09 07:05:44,762:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
2016-10-09 07:05:45,019:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
2016-10-09 07:05:46,032:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): letsencrypt.org
2016-10-09 07:05:46,762:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
2016-10-09 07:05:47,015:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
2016-10-09 07:05:47,283:INFO:requests.packages.urllib3.connectionpool:207: Starting new HTTP connection (1): sample-mojo.example.com
2016-10-09 07:05:47,359:INFO:__main__:1305: sample-mojo.example.com was successfully self-verified
2016-10-09 07:05:47,381:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
2016-10-09 07:05:47,749:INFO:__main__:1313: Generating new certificate private key
2016-10-09 07:05:48,211:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
2016-10-09 07:05:52,438:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
2016-10-09 07:05:52,693:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
2016-10-09 07:05:53,007:INFO:requests.packages.urllib3.connectionpool:758: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org
2016-10-09 07:05:53,260:INFO:__main__:391: Saving account_key.json
2016-10-09 07:05:53,261:INFO:__main__:391: Saving fullchain.pem
2016-10-09 07:05:53,262:INFO:__main__:391: Saving chain.pem
2016-10-09 07:05:53,262:INFO:__main__:391: Saving cert.pem
2016-10-09 07:05:53,263:INFO:__main__:391: Saving key.pem
-----&amp;gt; Certificate retrieved successfully.
-----&amp;gt; Installing let&amp;#39;s encrypt certificates
-----&amp;gt; Unsetting sample-mojo
-----&amp;gt; Unsetting DOKKU_NGINX_PORT
-----&amp;gt; Setting config vars
       DOKKU_PROXY_PORT_MAP: http:80:5000
-----&amp;gt; Setting config vars
       DOKKU_PROXY_PORT_MAP: http:80:5000 https:443:5000
-----&amp;gt; Setting config vars
       DOKKU_NGINX_PORT: 80
-----&amp;gt; Setting config vars
       DOKKU_NGINX_SSL_PORT: 443
-----&amp;gt; Configuring sample-mojo.example.com...(using built-in template)
-----&amp;gt; Creating https nginx.conf
-----&amp;gt; Running nginx-pre-reload
       Reloading nginx
-----&amp;gt; Configuring sample-mojo.example.com...(using built-in template)
-----&amp;gt; Creating https nginx.conf
-----&amp;gt; Running nginx-pre-reload
       Reloading nginx
-----&amp;gt; Disabling ACME proxy for sample-mojo...
       done&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, after a bunch of back and forth with &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt;, the plugin
took care to reconfigure the reverse proxy to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;redirect all traffic from port &lt;code&gt;80&lt;/code&gt; to port &lt;code&gt;443&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;accept traffic on port &lt;code&gt;443&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s see the redirection part:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ curl -v http://sample-mojo.example.com/
* About to connect() to sample-mojo.example.com port 80 (#0)
...
&amp;gt; GET / HTTP/1.1
&amp;gt; User-Agent: curl/7.26.0
&amp;gt; Host: sample-mojo.example.com
&amp;gt; Accept: */*
&amp;gt; 
...
&amp;lt; HTTP/1.1 301 Moved Permanently
&amp;lt; Server: nginx
&amp;lt; Date: Sun, 09 Oct 2016 07:09:55 GMT
&amp;lt; Content-Type: text/html
&amp;lt; Content-Length: 178
&amp;lt; Connection: keep-alive
&amp;lt; Location: https://sample-mojo.example.com:443/
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let’s follow the redirection now, note that &lt;code&gt;curl&lt;/code&gt; does not complain at
all about the certificate:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ curl -L http://sample-mojo.example.com/
We will poke mojolicious.org for you soon.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Last thing we want to do is to set up automatic renewal of the
certificates for all applications, because they expire every &lt;code&gt;90&lt;/code&gt; days
(this short time is to encourage automation):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dokku letsencrypt:cron-job --add
-----&amp;gt; Added cron job to dokku&amp;#39;s crontab.
no crontab for dokku&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Done! Don’t worry about the last line, it appears if our &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt;
instance is brand new and no previous &lt;code&gt;crontab&lt;/code&gt; setting was present for
user &lt;code&gt;dokku&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;summing-up&quot;&gt;Summing Up&lt;/h2&gt;

&lt;p&gt;After this (admittedly) long journey, we got to this point:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;we have a &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt; node where we can easily deploy our applications - the
Perler, the better in my opinion, but you’re not necessarily limited to it;&lt;/li&gt;
  &lt;li&gt;we know how to share a directory across different components of an
application&lt;/li&gt;
  &lt;li&gt;we know how to connect to backing services, like a &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt; database
for example&lt;/li&gt;
  &lt;li&gt;we secured our application web frontend communications via TLS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is probably something that should get you more than started! For going
beyond, you should definitely check the excellent documentation in &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt;’s
website.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;

&lt;h2 id=&quot;updates&quot;&gt;Updates&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;2016-10-09&lt;/code&gt; a change for supporting the &lt;code&gt;postgres://&lt;/code&gt; url scheme in
addition to &lt;code&gt;postgresql://&lt;/code&gt; is on its way (see &lt;a href=&quot;https://github.com/kraih/mojo-pg/commit/4414d784b7e22a4b4eca7657e91a6eec25ce923c&quot;&gt;this
commit&lt;/a&gt;). This makes using environment variable
&lt;code&gt;DATABASE_URL&lt;/code&gt; a breeze (see &lt;a href=&quot;#backing-services&quot;&gt;Backing Services&lt;/a&gt;) as
it will be immediately consumable by &lt;a href=&quot;https://metacpan.org/pod/Mojo::Pg&quot;&gt;Mojo::Pg&lt;/a&gt; and the
associated &lt;a href=&quot;https://metacpan.org/pod/Minion&quot;&gt;Minion&lt;/a&gt; backend, YAY! (We will have to wait for the new release
of &lt;a href=&quot;https://metacpan.org/pod/Mojo::Pg&quot;&gt;Mojo::Pg&lt;/a&gt; though!).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;2016-10-16&lt;/code&gt; most of the stuff in this article has been compressed in a
cheatsheet available in this &lt;a href=&quot;https://gitlab.com/polettix/dokku-notes/wikis/Cheatsheet&quot;&gt;wiki&lt;/a&gt;. Nice thing about &lt;a href=&quot;https://gitlab.com/&quot;&gt;GitLab&lt;/a&gt; is that
it’s possible to also whip up a few &lt;a href=&quot;https://gitlab.com/polettix/dokku-notes/snippets&quot;&gt;snippets&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;2016-10-16&lt;/code&gt; added a &lt;a href=&quot;#table-of-contents&quot;&gt;Table of Contents&lt;/a&gt; for better
navigation of the document.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;2016-12-23&lt;/code&gt; added note on Debian 8 in &lt;a href=&quot;https://www.vultr.com/&quot;&gt;Vultr&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


    &lt;p&gt;&lt;a href=&quot;/dokku-your-tiny-paas/&quot;&gt;Dokku - Your Tiny PaaS&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on October 09, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Setup a Taskwarrior server]]></title>
  <link rel="alternate" type="text/html" href="/setup-a-taskwarrior-server/" />
  <id>/setup-a-taskwarrior-server</id>
  <published>2016-10-03T00:00:00+02:00</published>
  <updated>2016-10-03T00:00:00+02:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;Do you use &lt;a href=&quot;https://taskwarrior.org/&quot;&gt;Taskwarrior&lt;/a&gt; and want to setup a private remote server for
backing stuff up and sync across multiple devices? Here’s a few notes
you might find interesting.&lt;/p&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#table-of-contents&quot; id=&quot;markdown-toc-table-of-contents&quot;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-will-we-talk-about&quot; id=&quot;markdown-toc-what-will-we-talk-about&quot;&gt;What will we talk about?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#securing-the-communications&quot; id=&quot;markdown-toc-securing-the-communications&quot;&gt;Securing The Communications&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#keys&quot; id=&quot;markdown-toc-keys&quot;&gt;Keys&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#certificates&quot; id=&quot;markdown-toc-certificates&quot;&gt;Certificates&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#certification-authorities&quot; id=&quot;markdown-toc-certification-authorities&quot;&gt;Certification Authorities&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#a-chain-of-cas&quot; id=&quot;markdown-toc-a-chain-of-cas&quot;&gt;A chain of CAs&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#which-ca-for-taskwarrior&quot; id=&quot;markdown-toc-which-ca-for-taskwarrior&quot;&gt;Which CA for Taskwarrior?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#what-about-clients&quot; id=&quot;markdown-toc-what-about-clients&quot;&gt;What about clients?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#expiration-and-certificate-revocation-list&quot; id=&quot;markdown-toc-expiration-and-certificate-revocation-list&quot;&gt;Expiration and Certificate Revocation List&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#summary&quot; id=&quot;markdown-toc-summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup-remote-sync&quot; id=&quot;markdown-toc-setup-remote-sync&quot;&gt;Setup Remote Sync&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#user-accounts&quot; id=&quot;markdown-toc-user-accounts&quot;&gt;User accounts&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#alternative-1-diy&quot; id=&quot;markdown-toc-alternative-1-diy&quot;&gt;Alternative 1: DIY&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#server-configuration&quot; id=&quot;markdown-toc-server-configuration&quot;&gt;Server configuration&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#client-configuration&quot; id=&quot;markdown-toc-client-configuration&quot;&gt;Client configuration&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#alternative-2-real-certificate&quot; id=&quot;markdown-toc-alternative-2-real-certificate&quot;&gt;Alternative 2: &lt;em&gt;Real&lt;/em&gt; certificate&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#server-configuration-1&quot; id=&quot;markdown-toc-server-configuration-1&quot;&gt;Server configuration&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#client-configuration-1&quot; id=&quot;markdown-toc-client-configuration-1&quot;&gt;Client configuration&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#quick-consideration-on-clients-authentication&quot; id=&quot;markdown-toc-quick-consideration-on-clients-authentication&quot;&gt;Quick consideration on clients authentication&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summing-up&quot; id=&quot;markdown-toc-summing-up&quot;&gt;Summing Up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-will-we-talk-about&quot;&gt;What will we talk about?&lt;/h2&gt;

&lt;p&gt;First of all, the &lt;a href=&quot;https://taskwarrior.org/&quot;&gt;Taskwarrior&lt;/a&gt; site has comprehensive instructions on
&lt;a href=&quot;https://taskwarrior.org/docs/taskserver/setup.html&quot;&gt;how to setup your own sync server&lt;/a&gt;. Take it as a good
starting point, it will actually work quite well if you are doing all on
your own.&lt;/p&gt;

&lt;p&gt;In the following sections, we will begin with a brief introduction to
the concepts related to setting up the security part of the Taskserver.
This is by far the most tricky part of the setup, and the one more
likely to make you angry.&lt;/p&gt;

&lt;p&gt;If you’re in a hurry, you can skip the following section about securing
the communications, and jump directly to the configuration parts. Enjoy!&lt;/p&gt;

&lt;h2 id=&quot;securing-the-communications&quot;&gt;Securing The Communications&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://taskwarrior.org/&quot;&gt;Taskwarrior&lt;/a&gt; allows you to setup encrypted communications between
client and server, and rightly so. This is done using a protocol called
&lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot;&gt;Transport Layer Security&lt;/a&gt; (or TLS), which requires you to use
&lt;em&gt;keys&lt;/em&gt;, &lt;em&gt;certificates&lt;/em&gt;, &lt;em&gt;certification authorities&lt;/em&gt; and &lt;em&gt;certificate
revocation lists&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Sounds complicated? It is! We will not get into the details but just
look at the core concepts that matter in configuring Taskwarrior (see
&lt;a href=&quot;https://en.wikipedia.org/wiki/Information_security&quot;&gt;Information security&lt;/a&gt; for additional resources).&lt;/p&gt;

&lt;p&gt;When you care about security in syncing your local changes to a remote
server, the immediate issue you are probably worried with is
&lt;em&gt;confidentiality&lt;/em&gt;, i.e.: how do I make sure that nobody else is able to
understand what me and the server are saying?&lt;/p&gt;

&lt;p&gt;Another aspect you should care about is whether the system you’re
syncing with is actually what it claims to be, and not something set up
to appear so. If you have confidentiality, but you’re telling your
secrets to the wrong system… that’s not very secure, is it? This works
also the other way around, of course: they system accepting sync
requests has to be sure that you are who you claim to be, otherwise
others might impersonate you and mess with your data.&lt;/p&gt;

&lt;p&gt;For both aspects (there are more, of course) maths come to the rescue.
In particular, &lt;em&gt;encryption&lt;/em&gt; can give you confidentiality, while &lt;em&gt;digital
signatures&lt;/em&gt; can give you reasonable proof of someone’s identity.&lt;/p&gt;

&lt;h3 id=&quot;keys&quot;&gt;Keys&lt;/h3&gt;

&lt;p&gt;At the core of both are techniques that go under the umbrella of
asymmetric cryptography. Asymmetric means that for security reasons each
subject has two keys, one called &lt;em&gt;private&lt;/em&gt; that has to be kept secret at
all times, and one &lt;em&gt;public&lt;/em&gt; that can be distributed freely. They act as
keys where one can open whatever the other is capable of closing, so
they always come as a &lt;em&gt;key pair&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For example, if you want to send a message (think of it like “closing
the message in a box”) you use the recipient’s public key to do that,
and be sure that only the recipient will be able to read it using the
private key. This is encryption.&lt;/p&gt;

&lt;p&gt;On the other hand, if you want proof that the peer has the private key
corresponding to the public key you already have, you tell them to lock
a message you invent on the spot inside a box, and use their public key
to open the box: it will work only if the two keys form a &lt;em&gt;pair&lt;/em&gt;. This
is signing, or putting a &lt;em&gt;signature&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;certificates&quot;&gt;Certificates&lt;/h3&gt;

&lt;p&gt;At this point you might be thinking that this whole construction works
only as long as you actually &lt;em&gt;trust&lt;/em&gt; that the public key you have
actually comes from the right source. The best way to ensure this is to
get this public key in some way that you trust, like e.g. meet the
person and get the key from a USB pen, or ask them to spell it on the
phone. Whatever makes you feel good for your level of secrecy.&lt;/p&gt;

&lt;p&gt;While theoretically correct, this method has the non-trivial flaw of
being completely impractical for today’s Internet size. This would mean
going to your bank and taking the key, going to Google’s and take their
key, then Facebook, Twitter, and whatever service you use that leverages
TLS. This is where &lt;em&gt;certificates&lt;/em&gt; come into play.&lt;/p&gt;

&lt;p&gt;A certificate is basically a public key with some information attached,
in particular with the identity of the owner of that public key, in the
form of a &lt;em&gt;Common Name&lt;/em&gt; (abbreviated CN), which is basically a domain
name owned by the organization (like &lt;code&gt;www.example.com&lt;/code&gt;). It’s like you
had a key and put a label on it saying that this key is owned by the
same people that run &lt;code&gt;www.example.com&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;certification-authorities&quot;&gt;Certification Authorities&lt;/h3&gt;

&lt;p&gt;Of course everybody would be able to put a label about &lt;code&gt;www.example.com&lt;/code&gt;
on &lt;em&gt;their own&lt;/em&gt; public key, so we’re the catch? In addition to containing
a public key and a CN, a certificate also contains a &lt;em&gt;signature&lt;/em&gt; by
a third party called the &lt;em&gt;Certification Authority&lt;/em&gt; (abbreviated CA). So
the certificate says: this public key is owned by the people that also
own this CN, and this is guaranteed by the CA. At this point, of course,
you must have the CA certificate to verify that their signature is valid
(because the CA certificate will contain their public key and their
identity!).&lt;/p&gt;

&lt;p&gt;This shifts your trust from the people that run the CN to the people
that run the CA. While it may seem that this didn’t improve things too
much (you still have to figure out how to trust the CA people!), this
actually makes things easier for you, because the same CA can emit
certificates for a lot of CNs. Hence, instead of going to everyone’s and
get their public key, you just go to the CA and get theirs: this will
make sure that all the certificate they signed actually come from the
CNs written in the certificates.&lt;/p&gt;

&lt;h4 id=&quot;a-chain-of-cas&quot;&gt;A chain of CAs&lt;/h4&gt;

&lt;p&gt;This same process might apply to CAs too. A little CA might ask a bigger
one to sign its certificate to declare that they are entitled to sign
certificates, and so on. Hence, when some web site sends you their
certificate, they might also send you a &lt;em&gt;chain of intermediate CA
certificates&lt;/em&gt; where each certificate is about the CA that signed the
certificate immediately before, up to the last that is signed by some
well-known CA.&lt;/p&gt;

&lt;p&gt;At this point you might ask: “Hey! I didn’t ever go to any &lt;em&gt;well known&lt;/em&gt;
CA to get this &lt;em&gt;rule-them-all&lt;/em&gt; CA certificate!”. Right, you didn’t. But
most browsers come with a bunch of pre-recorded certificates of well
known CAs, so here’s how you got them behind the scenes. Now you should
ask yourself if you really trust your browser, shouldn’t you?&lt;/p&gt;

&lt;p&gt;There are quite some CAs out there, from the most famous like
&lt;a href=&quot;https://en.wikipedia.org/wiki/Comodo_Group&quot;&gt;Comodo&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Symantec&quot;&gt;Symantec&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/GoDaddy&quot;&gt;GoDaddy&lt;/a&gt;, to minor ones. The most famous
are those whose certificates get installed in browsers and TLS libraries
by default. They have a non-trivial work to do, because they have to
keep their private keys very private (if someone stole them, they could
be used to issue false certificates!) and they also have to make sure
that people asking a certificate for a CN actually &lt;em&gt;own&lt;/em&gt; that CN (i.e.
they have &lt;em&gt;to go there&lt;/em&gt; instead of you). This is why certificates
usually come with a cost, which varies depending on the level of trust
that they provide (bank’s certificates undergo a much deeper scrutiny
with respect to some casual user’s home page), and this is also why
browsers can show a simple lock for lesser certificates up to a full
green indication for the most trusted ones.&lt;/p&gt;

&lt;h4 id=&quot;which-ca-for-taskwarrior&quot;&gt;Which CA for Taskwarrior?&lt;/h4&gt;

&lt;p&gt;Back to Taskwarrior, if you don’t want to shell out money for setting up
your own sync server, you have a couple of alternatives:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you can set up your fake CA and sign your own certificates. In
a private context this makes absolutely sense, because you are sure to
trust everyone involved… unless you suffer from multiple
personalities and you are not sure about a couple of them!&lt;/li&gt;
  &lt;li&gt;if you have a real domain hosted somewhere, you can get certificates
for free in a few places, one of which is &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt;. They will
issue you &lt;em&gt;real&lt;/em&gt; certificates, although they are an intermediate CA so
they will also provide their own certificate that is signed by
a bigger well-known company.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which way should you go? In a private or very controlled environment,
you can definitely go with the first option. The instructions you find
in &lt;a href=&quot;https://taskwarrior.org/&quot;&gt;Taskwarrior&lt;/a&gt;’s &lt;a href=&quot;https://taskwarrior.org/docs/taskserver/setup.html&quot;&gt;instructions page&lt;/a&gt; actually assume
that this is they way you are going to take. This will require a bit
more complicated procedure on the client side, because you will have to
take care that the client actually trusts the fake CA you set up (but
you have the certificate for this fake CA, so you’re going to be fine).&lt;/p&gt;

&lt;p&gt;On the other hand, if you plan to give access to a wider audience, your
best chance is probably to go for a certificate issued by a &lt;em&gt;real&lt;/em&gt; CA,
like Let’s Encrypt. Which one you choose depends on which guarantees you
want to have about the CA: the higher you need, the more you will have
to spend on it.&lt;/p&gt;

&lt;h3 id=&quot;what-about-clients&quot;&gt;What about clients?&lt;/h3&gt;

&lt;p&gt;Up to now, we discussed how can your client be sure about the server
(which might be a web server, or a &lt;code&gt;taskd&lt;/code&gt; installed somewhere). For the
web, this is most of the times all that you need.&lt;/p&gt;

&lt;p&gt;In the case of &lt;a href=&quot;https://taskwarrior.org/&quot;&gt;Taskwarrior&lt;/a&gt; this is not all, though. Put yourself
into &lt;code&gt;taskd&lt;/code&gt;’s shoes: should it blindly accept all updates that claim to
come from you as valid? What if someone else tries to sync updated
pretenting to be you, and mess up with your precious activities?&lt;/p&gt;

&lt;p&gt;The same story we saw above with &lt;em&gt;key pairs&lt;/em&gt; and &lt;em&gt;certificates&lt;/em&gt; applies
to clients as well. So, you can generate a pair of key, set the private
one in the client and keep the public one in the server, inside
a certificate that tells who you are.&lt;/p&gt;

&lt;h3 id=&quot;expiration-and-certificate-revocation-list&quot;&gt;Expiration and Certificate Revocation List&lt;/h3&gt;

&lt;p&gt;One last thing to keep in mind is that certificates are usually issued
with an expiration date. The more time passes, the more the public key
can be subject to an attack to try to figure out the associated private
key, for example; or the more you might have leaked your private key.
So, although it’s a hassle to take care of renewing your keys and
certificates, this is actually a safety measure.&lt;/p&gt;

&lt;p&gt;In addition to expiration, you might want to invalidate certificates
ahead of time. This might e.g. happen if you discover that the private
key was leaked somehow. For this reason. so-called &lt;em&gt;Certificate
Revocation Lists&lt;/em&gt; (abbreviated CRL) can help you track certificates that
aren’t trusted anymore, even if they have a valid signature and have not
expired yet.&lt;/p&gt;

&lt;p&gt;The CRL is usually kept by the CA, because it’s the entity that
guarantees about the validity of the certificates it signs.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;After this long digression, we come to the following summary
conclusions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;there are three types of entities involved in this whole TLS story:
    &lt;ul&gt;
      &lt;li&gt;users&lt;/li&gt;
      &lt;li&gt;servers&lt;/li&gt;
      &lt;li&gt;CAs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;there are three basic kind of artifacts that we have to take care of:
    &lt;ul&gt;
      &lt;li&gt;private keys, which we will simply call &lt;em&gt;key&lt;/em&gt;s in the following;&lt;/li&gt;
      &lt;li&gt;(public) &lt;em&gt;certificate&lt;/em&gt;s&lt;/li&gt;
      &lt;li&gt;(public) &lt;em&gt;certificate revocation list&lt;/em&gt;s&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each entity involved (users, servers, CAs) will have the first two kind
of artifact (a key and a certificate), while CAs will also have a CRL.
So, you will have to deal with the following artifacts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;user key&lt;/em&gt; and &lt;em&gt;user certificate&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;server key&lt;/em&gt; and &lt;em&gt;server certificate&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;CA key&lt;/em&gt;, &lt;em&gt;CA certificate&lt;/em&gt; and &lt;em&gt;CA CRL&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It helps to remember that they are all data that is saved into files,
although there might be a many-to-one relation (e.g. a file containing
certificates might contain a server certificate, followed by a chain of
CA certificates up to one signed by a well-known CA).&lt;/p&gt;

&lt;h2 id=&quot;setup-remote-sync&quot;&gt;Setup Remote Sync&lt;/h2&gt;

&lt;p&gt;Before starting, we will assume that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you have some degree of control over a domain. It must not necessarily
be a &lt;em&gt;real&lt;/em&gt; one, i.e. visible from the outside or registered in
official DNSs; it suffices that you can somehow control the resolution
process in clients so that that particular domain points to the IP
Address of the Taskserver you set up. In this example, we will call
this domain &lt;code&gt;taskd.example.com&lt;/code&gt;, although we will also assume that it
is stored in environment variable &lt;code&gt;DOMAIN&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;you will use the port stored in the environment variable &lt;code&gt;PORT&lt;/code&gt;, which
you already ensured that will be available elsewhere (e.g. you opened
the right ports in the firewall, etc.). Just for you to know, it’s
customary to set the port to &lt;code&gt;53589&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;your Taskserver software is already installed and ready to be started,
only missing the right configuration for security. We will assume it
is stored in a directory whose path is stored in environment variable
&lt;code&gt;TWSERVER&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;your Taskwarrior software in the client is already installed and
working. We will assume that its base directory’s path is stored in
environment variable &lt;code&gt;TWCLIENT&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;user-accounts&quot;&gt;User accounts&lt;/h3&gt;

&lt;p&gt;Whatever the way you choose to configure keys, certificates etc. you
will need to enable your user(s) for syncing their tasks, ensuring that
they will not trump onto each other.&lt;/p&gt;

&lt;p&gt;Users can be grouped in &lt;em&gt;organizations&lt;/em&gt;. To create an organization you
can issue the following command &lt;em&gt;on the server&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;taskd add org name-of-your-org&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code&gt;name-of-your-org&lt;/code&gt; can be whatever you choose to call your
organization. Suggestion: use letters, numbers, underscores and hyphens
only. If you plan to keep things simple (all users inside the same
organization) this is the only time you will need to issue this command.&lt;/p&gt;

&lt;p&gt;After this, for each user you want to create you have to run the
following command, still on the server:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;taskd add user name-of-your-org &lt;span class=&quot;s1&quot;&gt;&amp;#39;Name O. User&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will get back something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;New user key: cf31f287-ee9e-43a8-843e-e8bbd5de4294
Created user &amp;#39;Name O. User&amp;#39; for organization &amp;#39;name-of-your-org&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where the key will be different (each user will get its own unique key).&lt;/p&gt;

&lt;p&gt;In the following, we will assume that environment variables
&lt;code&gt;ORGANIZATION&lt;/code&gt;, &lt;code&gt;USER_NAME&lt;/code&gt; and &lt;code&gt;USER_KEY&lt;/code&gt; contain… what you think
that they should contain. In our example, they contain respectively
the strings &lt;code&gt;name-of-your-org&lt;/code&gt;, &lt;code&gt;Name O. User&#39; and
&lt;/code&gt;cf31f287-ee9e-43a8-843e-e8bbd5de4294`.&lt;/p&gt;

&lt;h3 id=&quot;alternative-1-diy&quot;&gt;Alternative 1: DIY&lt;/h3&gt;

&lt;p&gt;If your setup is sufficiently restricted and you have good control over
your clients, you can go the &lt;em&gt;do it yourself&lt;/em&gt; way and be the CA of
yourself. This is also the easiest thing to do with what ships with
&lt;a href=&quot;https://taskwarrior.org/&quot;&gt;Taskwarrior&lt;/a&gt; by default, because there are scripts that allow you to
do exactly this.&lt;/p&gt;

&lt;p&gt;All the heavy lifting is done within a directory named &lt;code&gt;pki&lt;/code&gt;. Depending
on the distribution/system you use, it might be located in a different
location; we will let you find it and wait patiently here. Just for
a hint, this is what you should find in that directory (this example was
run in Alpine Linux):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/ $ cd /usr/share/taskd/pki/
/usr/share/taskd/pki $ ls -l
total 28
-rw-r--r--    1 root     root          1272 May 10  2015 README
-rwxr-xr-x    1 root     root           664 May 10  2015 generate
-rwxr-xr-x    1 root     root           633 May 10  2015 generate.ca
-rwxr-xr-x    1 root     root           778 May 10  2015 generate.client
-rwxr-xr-x    1 root     root           889 May 10  2015 generate.crl
-rwxr-xr-x    1 root     root           866 May 10  2015 generate.server
-rw-r--r--    1 root     root           138 May 10  2015 vars&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Before running anything, you MUST edit the file &lt;code&gt;vars&lt;/code&gt;, that initially
appears like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;BITS=4096
EXPIRATION_DAYS=365
ORGANIZATION=&amp;quot;Göteborg Bit Factory&amp;quot;
CN=localhost
COUNTRY=SE
STATE=&amp;quot;Västra Götaland&amp;quot;
LOCALITY=&amp;quot;Göteborg&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The only, single important thing that you MUST change is the &lt;code&gt;CN&lt;/code&gt;
setting (remember the &lt;em&gt;Common Name&lt;/em&gt;? Well, this is it!). As we are
assuming to operate &lt;code&gt;taskd.example.com&lt;/code&gt;, this is what we have to setup
here. It does not hurt to change a few of the other parameters of
course, but it’s not strictly necessary. This is how we will change it
in this example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;BITS=4096
EXPIRATION_DAYS=365
ORGANIZATION=&amp;quot;Yadda Yadda Yadda&amp;quot;
CN=taskd.example.com
COUNTRY=IT
STATE=&amp;quot;Lazio&amp;quot;
LOCALITY=&amp;quot;Roma&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It does not hurt to repeat: &lt;strong&gt;change &lt;code&gt;CN&lt;/code&gt; to your domain&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now, you just run the shell script &lt;code&gt;generate&lt;/code&gt; inside the directory, and
let the magic happen. It boils down to the following four commands (at
least as of release 2.5.1):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./generate.ca
./generate.server
./generate.crl
./generate.client client&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It should be pretty clear at this point:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;first of all, a &lt;em&gt;fake&lt;/em&gt; CA is generated. This is us acting as a CA,
that is not widely recognised but that we can totally trust! This step
generates files &lt;code&gt;ca.key.pem&lt;/code&gt; (the CA’s private key) and &lt;code&gt;ca.cert.pem&lt;/code&gt;
(the public certificate). This certificate is somehow special, because
it tells two things:
    &lt;ul&gt;
      &lt;li&gt;first, that it’s from a Certification Authority, so it should be
trusted when used for signing other certificates;&lt;/li&gt;
      &lt;li&gt;second, that it’s signed… by the certificate owner itself. This
is why it’s also called a &lt;em&gt;self-signed certificate&lt;/em&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Now that we have a CA, we can sign certificates for other entities,
i.e. servers and clients. The second step takes care to generate the
server’s key pair, saving the private key in &lt;code&gt;server.key.pem&lt;/code&gt; and
generating a certificate that includes the public key in
&lt;code&gt;server.cert.pem&lt;/code&gt;. &lt;em&gt;This is where the details in file &lt;code&gt;vars&lt;/code&gt; are
used&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;The third step generates a Certificate Revocation List. This is
probably overkill for a small setup, but it does not hurt to have one
anyway. The step generates the file &lt;code&gt;server.crl.pem&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The fourth step generates a (private) key and a certificate for
a client, so that it will be able to demonstrate its identity back to
the server. This step generates &lt;code&gt;client.key.pem&lt;/code&gt; and
&lt;code&gt;client.cert.pem&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One interesting thing is that the CA we created in the first step has
a double role here, because it signs the certificates for both the
server and the clients. This is not the most generic setup that you can
have, as we will see below; for the moment, we will stick with it.&lt;/p&gt;

&lt;p&gt;This is a summary of the generated files and where you should put them:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;SERVER                          CLIENT
---------------------------     ---------------------------
&amp;quot;$TWSERVER&amp;quot;/server.key.pem      &amp;quot;$TWCLIENT&amp;quot;/client.key.pem
&amp;quot;$TWSERVER&amp;quot;/server.cert.pem     &amp;quot;$TWCLIENT&amp;quot;/client.cert.pem
&amp;quot;$TWSERVER&amp;quot;/server.crl.pem      &amp;quot;$TWCLIENT&amp;quot;/ca.cert.pem
&amp;quot;$TWSERVER&amp;quot;/ca.cert.pem&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To be completely right, you should also ensure to keep &lt;code&gt;ca.key.pem&lt;/code&gt;
somewhere, because it will be needed to regenerate the &lt;code&gt;server.crl.pem&lt;/code&gt;
file in case of need.&lt;/p&gt;

&lt;h4 id=&quot;server-configuration&quot;&gt;Server configuration&lt;/h4&gt;

&lt;p&gt;Now you only have to do the configurations. On the server you have to
setup the files we generated and moved into the right location, plus
where the daemon should be listening (we will copy also a couple of
additional configurations while we are at it):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;taskd config --force -- server      &amp;quot;$DOMAIN:$PORT&amp;quot;
taskd config --force -- log         &amp;quot;$TWSERVER&amp;quot;/taskd.log
taskd config --force -- pid.file    &amp;quot;$TWSERVER&amp;quot;/taskd.pid
taskd config --force -- server.key  &amp;quot;$TWSERVER&amp;quot;/server.key.pem
taskd config --force -- server.cert &amp;quot;$TWSERVER&amp;quot;/server.cert.pem
taskd config --force -- server.crl  &amp;quot;$TWSERVER&amp;quot;/server.crl.pem
taskd config --force -- ca.cert     &amp;quot;$TWSERVER&amp;quot;/ca.cert.pem&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;client-configuration&quot;&gt;Client configuration&lt;/h4&gt;

&lt;p&gt;Configuration on the client involves the following items:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;tell the client where the server for synchronization is;&lt;/li&gt;
  &lt;li&gt;make sure we will accept the server’s certificate. As this is signed
by our fake CA, we have to make sure that the TLS library will accept
it by loading the fake CA certificate at the right time;&lt;/li&gt;
  &lt;li&gt;set the trust model to the &lt;code&gt;strict&lt;/code&gt;est mode, because we care about
security (otherwise, you wouldn’t be reading this!)&lt;/li&gt;
  &lt;li&gt;tell the client about our own user identifier and the organization we
will save our data within;&lt;/li&gt;
  &lt;li&gt;set the client key and certificate so that it will be able to provide
them when requested by the server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is what we can do then:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;task config --force -- taskd.server      &amp;quot;$DOMAIN:$PORT&amp;quot;
task config --force -- taskd.ca          &amp;quot;$TWCLIENT&amp;quot;/ca.cert.pem
task config --force -- taskd.trust       strict
task config --force -- taskd.credentials &amp;quot;$ORGANIZATION/$USER_NAME/$USER_KEY&amp;quot;
task config --force -- taskd.key         &amp;quot;$TWCLIENT&amp;quot;/client.key.pem
task config --force -- taskd.certificate &amp;quot;$TWCLIENT&amp;quot;/client.cert.pem&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Done!&lt;/p&gt;

&lt;h3 id=&quot;alternative-2-real-certificate&quot;&gt;Alternative 2: &lt;em&gt;Real&lt;/em&gt; certificate&lt;/h3&gt;

&lt;p&gt;First thing to do: just do Alternative 1 and start from there. It’s
really not much different and you don’t really want to read it again.&lt;/p&gt;

&lt;p&gt;Done? OK, now let’s move on.&lt;/p&gt;

&lt;p&gt;One thing to keep in mind is that with real certificates there are two
CAs that come into play:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the CA that signs your server certificate, and&lt;/li&gt;
  &lt;li&gt;the CA that signs your clients’ certificates.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the previous example, we used the same CA for both, but in this case
the first one is outside of our control (unless you &lt;em&gt;are&lt;/em&gt; the people
behind some well-known CA, of course!) while the second one most
probably will remain ours. Why? Well, those certificates are needed to
ensure that the people that ask to connect actually were allowed by us,
so it’s quite reasonable that we do still provide them without asking
those people to pay for a certificate.&lt;/p&gt;

&lt;p&gt;To start with, just repeat whatever was described in Alternative
1 above. We will be using probably a different key and surely
a different certificate for the server, but all the rest remains exactly
as described so it’s worth to just repeat the steps.&lt;/p&gt;

&lt;p&gt;In this example, we will assume that you get your certificate with &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s
Encrypt&lt;/a&gt;. It’s a bit of work to set it up, but after that you can
automate the renewal of the certificate (as a matter of fact, this
automation is encouraged) and forget about it in some crontab line.&lt;/p&gt;

&lt;p&gt;Now go get your certificate for your domain. We will wait here until
you’re done.&lt;/p&gt;

&lt;p&gt;Really.&lt;/p&gt;

&lt;p&gt;At the end you will end up with the same files as in the previous
section, with the addition of a &lt;code&gt;domain.key&lt;/code&gt; and a &lt;code&gt;domain.crt&lt;/code&gt; file
that come from the setup for &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt;. It’s worth to remember that
you MUST NEVER send your &lt;code&gt;domain.key&lt;/code&gt; to anyone, including &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s
Encrypt&lt;/a&gt;!&lt;/p&gt;

&lt;h4 id=&quot;server-configuration-1&quot;&gt;Server configuration&lt;/h4&gt;

&lt;p&gt;On the server side, all you have to do is copy &lt;code&gt;domain.key&lt;/code&gt; over
&lt;code&gt;server.key.pem&lt;/code&gt; and &lt;code&gt;domain.crt&lt;/code&gt; over &lt;code&gt;server.cert.pem&lt;/code&gt;, then restart
&lt;code&gt;taskd&lt;/code&gt; if it was running using the previous certificates.&lt;/p&gt;

&lt;p&gt;This is really all that you need to do on the server side. The CA
certificate &lt;em&gt;in the server&lt;/em&gt; does not change, because this is the
certificate for the CA that generates the clients’ certificates, not the
server’s.&lt;/p&gt;

&lt;h4 id=&quot;client-configuration-1&quot;&gt;Client configuration&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Theoretically&lt;/em&gt;, on the client side you should not need to do
&lt;em&gt;anything&lt;/em&gt;. This is because the certificate file you get from &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s
Encrypt&lt;/a&gt; should already contain two certificates inside, one for your
server followed by one for the CA of &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt; (this latter
signed by a well-known CA, of course). Clients are able to follow the
chain of certificates in a file they receive, automatically.&lt;/p&gt;

&lt;p&gt;Anyway, as of version 2.5.1 you will discover that this does not really
work out of the box. Why is this? Well, it’s because the code does not
load the well-known certificates, so the client follows the chain of
certificates (correct) but it eventually lands on a CA that it does not
know of, despite it’s a well-known one. This will be probably corrected
in some future release (although most probably it will work only for
clients compiled against a version of the library GnuTLS that is at
least 3.0.20).&lt;/p&gt;

&lt;p&gt;So are we out of luck? Not really. After completing the configuration
like in the Alternative 1 above, all we have to do is to get the last
(CA) certificate from the new server certificate, and save it inside
file &lt;code&gt;$TWCLIENT/ca.cert.pem&lt;/code&gt; &lt;strong&gt;in the client&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It’s easy to extract the certificate, just look for the last section in
the file that is included between clear &lt;code&gt;BEGIN CERTIFICATE&lt;/code&gt; and &lt;code&gt;END
CERTIFICATE&lt;/code&gt; markers:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;-----BEGIN CERTIFICATE-----
MIIGNTCCBR2gAwIBAgISAyzjWXqpc+Xbd... \
.................................... | THIS IS THE SERVER CERTIFICATE
pOlsXXuFidxtdN6ey7iA+SgLE+ZEZWfC9... /
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIEkjCCA3qgAwIBAgIQCgFBQgAAAVOFc... \
.................................... | THIS IS THE CA CERTIFICATE
+X+Q7UNKEkROb3N6KOqkqm57TH2H3eDJA... /
-----END CERTIFICATE-----&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, from the next invocation of &lt;code&gt;task sync&lt;/code&gt;, the server will send the
new shiny &lt;em&gt;real&lt;/em&gt; certificate, and the client will not reject it because
it’s configured to trust the Let’s Encrypt CA. YAY!&lt;/p&gt;

&lt;h3 id=&quot;quick-consideration-on-clients-authentication&quot;&gt;Quick consideration on clients authentication&lt;/h3&gt;

&lt;p&gt;You might have noticed at this point that there’s something going on
with client authentication. This actually happens at two levels:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;at the TLS level, the server asks the client for its client
certificate;&lt;/li&gt;
  &lt;li&gt;at the Taskwarrior level, the server asks the client for the
organization, the username and the user key (the one generated by
&lt;code&gt;taskd&lt;/code&gt;, not the TLS private key!) that acts both as a unique
identifier for the account AND as a password.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These two authentications are not actually connected together, although
they probably should. In particular, it would be great if the client’s
certificate CN included the string we are setting for
&lt;code&gt;taskd.credentials&lt;/code&gt; in the client.&lt;/p&gt;

&lt;p&gt;Anyway, this is not how it works today. So, for any practical reason,
you don’t &lt;em&gt;strictly&lt;/em&gt; need to generate a new TLS key and certificate for
each new user you want to manage… because everyone will just be fine
with the &lt;code&gt;client.key.pem&lt;/code&gt; and &lt;code&gt;client.cert.pem&lt;/code&gt; files you generated in
the first place. Which also means: if some of your users figures out the
username and the taskd user key of someone else, they will be able to
sync against them. There’s always space for improvement!&lt;/p&gt;

&lt;h2 id=&quot;summing-up&quot;&gt;Summing Up&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://taskwarrior.org/&quot;&gt;Taskwarrior&lt;/a&gt; is really a great and useful piece of code. Being able
to setup your own Taskserver for syncing up all your devices is a very
useful addition too; doing it properly requires some attention but it’s
really not difficult as long as you follow the instructions carefully.&lt;/p&gt;

&lt;p&gt;Using it with &lt;em&gt;real&lt;/em&gt; certificates is definitely doable, although the
process can be enhanced to make it even simpler (with less
configurations needed on the client side). Even now it’s not really
difficult and just requires one step more than what would be ideal.&lt;/p&gt;

&lt;p&gt;The clients authentication process should probably relate user accounts
managed by Taskwarrior to the certificates generated for clients. This
would allow better restriction of access (like “you can access
a specific resource if and only if you know the resources details &lt;em&gt;and&lt;/em&gt;
you also have the certificate attached to that resource”) and also an
effective usage of the Certificate Revocation List. Anyway,
&lt;a href=&quot;https://taskwarrior.org/&quot;&gt;Taskwarrior&lt;/a&gt; is under active development… and you might be the one to
implement those enhancements!&lt;/p&gt;

&lt;p&gt;Until then… happy tasking!&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/setup-a-taskwarrior-server/&quot;&gt;Setup a Taskwarrior server&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on October 03, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Writing About Stuff]]></title>
  <link rel="alternate" type="text/html" href="/writing-about-stuff/" />
  <id>/writing-about-stuff</id>
  <published>2016-05-14T00:00:00+02:00</published>
  <updated>2016-05-14T00:00:00+02:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;One of the most effective ways to debug and refine my code is to…
write about it. I am so smart that I figured it out all alone… at
about 43!&lt;/p&gt;

&lt;p&gt;(I mean &lt;em&gt;fourty-three, wow!&lt;/em&gt;, not &lt;em&gt;6.0415263e+52&lt;/em&gt;).&lt;/p&gt;

&lt;h2 id=&quot;datatubes-again-and-again&quot;&gt;Data::Tubes, Again and Again&lt;/h2&gt;

&lt;p&gt;I’m working on a project called &lt;a href=&quot;http://github.polettix.it/Data-Tubes/&quot;&gt;Data::Tubes&lt;/a&gt; lately. To be honest,
there’s not much left to do with respect to my original plan, so I’m
actually more &lt;em&gt;writing about it&lt;/em&gt; than &lt;em&gt;writing it&lt;/em&gt; now.&lt;/p&gt;

&lt;p&gt;While doing this, two things are becoming more and more evident:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;this project is not much relevant. I see the value of it, and I’ll
probably use it quite extensively to solve a class of problems that
pop up from time to time, but overall it’s quite niche-y;&lt;/li&gt;
  &lt;li&gt;to really make something useful, it’s better to use it. A lot of the
changes in the interface happened while writing examples.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first aspect is a bummer to some extent; on the flip side, I’m
having fun, learning something, keeping my programming muscles exercised
and… doing something that most probably will be useful at some time.&lt;/p&gt;

&lt;p&gt;The second one is just rediscovering what I probably read over and over,
with relations to Test Driven Developemnt to some extent. I’m really not
sticking to the KISS principle - it turns out that many times I’m adding
things “just because it’s easy” and blends well, not out of real need.
On the other hand, writing about it let me refine the interface to
something &lt;em&gt;handy&lt;/em&gt; as opposed to simply &lt;em&gt;doable&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;frustration&quot;&gt;Frustration!&lt;/h2&gt;

&lt;p&gt;For relevancy of the project, here’s were the hubris really gets put to
test. Well, some humility never hurt anyone.&lt;/p&gt;

&lt;p&gt;When I first saw a reference in &lt;a href=&quot;http://perlweekly.com/archive/245.html&quot;&gt;issue 245 of Perl Weekly&lt;/a&gt; I
was a bit disapponted to see the whole idea summarized as &lt;em&gt;templating
engine using tags that resemble the tags of Template::Toolkit and input
data in PSKV format. That might stand for Pipe Separated Keys and
Values.&lt;/em&gt;. Wait… what? The whole point of &lt;a href=&quot;http://github.polettix.it/Data-Tubes/&quot;&gt;Data::Tubes&lt;/a&gt; is to give
you all the flexibility on how you read, process, render and write your
outputs… how come?!?&lt;/p&gt;

&lt;p&gt;I’m not blaming Gabor of course. The &lt;a href=&quot;http://perlweekly.com/&quot;&gt;Perl Weekly&lt;/a&gt; team does a
really remarkable job of keeping people updated on what happens in the
Perl world, and it was of course my fault to not provide clear
information about my project.&lt;/p&gt;

&lt;p&gt;After that, I saw that &lt;a href=&quot;http://github.polettix.it/Data-Tubes/&quot;&gt;Data::Tubes&lt;/a&gt; was featured in &lt;a href=&quot;http://perltricks.com/article/what-s-new-on-cpan---march-2016/&quot;&gt;this issue of
Perl Tricks&lt;/a&gt;. Wow, they called it &lt;em&gt;a cute data
transformation module&lt;/em&gt;… how kind! But wait… what? What does &lt;em&gt;needs
iterators&lt;/em&gt; mean?!? They’re there since the beginning!!!&lt;/p&gt;

&lt;p&gt;Again, I think that the &lt;a href=&quot;http://perltricks.com/authors/&quot;&gt;authors&lt;/a&gt; at &lt;a href=&quot;http://perltricks.com/&quot;&gt;Perl Tricks&lt;/a&gt; do an
amazing job… again, my fault for not making things clear enough!&lt;/p&gt;

&lt;h2 id=&quot;so-what&quot;&gt;So What?&lt;/h2&gt;

&lt;p&gt;So… what did I do? Well, I thought that the whole frustration thing
could mean two things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I really suck at synthesizing and describe the gist of things. I still
have to figure out how to improve here…&lt;/li&gt;
  &lt;li&gt;all the stuff I coded needed much better documentation, not only the
&lt;em&gt;reference&lt;/em&gt; type (the POD was already in place), but the kind that you
would initially turn to to understand how a thing can be actually
useful to address a problem.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This resulted in a &lt;em&gt;lot&lt;/em&gt; of writing (the &lt;a href=&quot;http://github.polettix.it/Data-Tubes/&quot;&gt;web site&lt;/a&gt;, the
articles in the &lt;a href=&quot;https://github.com/polettix/Data-Tubes/wiki&quot;&gt;wiki&lt;/a&gt;)… again confirming my distance from
synthesys!&lt;/p&gt;

&lt;p&gt;All this writing benefited me in two ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I wrote something that will help me to use my project effectively and
efficiently when I will need it. I’m trying to write stuff in the way
I’d like to read it!&lt;/li&gt;
  &lt;li&gt;I got better insight at what it can do and how it can be done better -
more features to add, wow!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-birth-of-bucket&quot;&gt;The Birth of &lt;code&gt;bucket&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;One such thing that happened lately eventually led to the addition of
the &lt;code&gt;bucket&lt;/code&gt; type of &lt;code&gt;tap&lt;/code&gt;. Let’s go in steps!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.polettix.it/Data-Tubes/&quot;&gt;Data::Tubes&lt;/a&gt; lets you define a sequence, or &lt;a href=&quot;https://metacpan.org/pod/Data::Tubes#pipeline&quot;&gt;pipeline&lt;/a&gt;, of
transforming actions called tubes. Each tube receives as input exactly
one &lt;em&gt;record&lt;/em&gt; and outputs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;()&lt;/code&gt;: the input record is simply discarded;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;($onething)&lt;/code&gt;: the &lt;code&gt;$onething&lt;/code&gt; is the output record, that is suitable
for being fed to the following tube;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;(records =&amp;gt; \@manythings)&lt;/code&gt;: the input record gave rise to a sequence
of output records, returned as an array reference;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;(iterator =&amp;gt; sub{...})&lt;/code&gt;: the input record gave rise to a &lt;em&gt;promise&lt;/em&gt; to
generate zero, one or more output records&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During the design of &lt;a href=&quot;https://metacpan.org/pod/Data::Tubes#pipeline&quot;&gt;pipeline&lt;/a&gt; I had to deal with the generic case,
where you don’t know in anticipation what the tubes in the pipeline will
return. The most sensible choice seemed to be the &lt;em&gt;iterator&lt;/em&gt;: it allows
returning whatever number of output records (so it’s general enough) and
it also does not assume that you want to go all the way down in one
single shot (which is what an iterator is useful for).&lt;/p&gt;

&lt;p&gt;So, when we define a pipeline like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tubes&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw&amp;lt; pipeline &amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pipeline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;Source::iterate_files&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;Reader::by_line&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Parser::by_format&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;name,age&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;#39;Renderer::with_template_perlish&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;Hi [% name %]! You&amp;#39;re [% age %] today!\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;Writer::to_files&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;we get back a tube whose output contract is the &lt;code&gt;iterator&lt;/code&gt; one:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@outcome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pipeline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@filenames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# $outcome[0] is the string &amp;#39;iterator&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# $outcome[1] is an iterator. NO real computation happened yet!&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$outcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ... use the $out-put record if needed&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One thing that was immediately evident, though, was that in most cases
what I wanted was to just run the whole thing for all input records.
This initially led me to add the &lt;a href=&quot;https://metacpan.org/pod/Data::Tubes#drain&quot;&gt;drain&lt;/a&gt; function, which takes care to
feed a tube with inputs and &lt;em&gt;drain&lt;/em&gt; whatever comes out of it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tubes&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw&amp;lt; pipeline drain &amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# create the pipeline as before, then instead of calling this:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    my @outcome = $pipeline-&amp;gt;(\@filenames);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# you can call this:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;drain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@filenames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a drag (you have to import &lt;a href=&quot;https://metacpan.org/pod/Data::Tubes#drain&quot;&gt;drain&lt;/a&gt;!), so a couple of options
were added to automate the draining process. The most basic is &lt;code&gt;tap&lt;/code&gt;,
that when set to &lt;code&gt;sink&lt;/code&gt; ensures that the iterator is drained on the spot
and nothing is returned (to save memory):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tubes&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw&amp;lt; pipeline &amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pipeline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;Source::iterate_files&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;Reader::by_line&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Parser::by_format&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;name,age&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;#39;Renderer::with_template_perlish&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;Hi [% name %]! You&amp;#39;re [% age %] today!\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;Writer::to_files&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;sink&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$pipeline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@filenames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So far so good.&lt;/p&gt;

&lt;p&gt;While writing an article about &lt;a href=&quot;https://metacpan.org/pod/Data::Tubes::Plugin::Plumbing#alternatives&quot;&gt;alternatives&lt;/a&gt;, though, I came to
discovering that &lt;a href=&quot;https://metacpan.org/pod/Data::Tubes#pipeline&quot;&gt;pipeline&lt;/a&gt; is not only useful to define the &lt;em&gt;outer&lt;/em&gt;
pipeline, i.e. the one that does the end-to-end processing, but also to
define sub-pipelines to be fed as &lt;a href=&quot;https://metacpan.org/pod/Data::Tubes::Plugin::Plumbing#alternatives&quot;&gt;alternatives&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a nutshell, &lt;a href=&quot;https://metacpan.org/pod/Data::Tubes::Plugin::Plumbing#alternatives&quot;&gt;alternatives&lt;/a&gt; allows you to provide a list of
alternative tubes, each of which will be tried over the same input
record until one of them &lt;em&gt;accepts&lt;/em&gt; it and returns something back.&lt;/p&gt;

&lt;p&gt;This led me to a bug though, because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;by default, &lt;a href=&quot;https://metacpan.org/pod/Data::Tubes#pipeline&quot;&gt;pipeline&lt;/a&gt; returns a tube that always returns an
iterator. Hence, the first tube in the alternatives would always get
the input record, even if it would eventually toss it away at
&lt;em&gt;iterator firing&lt;/em&gt; time;&lt;/li&gt;
  &lt;li&gt;working around the iterator setting the &lt;code&gt;tap&lt;/code&gt; to &lt;code&gt;sink&lt;/code&gt; will make
&lt;em&gt;all&lt;/em&gt; the alternatives to be always fired, because the &lt;code&gt;sink&lt;/code&gt; does not
return anything.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While it was already possible to address the problem with the available
interface (&lt;a href=&quot;https://metacpan.org/pod/Data::Tubes#pipeline&quot;&gt;pipeline&lt;/a&gt; also supported a &lt;code&gt;pump&lt;/code&gt; option that could be
used effectively), there was clearly a need for both exhausting the
iterator &lt;em&gt;and&lt;/em&gt; getting the output records. Hence, the following example
does use &lt;a href=&quot;https://metacpan.org/pod/Data::Tubes::Plugin::Plumbing#alternatives&quot;&gt;alternatives&lt;/a&gt; in the right way:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$template_for_OK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$template_for_NOT_OK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;Source::iterate_files&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;#39;Reader::by_line&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Parser::by_format&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;status:name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;#39;Plumbing::alternatives&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    
      &lt;span class=&quot;c1&quot;&gt;# First alternative, try to see if it&amp;#39;s a good one&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# filter only good ones&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;structured&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;OK;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;             return;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;          },&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;          [&amp;#39;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Renderer::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with_template_perlish&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39; =&amp;gt; $template_for_OK],&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;          {tap =&amp;gt; &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;}, # &amp;lt;&amp;lt;&amp;lt; LOOK HERE!!!&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;      ),&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    &lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;      # as a fallback, we render for NOT OK&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;      [&amp;#39;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Renderer::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with_template_perlish&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39; =&amp;gt; $template_for_NOT_OK],&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   ],&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   &amp;#39;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Writer::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_files&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   {tap =&amp;gt; &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# we can just toss the records away here&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@input_filenames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions?&lt;/h2&gt;

&lt;p&gt;I don’t think I have some conclusions for this article to be honest. I’m
having fun with &lt;a href=&quot;http://github.polettix.it/Data-Tubes/&quot;&gt;Data::Tubes&lt;/a&gt;, although I start doubting its relevance
and usefulness. But one thing is sure: for me, it’s an amazing learning
tool as a hobby programmer!&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/writing-about-stuff/&quot;&gt;Writing About Stuff&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on May 14, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[TeePee]]></title>
  <link rel="alternate" type="text/html" href="/teepee/" />
  <id>/teepee</id>
  <published>2015-12-27T00:00:00+01:00</published>
  <updated>2015-12-27T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;Get the most out of your APIs… from the shell!&lt;/p&gt;

&lt;p&gt;I sometimes need to read values from a configuration file or a response
to an API call from the shell. Most of the times they come either in
JSON or YAML format… which is when &lt;code&gt;teepee&lt;/code&gt; comes handy.&lt;/p&gt;

&lt;p&gt;Why the name, in the first place? It heavily relies upon the Perl
distribution/module
&lt;a href=&quot;https://metacpan.org/pod/Template::Perlish&quot;&gt;Template::Perlish&lt;/a&gt;, whose
initials are &lt;em&gt;Ti Pi&lt;/em&gt;. Hence… &lt;code&gt;teepee&lt;/code&gt;.&lt;sup id=&quot;fnref:credits&quot;&gt;&lt;a href=&quot;#fn:credits&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#table-of-contents&quot; id=&quot;markdown-toc-table-of-contents&quot;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#quick&quot; id=&quot;markdown-toc-quick&quot;&gt;Quick! Show Me Something!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting-up&quot; id=&quot;markdown-toc-setting-up&quot;&gt;Setting Up&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-a-value&quot; id=&quot;markdown-toc-getting-a-value&quot;&gt;Getting A Value&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-available-inputs&quot; id=&quot;markdown-toc-using-available-inputs&quot;&gt;Using Available Inputs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#expanding-templates&quot; id=&quot;markdown-toc-expanding-templates&quot;&gt;Expanding Templates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#array&quot; id=&quot;markdown-toc-array&quot;&gt;Iterating Over an Array&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#handy-shortcuts&quot; id=&quot;markdown-toc-handy-shortcuts&quot;&gt;Handy Shortcuts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#yet-another-input-channel&quot; id=&quot;markdown-toc-yet-another-input-channel&quot;&gt;Yet Another Input Channel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reshaping&quot; id=&quot;markdown-toc-reshaping&quot;&gt;Reshaping&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pretty-printing-and-isolating&quot; id=&quot;markdown-toc-pretty-printing-and-isolating&quot;&gt;Pretty-Printing and Isolating&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-few-examples&quot; id=&quot;markdown-toc-a-few-examples&quot;&gt;A Few Examples&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#whats-the-weather-like&quot; id=&quot;markdown-toc-whats-the-weather-like&quot;&gt;What’s the Weather Like?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#where-can-i-go-from&quot; id=&quot;markdown-toc-where-can-i-go-from&quot;&gt;Where Can I Go From…&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#whats-the-last-xkcd-strip&quot; id=&quot;markdown-toc-whats-the-last-xkcd-strip&quot;&gt;What’s the Last xkcd Strip?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#and-so-on&quot; id=&quot;markdown-toc-and-so-on&quot;&gt;… And So On…&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#times-up&quot; id=&quot;markdown-toc-times-up&quot;&gt;Time’s Up!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;quick&quot;&gt;Quick! Show Me Something!&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# something about me&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;metacpan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://api.metacpan.org/v0&amp;#39;&lt;/span&gt;
curl &lt;span class=&quot;s2&quot;&gt;&amp;quot;$metacpan/author/POLETTIX&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; teepee -nT &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi! I&amp;#39;m [% name %] &amp;lt;[% email.0 %]&amp;gt;.&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Hi! I&amp;#39;m Flavio Poletti &amp;lt;polet...pan.org&amp;gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# for extracting multiple data, let&amp;#39;s cache in a variable&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;s2&quot;&gt;&amp;quot;$metacpan/author/POLETTIX&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
teepee -I &lt;span class=&quot;s2&quot;&gt;&amp;quot;$me&amp;quot;&lt;/span&gt; -nT &lt;span class=&quot;s1&quot;&gt;&amp;#39;See my big face at [% gravatar_url %]?s=200&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# See my big face at http://www.gravatar.com/av...b57.png?s=200&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# my favourite band&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;mbrz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://musicbrainz.org/ws/2&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;pjq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;s2&quot;&gt;&amp;quot;$mbrz/artist?fmt=json&amp;amp;limit=1&amp;amp;query=Pearl%20Jam&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;teepee -I &lt;span class=&quot;s2&quot;&gt;&amp;quot;$pjq&amp;quot;&lt;/span&gt; -v artists.0.name&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;teepee -I &lt;span class=&quot;s2&quot;&gt;&amp;quot;$pjq&amp;quot;&lt;/span&gt; -v artists.0.country&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$name rock from the $country&amp;quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;!&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Pearl Jam rock from the US!&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# let&amp;#39;s just isolate data about Pearl Jam from the query response&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;pj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;teepee -I &lt;span class=&quot;s2&quot;&gt;&amp;quot;$pjq&amp;quot;&lt;/span&gt; -F&lt;span class=&quot;s1&quot;&gt;&amp;#39;YAML(V &amp;quot;artists.0&amp;quot;)&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;teepee -I &lt;span class=&quot;s2&quot;&gt;&amp;quot;$pj&amp;quot;&lt;/span&gt; -v &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;#39;life-span&amp;#39;.begin&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;teepee -I &lt;span class=&quot;s2&quot;&gt;&amp;quot;$pj&amp;quot;&lt;/span&gt; -v &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;#39;begin-area&amp;#39;.name&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;they started from $city in $year&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# they started from Seattle in 1990&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# we can also pretty-print, especially handy with compact JSON&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://www.astro-phys.com/api/de406&amp;#39;&lt;/span&gt;
curl &lt;span class=&quot;s2&quot;&gt;&amp;quot;$ap/coefficients?date=1972-11-9&amp;amp;bodies=mars&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# {&amp;quot;date&amp;quot;: 2441630.5, &amp;quot;type&amp;quot;: &amp;quot;chebyshev&amp;quot;, &amp;quot;results&amp;quot;: {&amp;quot;mars&amp;quot;: ...&lt;/span&gt;
curl &lt;span class=&quot;s2&quot;&gt;&amp;quot;$ap/coefficients?date=1972-11-9&amp;amp;bodies=mars&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; teepee -FYAML
&lt;span class=&quot;c&quot;&gt;# ---&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# date: 2441630.5&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# results:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   mars:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     coefficients:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#       -&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#         - -221246363.667206&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#         - 26761105.8067001&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#         ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     end: 2441680.5&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     start: 2441616.5&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# type: chebyshev&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# unit: km&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# or do the pretty-printing of a sub-section only&lt;/span&gt;
teepee -I &lt;span class=&quot;s2&quot;&gt;&amp;quot;$pj&amp;quot;&lt;/span&gt; -F&lt;span class=&quot;s1&quot;&gt;&amp;#39;YAML(V &amp;quot;aliases&amp;quot;)&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ---&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   begin-date: ~&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   end-date: ~&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   locale: ~&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   name: &amp;#39;Mookie Blaylock&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   primary: ~&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   sort-name: &amp;#39;Mookie Blaylock&amp;#39; type: ~&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;No, I didn’t know Pearl Jam had an alias as Mookie Blaylock!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;setting-up&quot;&gt;Setting Up&lt;/h2&gt;

&lt;p&gt;To get up to speed in the examples, you need &lt;code&gt;teepee&lt;/code&gt; and
&lt;a href=&quot;http://curl.haxx.se/&quot;&gt;curl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;teepee&lt;/code&gt; is easy to install, especially in the &lt;a href=&quot;https://github.com/polettix/teepee/raw/master/bundle/teepee&quot;&gt;bundled
version&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl -LO &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    https://github.com/polettix/teepee/raw/master/bundle/teepee
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chmod +x teepee&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We will assume the directory where you place &lt;code&gt;teepee&lt;/code&gt; is in the &lt;code&gt;PATH&lt;/code&gt;,
otherwise you can move it in some directory that is. (e.g.
&lt;code&gt;usr/local/bin&lt;/code&gt;). You shouldn’t need anything more than Perl 5.8 to be
able to run it (please report any issues!).&lt;/p&gt;

&lt;p&gt;In case you don’t have &lt;code&gt;curl&lt;/code&gt;, you can try to see if you have &lt;a href=&quot;https://www.gnu.org/software/wget/&quot;&gt;GNU
Wget&lt;/a&gt; instead. In this case, a quick
and dirty replacement for the examples below can be the following
&lt;code&gt;alias&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;curl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;wget -O -&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Last, but not least, we will use &lt;code&gt;bash&lt;/code&gt; as our shell of election in the
following examples. You are smart enough to figure out what to change in
case you want to use something different!&lt;/p&gt;

&lt;h2 id=&quot;getting-a-value&quot;&gt;Getting A Value&lt;/h2&gt;

&lt;p&gt;The basic &lt;em&gt;use case&lt;/em&gt; is probably just getting a value from a JSON or
YAML structured file. You will need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;some &lt;em&gt;input&lt;/em&gt; structured data&lt;/li&gt;
  &lt;li&gt;the &lt;em&gt;path&lt;/em&gt; of the variable in the data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make things clearer, let’s start playing with the following sample
input data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
name: Flavio
surname: Poletti
cpan:
    id: POLETTIX
    metacpan: https://metacpan.org/author/POLETTIX
    latest:
        - Data::Crumbr
        - Template::Perlish
        - Graphics::Potrace
        - Log::Log4perl::Tiny
    favorites:
        Dancer: YANICK
        JSON: MAKAMAKA
        Moo: HAARG
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll assume the above text is in file &lt;code&gt;input.yaml&lt;/code&gt;, so we have our
&lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What’s a &lt;em&gt;path&lt;/em&gt; then? It’s how you can reach the value you’re interested
into starting from the root of the data structure, all the way down,
with components separated by dots. For example, who’s the current
maintainer of &lt;code&gt;Moo&lt;/code&gt;?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;teepee -i input.yaml -v cpan.favorites.Moo
HAARG&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# OK but next prompt is on the same line and it&amp;#39;s UGLY...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first two options we just saw are:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;code&gt;-i&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;is for inputs. They can be JSON or YAML, and &lt;code&gt;teepee&lt;/code&gt; will try to
auto-detect. You can be explicit and use &lt;code&gt;-j&lt;/code&gt; and &lt;code&gt;-y&lt;/code&gt;, you can guess
what for what;&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;-v&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;is for variable’s path. As anticipated, the different
keys/indexes, separated by dots (more on this later!).&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Well, we managed to get the value we were after, but it would be nice to
have a newline when printing out to the terminal. No worries, there’s
option &lt;code&gt;-n&lt;/code&gt; to the rescue:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;teepee -i input.yaml -nv cpan.favorites.Dancer
YANICK
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# now the next prompt is on its own new line!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This option is useful only for printing things to the terminal,
otherwise you can ignore it, e.g. when just filling up some variables:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ metacpan_uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;teepee -i input.yaml -v cpan.metacpan&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$metacpan_uri&amp;quot;&lt;/span&gt;
https://metacpan.org/author/POLETTIX&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So far so good, but probably not that impressive as we could have
obtained the same with some &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;sed&lt;/code&gt; magic. In this case
probably yes, but what if data were shaped like this instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
name: Flavio
surname: Poletti
cpan:
    id: POLETTIX
    metacpan: https://metacpan.org/author/POLETTIX
    latest:
        - Data::Crumbr
        - Template::Perlish
        - Graphics::Potrace
        - Log::Log4perl::Tiny
    using:
        JSON:
            id: &#39;https://metacpan.org/release/JSON&#39;
    favorites:
        Dancer:
            id: YANICK
        JSON:
            id: MAKAMAKA
        Moo:
            id: HAARG
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that I added a &lt;code&gt;using&lt;/code&gt; hash that has itself a &lt;code&gt;JSON&lt;/code&gt; element inside,
and changed how &lt;code&gt;id&lt;/code&gt;s are associated to the distributions. To make
things funnier, the shape of &lt;code&gt;using&lt;/code&gt; and of &lt;code&gt;favorites&lt;/code&gt; is the same, but
with different data. Well, &lt;em&gt;now&lt;/em&gt; it’s a bit more difficult to get the
&lt;em&gt;right&lt;/em&gt; id for the JSON inside &lt;code&gt;favorites&lt;/code&gt;, isn’t it? It’s a trivial
change in calling &lt;code&gt;teepee&lt;/code&gt; though:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# --------------------------------------------vvv&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;teepee -i input2.yaml -nv cpan.favorites.JSON.id
MAKAMAKA&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I hope you appreciate the simplification.&lt;/p&gt;

&lt;p&gt;In case you’re wondering, accessing arrays just means using the right
index in the right place:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;teepee -i input.yaml -nv cpan.latest.1
Template::Perlish&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The assumption (at least so far) is that you know exactly how your data
are shaped, including the position of elements inside arrays. We will
see later in section &lt;a href=&quot;#array&quot;&gt;Iterating Over an Array&lt;/a&gt; that there are
functions that allow us to iterate over data structures, so that we can
partially&lt;sup id=&quot;fnref:partially&quot;&gt;&lt;a href=&quot;#fn:partially&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; remove this assumption.&lt;/p&gt;

&lt;h2 id=&quot;using-available-inputs&quot;&gt;Using Available Inputs&lt;/h2&gt;

&lt;p&gt;If you’re consuming an API, chances are you’re actually doing remote
calls (e.g. with &lt;code&gt;curl&lt;/code&gt;) and getting responses back.&lt;/p&gt;

&lt;p&gt;You are polite enough to understand that if you need three values from
the same response… you don’t have to make three different calls,
right? One alternative (apart using temporary files, of course) is to
save the response in a shell variable, which works for local files a
well of course:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# cache query result in a variable, for using over and over&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ mcpan_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://api.metacpan.org/v0/author/POLETTIX&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# read file contents in a convenience variable&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ local_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&amp;lt; input.yaml&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case, you can use the &lt;em&gt;immediate&lt;/em&gt; parameters, that are the
uppercase counterparts of the file-base input parameters:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# auto-detect&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ PAUSE_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;teepee -I &lt;span class=&quot;s2&quot;&gt;&amp;quot;$local_input&amp;quot;&lt;/span&gt; -v cpan.id&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# force interpreting as YAML&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;teepee -Y &lt;span class=&quot;s2&quot;&gt;&amp;quot;$local_input&amp;quot;&lt;/span&gt; -v name&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# force interpreting as JSON&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ fullname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;teepee -J &lt;span class=&quot;s2&quot;&gt;&amp;quot;$mcpan_input&amp;quot;&lt;/span&gt; -v name&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember to put double quotes around the variable with the data, or the
shell will make a mess!&lt;/p&gt;

&lt;h2 id=&quot;expanding-templates&quot;&gt;Expanding Templates&lt;/h2&gt;

&lt;p&gt;Getting variables is handy, but what if you want to generate something a
bit more evolved? You can use
&lt;a href=&quot;https://metacpan.org/pod/Template::Perlish&quot;&gt;Template::Perlish&lt;/a&gt; for
this, e.g. with a template passed directly on the command line as text
with option &lt;code&gt;-T&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;teepee -i input.yaml -nT &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, I am [% name%] [% surname %]&amp;#39;&lt;/span&gt;
Hello, I am Flavio Poletti&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Templates can live in files, of course. Again, what’s immediate on the
command line as an uppercase option &lt;code&gt;-T&lt;/code&gt; becomes a lowercase option &lt;code&gt;-t&lt;/code&gt;
when taken from a file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat story.txt
Hello, my name is &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;% name %&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;% surname %&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;.
Lorem ipsum...

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;teepee -i input.yaml -t story.txt
Hello, my name is Flavio Poletti.
Lorem ipsum...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This can come quite handy when you’re doing API consumption where you
have to send JSON text back and forth. For example, one way to see one’s
favorite distributions on &lt;em&gt;meta::cpan&lt;/em&gt; is to POST the following query:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &quot;fields&quot;: [ &quot;distribution&quot; ],
    &quot;filter&quot; : { &quot;term&quot; : { &quot;user&quot; : &quot;[% user %]&quot; } },
    &quot;size&quot;: 100
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will store the above template in &lt;code&gt;favorites-for.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We need the user identifier, which is easy to retrieve from the author’s
profile:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://api.metacpan.org/v0/author/POLETTIX&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;teepee -I &lt;span class=&quot;s2&quot;&gt;&amp;quot;$me&amp;quot;&lt;/span&gt; -nv user
NwdPuW9vRBGuIdSr4Gw26g
&lt;span class=&quot;nv&quot;&gt;$ query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;teepee -I &lt;span class=&quot;s2&quot;&gt;&amp;quot;$me&amp;quot;&lt;/span&gt; -t favorites-for.json&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$query&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;fields&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;distribution&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;filter&amp;quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&amp;quot;NwdPuW9vRBGuIdSr4Gw26g&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;: 100
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ favs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl -XPOST &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://api.metacpan.org/v0/favorite/_search&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              -d &lt;span class=&quot;s2&quot;&gt;&amp;quot;$query&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;teepee -I &lt;span class=&quot;s2&quot;&gt;&amp;quot;$favs&amp;quot;&lt;/span&gt; -nT &lt;span class=&quot;s1&quot;&gt;&amp;#39;I have [% hits.total %] favorites&amp;#39;&lt;/span&gt;
I have &lt;span class=&quot;m&quot;&gt;13&lt;/span&gt; favorites&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you are correctly thinking now, this requires that the template is
shaped to accept exactly the data structure coming from the response,
which is a bit stiff. We’ll see later how to use even more general
inputs.&lt;/p&gt;

&lt;h2 id=&quot;array&quot;&gt;Iterating Over an Array&lt;/h2&gt;

&lt;p&gt;Our last query result contained as much as 13 favorites, in an array
shaped like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &quot;hits&quot; : {
        &quot;hits&quot; : [
            {
                &quot;fields&quot; : {
                    &quot;distribution&quot; : &quot;Template-Toolkit&quot;
                },
                &quot;_score&quot; : 1,
                &quot;_type&quot; : &quot;favorite&quot;,
                &quot;_id&quot; : &quot;vx77xt7X5e_a1pr66pq_QJvhbJs&quot;,
                &quot;_index&quot; : &quot;cpan_v1&quot;
            },
            {
                &quot;_index&quot; : &quot;cpan_v1&quot;,
                &quot;_id&quot; : &quot;DD1K8tb8s2oNX8RN1UZEL6wijUQ&quot;,
                &quot;fields&quot; : {
                    &quot;distribution&quot; : &quot;Pod-Markdown&quot;
                },
                &quot;_type&quot; : &quot;favorite&quot;,
                &quot;_score&quot; : 1
            },
            ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How to get a list of distribution names? We might &lt;code&gt;grep&lt;/code&gt;, of course, or
use a bit of Perl with
&lt;a href=&quot;https://metacpan.org/pod/Template::Perlish&quot;&gt;Template::Perlish&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;teepee -I &lt;span class=&quot;s2&quot;&gt;&amp;quot;$favs&amp;quot;&lt;/span&gt; -T &lt;span class=&quot;s1&quot;&gt;&amp;#39;My favorites:&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[% for my $hit (A &amp;quot;hits.hits&amp;quot;) {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;   %]- [%= $hit-&amp;gt;{fields}{distribution} %]&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[% } %]&amp;#39;&lt;/span&gt;
My favorites:
- Template-Toolkit
- Pod-Markdown
- GraphViz
- Pinto
- Parse-RecDescent
- Path-Class
- Dancer
- JSON
- WWW-Mechanize
- Dist-Zilla
- WWW-Mechanize-Shell
- libwww-perl
- Moo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We already saw that option &lt;code&gt;-T&lt;/code&gt; allows us to set a generic template.
What’s good is that the template can also contain Perl code.&lt;/p&gt;

&lt;p&gt;The really handy thing here is the &lt;code&gt;A&lt;/code&gt; function, that works on a &lt;em&gt;path&lt;/em&gt;
(string &lt;code&gt;&quot;hits.hits&quot;&lt;/code&gt; in this case) and, assuming it leads to an array
reference, expands the reference to a list of items. In our case, each
item is a hash where the interesting part is inside &lt;code&gt;fields&lt;/code&gt;, then
inside &lt;code&gt;distribution&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;handy-shortcuts&quot;&gt;Handy Shortcuts&lt;/h2&gt;

&lt;p&gt;We saw in &lt;a href=&quot;#array&quot;&gt;Iterating Over an Array&lt;/a&gt; that it’s possible to use a
function &lt;code&gt;A&lt;/code&gt; in the templates, that takes a template path and expands
it into a list. There are a few of additional functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;V&lt;/code&gt; expands to a single value. It might be a leaf scalar or an
intermediate data structure, you should know what you have though;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;H&lt;/code&gt; expands a hash reference to the list intermixing keys and values;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;HK&lt;/code&gt; expands a hash reference into the list if its keys;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;HV&lt;/code&gt; expands a hash reference into the list of its values.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They all take a &lt;em&gt;path&lt;/em&gt;, either as a string or as a reference to an array
containing the different crumbs in the sequence.&lt;/p&gt;

&lt;p&gt;The functions also accept an optional second parameter, assumed to be a
reference to a data structure. When present, it is visited instead of
the top-level data structure. Hence, the last example in the previous
section can be rewritten as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;teepee -I &lt;span class=&quot;s2&quot;&gt;&amp;quot;$favs&amp;quot;&lt;/span&gt; -T &lt;span class=&quot;s1&quot;&gt;&amp;#39;My favorites:&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[%&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    for my $hit (A &amp;quot;hits.hits&amp;quot;) { %]- [%=&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        V(&amp;quot;fields.distribution&amp;quot;, $hit) %]&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[% } %]&amp;#39;&lt;/span&gt;
My favorites:
- Template-Toolkit
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;yet-another-input-channel&quot;&gt;Yet Another Input Channel&lt;/h2&gt;

&lt;p&gt;There is an interesting &lt;a href=&quot;https://metacpan.org/&quot;&gt;meta::cpan&lt;/a&gt; query
&lt;a href=&quot;https://github.com/CPAN-API/cpan-api/blob/master/docs/API-docs.md#get-the-latest-version-numbers-of-your-favorite-modules&quot;&gt;get the latest version numbers of your favorite
modules&lt;/a&gt;
that can be expressed in the following template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &quot;query&quot; : { &quot;terms&quot; :
        { &quot;release.distribution&quot; : [% list_array %] } },
    &quot;filter&quot; : { &quot;term&quot; : { &quot;release.status&quot; : &quot;latest&quot; } },
    &quot;fields&quot; : [ &quot;distribution&quot;, &quot;version&quot; ],
    &quot;size&quot;   : [% size %]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll save the above template in &lt;code&gt;lastv-favs.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, of course, the issue is to get &lt;code&gt;list_array&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; for &lt;em&gt;your&lt;/em&gt;
favorites. In the previous section we already saw mine, so we can
generate something suitable for &lt;code&gt;list_array&lt;/code&gt; as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ list_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;teepee -I &lt;span class=&quot;s2&quot;&gt;&amp;quot;$favs&amp;quot;&lt;/span&gt; -T &lt;span class=&quot;s1&quot;&gt;&amp;#39;[ [%=&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    join &amp;quot;, &amp;quot;, map { qq[&amp;quot;$_-&amp;gt;{fields}{distribution}&amp;quot;]}&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        A &amp;quot;hits.hits&amp;quot;;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;%] ]&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;teepee -I &lt;span class=&quot;s2&quot;&gt;&amp;quot;$favs&amp;quot;&lt;/span&gt; -v hits.total&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we have our expansion values inside shell variables… how do we
pass them to &lt;code&gt;teepee&lt;/code&gt; for expanding the template above? This is where
option &lt;code&gt;-d&lt;/code&gt; comes handy, because it allows you to define variable
valued directly on the command line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;teepee -t &lt;span class=&quot;s2&quot;&gt;&amp;quot;lastv-favs.json&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -d &lt;span class=&quot;nv&quot;&gt;list_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$list_array&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -d &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$size&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But wait! Why does it seem to be stuck at this point? The fact is that
by default &lt;code&gt;teepee&lt;/code&gt; expects to read some input, and it goes to standard
input by default. If you don’t want it to get any &lt;em&gt;regular&lt;/em&gt; input (as
in this case, in which you define variables directly) you can use option
&lt;code&gt;-N&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;teepee -Nt &lt;span class=&quot;s2&quot;&gt;&amp;quot;lastv-favs.json&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -d &lt;span class=&quot;nv&quot;&gt;list_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$list_array&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -d &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$size&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$query&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;terms&amp;quot;&lt;/span&gt; :
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;release.distribution&amp;quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Template-Toolkit&amp;quot;&lt;/span&gt;, ... &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;filter&amp;quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;release.status&amp;quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&amp;quot;latest&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;fields&amp;quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;distribution&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;   : 13
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We’re now ready to run our query:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ lfv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl -XPOST &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://api.metacpan.org/v0/release/_search&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
             -d &lt;span class=&quot;s2&quot;&gt;&amp;quot;$query&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;teepee -I &lt;span class=&quot;s2&quot;&gt;&amp;quot;$lfv&amp;quot;&lt;/span&gt; -T &lt;span class=&quot;s1&quot;&gt;&amp;#39;My favorites with latest version:&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[%&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    for my $hit (A &amp;quot;hits.hits&amp;quot;) {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        my $f = $hit-&amp;gt;{fields};&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        print &amp;quot;- $f-&amp;gt;{distribution} ($f-&amp;gt;{version})\n&amp;quot;;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;%]&amp;#39;&lt;/span&gt;
My favorites with latest version:
- Path-Class &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.35&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
- Pod-Markdown &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3.003&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
- GraphViz &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.19&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
- WWW-Mechanize-Shell &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.55&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
- Parse-RecDescent &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.967013&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
- Moo &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.000002&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
- WWW-Mechanize &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.75&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
- JSON &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.90&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
- libwww-perl &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6.15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
- Template-Toolkit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.26&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
- Pinto &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.11&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
- Dist-Zilla &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5.042&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
- Dancer &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.3202&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;reshaping&quot;&gt;Reshaping&lt;/h2&gt;

&lt;p&gt;In our last example, we extracted information from the first query into
two variables, then used them to build up a new template for our next
query. This surely works, but might become cumbersome (and intensive in
terms of process-calling) if you want to take more than a handful of
values.&lt;/p&gt;

&lt;p&gt;If you’re going to use &lt;code&gt;teepee&lt;/code&gt; on the data, like in our example, an
efficient alternative is to build up a new JSON/YAML data structure out
of your input data:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ reshaped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;teepee -I &lt;span class=&quot;s2&quot;&gt;&amp;quot;$favs&amp;quot;&lt;/span&gt; -NT &lt;span class=&quot;s1&quot;&gt;&amp;#39;---&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;size: [% hits.total %]&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;distros:&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[% for my $hit (A &amp;quot;hits.hits&amp;quot;) { %]   - &amp;quot;[%=&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        $hit-&amp;gt;{fields}{distribution} %]&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;[% } %]&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$reshaped&amp;quot;&lt;/span&gt;
---
size: 13
distros:
   - &lt;span class=&quot;s2&quot;&gt;&amp;quot;Template-Toolkit&amp;quot;&lt;/span&gt;
   - &lt;span class=&quot;s2&quot;&gt;&amp;quot;Pod-Markdown&amp;quot;&lt;/span&gt;
   - &lt;span class=&quot;s2&quot;&gt;&amp;quot;GraphViz&amp;quot;&lt;/span&gt;
   - &lt;span class=&quot;s2&quot;&gt;&amp;quot;Pinto&amp;quot;&lt;/span&gt;
   - &lt;span class=&quot;s2&quot;&gt;&amp;quot;Parse-RecDescent&amp;quot;&lt;/span&gt;
   - &lt;span class=&quot;s2&quot;&gt;&amp;quot;Path-Class&amp;quot;&lt;/span&gt;
   - &lt;span class=&quot;s2&quot;&gt;&amp;quot;Dancer&amp;quot;&lt;/span&gt;
   - &lt;span class=&quot;s2&quot;&gt;&amp;quot;JSON&amp;quot;&lt;/span&gt;
   - &lt;span class=&quot;s2&quot;&gt;&amp;quot;WWW-Mechanize&amp;quot;&lt;/span&gt;
   - &lt;span class=&quot;s2&quot;&gt;&amp;quot;Dist-Zilla&amp;quot;&lt;/span&gt;
   - &lt;span class=&quot;s2&quot;&gt;&amp;quot;WWW-Mechanize-Shell&amp;quot;&lt;/span&gt;
   - &lt;span class=&quot;s2&quot;&gt;&amp;quot;libwww-perl&amp;quot;&lt;/span&gt;
   - &lt;span class=&quot;s2&quot;&gt;&amp;quot;Moo&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We will have to modify our template at this point, but it’s also cleaner
to expect an array as input and handle the shaping in the template
itself. Here’s our second take at the template (we will call the file
&lt;code&gt;lastv-favs-2.json&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &quot;query&quot; : {
        &quot;terms&quot; : {
            &quot;release.distribution&quot; : [ [%
                print join &quot;, &quot;, map { qq{&quot;$_&quot;} } A &#39;distros&#39;;
            %] ]
        }
    },
    &quot;filter&quot; : { &quot;term&quot; : { &quot;release.status&quot; : &quot;latest&quot; } },
    &quot;fields&quot; : [ &quot;distribution&quot;, &quot;version&quot; ],
    &quot;size&quot;   : [% size %]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The query then becomes:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;teepee -t &lt;span class=&quot;s2&quot;&gt;&amp;quot;lastv-favs-2.json&amp;quot;&lt;/span&gt; -Y&lt;span class=&quot;s2&quot;&gt;&amp;quot;$reshaped&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;with similar results as before.&lt;/p&gt;

&lt;p&gt;This reshaping does not necessarily have to be applied for generating
new YAML or JSON though. If you’re still interested into getting values
into shell variables, you can prepare the right text and then &lt;code&gt;eval&lt;/code&gt; it,
to get all values in one shot:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;teepee -I &lt;span class=&quot;s2&quot;&gt;&amp;quot;$favs&amp;quot;&lt;/span&gt; -T &lt;span class=&quot;s1&quot;&gt;&amp;#39;list_array=[%=&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    my $list = join &amp;quot;, &amp;quot;, map { qq[&amp;quot;$_-&amp;gt;{fields}{distribution}&amp;quot;]}&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        A &amp;quot;hits.hits&amp;quot;;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    quotemeta(&amp;quot;[ $list ]&amp;quot;);&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;%]&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;size=[%= quotemeta(V &amp;quot;hits.total&amp;quot; ) %]&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$variables&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;size: $size - array: $list_array&amp;quot;&lt;/span&gt;
size: &lt;span class=&quot;m&quot;&gt;13&lt;/span&gt; - array: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Template-Toolkit&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;Pod-Markdown&amp;quot;&lt;/span&gt;, ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Don’t use &lt;code&gt;eval&lt;/code&gt; unless you’re 200% sure about what you are
doing!&lt;/strong&gt; To be on the safe side, either avoid this technique
completely, or use it only on data you trust.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pretty-printing-and-isolating&quot;&gt;Pretty-Printing and Isolating&lt;/h2&gt;

&lt;p&gt;Some APIs choose to return pretty-printed data, trading some space for
ease of use. Other ones go for compactness, and leave you the &lt;em&gt;burden&lt;/em&gt;
to pretty print the response if you need to read it (as a human).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;teepee&lt;/code&gt; allows you to re-print your input data either in JSON or YAML
format. This also comes handy if you want to trasform from one to the
other, by the way; so you might have data that is already
pretty-printed, and re-pretty-print it into another format (I usually
find YAML a better reading experience).&lt;/p&gt;

&lt;p&gt;Pretty-printing is done through a couple of functions that are available
in the templates; unsurprisingly, these functions are called &lt;code&gt;YAML&lt;/code&gt; and
&lt;code&gt;JSON&lt;/code&gt;. This is how it would be done:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ ap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://www.astro-phys.com/api/de406&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ mars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;s2&quot;&gt;&amp;quot;$ap/coefficients?date=1972-11-9&amp;amp;bodies=mars&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$mars&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;: 2441630.5, &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;chebyshev&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;results&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mars&amp;quot;&lt;/span&gt;: ...

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;teepee -J &lt;span class=&quot;s2&quot;&gt;&amp;quot;$mars&amp;quot;&lt;/span&gt; -T &lt;span class=&quot;s1&quot;&gt;&amp;#39;[%= YAML %]&amp;#39;&lt;/span&gt;
---
date: 2441630.5
results:
  mars:
    coefficients:
      -
        - -221246363.667206
        - 26761105.8067001
        ...
      -
        - -80259893.9503651
        - -50770737.7568579
        ...
    end: 2441680.5
    start: 2441616.5
&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: chebyshev
unit: km&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;JSON&lt;/code&gt; would work similarly. This construct is so handy that it made
sense to provide a slightly shorter way to type it. In particular,
option &lt;code&gt;-F&lt;/code&gt; provides a way to specify a template without too much
boilerplate, so the following two calls are actually equivalent:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;teepee -Fwhatever ...
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;teepee -T &lt;span class=&quot;s1&quot;&gt;&amp;#39;[%= whatever %]&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hence, pretty-printing in YAML is as simple as this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;teepee -FYAML -J &lt;span class=&quot;s2&quot;&gt;&amp;quot;$mars&amp;quot;&lt;/span&gt;
---
date: 2441630.5
results:
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The two functions can also take an optional parameter, namely a
reference to a data structure. Guess what? They will pretty-print that!
So, if we are interested only in the &lt;code&gt;results.mars.coefficients&lt;/code&gt; we can
isolate them as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ coeffs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;teepee -F&lt;span class=&quot;s1&quot;&gt;&amp;#39;YAML V &amp;quot;results.mars.coefficients&amp;quot;&amp;#39;&lt;/span&gt; -J&lt;span class=&quot;s2&quot;&gt;&amp;quot;$mars&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$coeffs&amp;quot;&lt;/span&gt;
---
-
  - -221246363.667206
  - 26761105.8067001
  - 4016544.02022364
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This can be useful if you’re only interested into a subsection of a
complex response, because you can isolate that subsection into a shell
variable (like &lt;code&gt;$coeffs&lt;/code&gt; in our example above) and then run &lt;code&gt;teepee&lt;/code&gt;
over that variable with shorter paths.&lt;/p&gt;

&lt;h2 id=&quot;a-few-examples&quot;&gt;A Few Examples&lt;/h2&gt;

&lt;p&gt;Here are a few examples of consuming APIs from the shell with the help
of &lt;code&gt;teepee&lt;/code&gt;… I hope they will inspire you!&lt;/p&gt;

&lt;h3 id=&quot;whats-the-weather-like&quot;&gt;What’s the Weather Like?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://openweathermap.org/&quot;&gt;OpenWeatherMap&lt;/a&gt; &lt;em&gt;delivers 1 billion&lt;/em&gt;
[weather] &lt;em&gt;forecasts per day&lt;/em&gt;. It should be able to cope with a few
requests from us!&lt;/p&gt;

&lt;p&gt;To use it, you will need to register (freely) at &lt;a href=&quot;http://home.openweathermap.org/users/sign_up&quot;&gt;the registration
page&lt;/a&gt; and get an API key.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yes, I know that the examples in the &lt;a href=&quot;http://openweathermap.org/current&quot;&gt;Current Weather
  Data&lt;/a&gt; page work fine and include a
  valid API key, but you SHOULD get your own key to be fair!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Every API call is a &lt;code&gt;GET&lt;/code&gt; and parameters are passed in the URI, encoded.
One of them is the API key, so we’ll start with the following
definition:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;YOUR-API-KEY-HERE&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Accessing the latest weather data is as simple as sending a query to
&lt;code&gt;http://api.openweathermap.org/data/2.5/weather?appid=$key&lt;/code&gt;. Response
parameters are explained &lt;a href=&quot;http://openweathermap.org/current&quot;&gt;here&lt;/a&gt;. We
will format a little report according to the following template (saved
as &lt;code&gt;weather.tmpl&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[%
    # convenience function for cutting excess decimals
    sub fmt { return sprintf &#39;%.1lf&#39;, shift; }
%]Hi! Here&#39;s some facts about [% name %] [[% sys.country %]]:
  - position is about latitude [% coord.lat %]N and longitude [%
      coord.lon %]E
  - [% weather.0.main %]: [% weather.0.description %]
  - temperature is [%= fmt(V(&#39;main.temp&#39;) - 273.15) %]°C ([%=
      fmt(V(&#39;main.temp_min&#39;) - V(&#39;main.temp&#39;)) %]/+[%=
      fmt(V(&#39;main.temp_max&#39;) - V(&#39;main.temp&#39;)) %]°C)
  - humidity is [% main.humidity %]%
  - last sunrise was on [%= scalar localtime V(&#39;sys.sunrise&#39;) %]
  - last sunset  was on [%= scalar localtime V(&#39;sys.sunset&#39;) %]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we’re ready to get some facts about Roma, my city:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ owm_weather_api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://api.openweathermap.org/data/2.5/weather&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;s2&quot;&gt;&amp;quot;$owm_weather_api?appid=$key&amp;amp;q=Roma,it&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; teepee -t weather.tmpl
Hi! Here are some facts about Roma &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IT&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;:
  - position is about latitude 41.89N and longitude 12.48E
  - Clear: Sky is Clear
  - temperature is 8.1°C &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-2.1/+0.9°C&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  - humidity is 87%
  - last sunrise was on Tue Dec &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; 07:31:04 2015
  - last sunset  was on Tue Dec &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; 16:39:56 2015&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Not exactly hot… but lovely for this time of the year in the night,
isn’t it? Let’s look how it will go in the coming days, using
&lt;code&gt;forecast-daily.tmpl&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[%
    sub fmt { sprintf &#39;%.1lf&#39;, shift }
%]Forecast for [% city.name %] [[% city.country %]] ([%
        city.coord.lat %]N, [% city.coord.lon %]E):[%
    for my $day (A &#39;list&#39;) {
%]
- [%= (my $d = scalar localtime $day-&amp;gt;{dt}) =~ s{\d\d:.*}{}mxs;
    $d; %]: [%=
        fmt $day-&amp;gt;{temp}{min} %]°C/[%= fmt $day-&amp;gt;{temp}{max} %]°C [%=
        $day-&amp;gt;{weather}[0]{main} %] ([%=
        $day-&amp;gt;{weather}[0]{description} %])[%
    }
%]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the following query:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ owm_fd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://api.openweathermap.org/data/2.5/forecast/daily&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;s2&quot;&gt;&amp;quot;$owm_fd?appid=$key&amp;amp;q=Roma,it&amp;amp;units=metric&amp;amp;cnt=16&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; teepee -t forecast-daily.tmpl
Forecast &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; Roma &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IT&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;41.894741N, 12.4839E&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
  - Tue Dec &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; : 7.3°C/7.8°C Clear &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sky is clear&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  - Wed Dec &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt; : 5.8°C/12.6°C Clouds &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;few clouds&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  - Thu Dec &lt;span class=&quot;m&quot;&gt;17&lt;/span&gt; : 4.2°C/11.4°C Clear &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sky is clear&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  - Fri Dec &lt;span class=&quot;m&quot;&gt;18&lt;/span&gt; : 8.4°C/13.3°C Rain &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;light rain&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  - Sat Dec &lt;span class=&quot;m&quot;&gt;19&lt;/span&gt; : 9.9°C/11.5°C Rain &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;moderate rain&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  - Sun Dec &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt; : 6.2°C/12.1°C Clear &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sky is clear&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  - Mon Dec &lt;span class=&quot;m&quot;&gt;21&lt;/span&gt; : 7.0°C/13.4°C Rain &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;light rain&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  - Tue Dec &lt;span class=&quot;m&quot;&gt;22&lt;/span&gt; : 10.0°C/13.2°C Rain &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;light rain&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  - Wed Dec &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt; : 13.5°C/15.2°C Rain &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;light rain&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  - Thu Dec &lt;span class=&quot;m&quot;&gt;24&lt;/span&gt; : 9.2°C/15.4°C Clear &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sky is clear&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  - Fri Dec &lt;span class=&quot;m&quot;&gt;25&lt;/span&gt; : 7.9°C/14.5°C Clear &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sky is clear&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  - Sat Dec &lt;span class=&quot;m&quot;&gt;26&lt;/span&gt; : 10.9°C/14.7°C Rain &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;light rain&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  - Sun Dec &lt;span class=&quot;m&quot;&gt;27&lt;/span&gt; : 9.2°C/14.2°C Rain &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;light rain&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  - Mon Dec &lt;span class=&quot;m&quot;&gt;28&lt;/span&gt; : 7.2°C/13.6°C Rain &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;light rain&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  - Tue Dec &lt;span class=&quot;m&quot;&gt;29&lt;/span&gt; : 10.0°C/13.4°C Rain &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;light rain&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  - Wed Dec &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt; : 10.6°C/14.4°C Rain &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;light rain&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A little too rainy for my taste… but it’s life!&lt;/p&gt;

&lt;h3 id=&quot;where-can-i-go-from&quot;&gt;Where Can I Go From…&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/&quot;&gt;Wikipedia&lt;/a&gt; is the biggest online
encyclopedia, and can be a real time drag as you go through the pages,
following links over links (even only internal).&lt;/p&gt;

&lt;p&gt;For example… how many links are contained in a few pages, e.g. about
&lt;code&gt;Perl&lt;/code&gt;, &lt;code&gt;Bash&lt;/code&gt; or &lt;code&gt;Pearl Jam&lt;/code&gt;? Let’s see:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ wp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;https://en.wikipedia.org/w/api.php&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ wpq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$wp?action=query&amp;amp;prop=links&amp;amp;format=json&amp;amp;pllimit=500&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; title in &lt;span class=&quot;s1&quot;&gt;&amp;#39;Perl&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Bash&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Pearl_Jam&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    curl -s &lt;span class=&quot;s2&quot;&gt;&amp;quot;$wpq&amp;amp;titles=$title&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; teepee -nT &lt;span class=&quot;s1&quot;&gt;&amp;#39;[%=&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            my ($d) = HV &amp;quot;query.pages&amp;quot;;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            my $n = scalar @{$d-&amp;gt;{links}};&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            &amp;quot;$d-&amp;gt;{title}: $n&amp;quot;;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;          %]&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
Perl: 450
Bash: 14
Pearl Jam: 455&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Well… it seems that there is a &lt;em&gt;slight&lt;/em&gt; better chance to get lost
reading about Pearl Jam than about Perl, but they’re almost there
together!&lt;/p&gt;

&lt;h3 id=&quot;whats-the-last-xkcd-strip&quot;&gt;What’s the Last xkcd Strip?&lt;/h3&gt;

&lt;p&gt;I hope you love &lt;a href=&quot;http://xkcd.com/&quot;&gt;xkcd&lt;/a&gt; as much as I do. You’re in the
terminal and you would like to know what’s the last strip, just to see
if there’s anything new…&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://xkcd.com/info.0.json &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; teepee -n &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -T &lt;span class=&quot;s1&quot;&gt;&amp;#39;#[%num%] &amp;quot;[%safe_title%]&amp;quot;, [%year%]-[%month%]-[%day%]&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#1616 &amp;quot;Lunch&amp;quot;, 2015-12-14&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you call it you don’t get too much data, e.g.:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ xkcd_last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl http://xkcd.com/info.0.json&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$xkcd_last&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;month&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;12&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;num&amp;quot;&lt;/span&gt;: 1616, &lt;span class=&quot;s2&quot;&gt;&amp;quot;link&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;year&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;2015&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;news&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;safe_title&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;Lunch&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;transcript&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;alt&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;I&amp;#39;m trying to be healthier, so after I eat this brick of cheese, I&amp;#39;ll have a spoonful of grease-soaked vegetables.&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;img&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;http:\/\/imgs.xkcd.com\/comics\/lunch.png&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;Lunch&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;day&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;14&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Well… it’s not that readable, is it? All that scrolling to the
right… This can use some pretty printing, e.g. in YAML:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;teepee -J &lt;span class=&quot;s2&quot;&gt;&amp;quot;$xkcd_last&amp;quot;&lt;/span&gt; -FYAML
---
alt: &lt;span class=&quot;s2&quot;&gt;&amp;quot;I&amp;#39;m trying to be healthier, so after I eat this brick of cheese, I&amp;#39;ll have a spoonful of grease-soaked vegetables.&amp;quot;&lt;/span&gt;
day: &lt;span class=&quot;s1&quot;&gt;&amp;#39;14&amp;#39;&lt;/span&gt;
img: http://imgs.xkcd.com/comics/lunch.png
link: &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
month: &lt;span class=&quot;s1&quot;&gt;&amp;#39;12&amp;#39;&lt;/span&gt;
news: &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
num: 1616
safe_title: Lunch
title: Lunch
transcript: &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
year: &lt;span class=&quot;s1&quot;&gt;&amp;#39;2015&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;and-so-on&quot;&gt;… And So On…&lt;/h3&gt;

&lt;p&gt;I hope you got your feet wet at this point. Be sure to go (again)
through the examples in section &lt;a href=&quot;#quick&quot;&gt;Quick! Show Me Something!&lt;/a&gt;,
they can be a bit more understandable at this point!&lt;/p&gt;

&lt;h2 id=&quot;times-up&quot;&gt;Time’s Up!&lt;/h2&gt;

&lt;p&gt;If you made it to the end of this article… congratulations! I hope you
will consider &lt;code&gt;teepee&lt;/code&gt; as a tool worth using in your next shell project.&lt;/p&gt;

&lt;p&gt;If you want to play a bit, a good entry point for finding out APIs to do
some testing is &lt;a href=&quot;http://www.programmableweb.com/&quot;&gt;Programmable Web&lt;/a&gt;,
although for Perl enthusiast also &lt;a href=&quot;https://metacpan.org/&quot;&gt;meta::cpan&lt;/a&gt; is
worth a look. Some good starting points that do not require registration
are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://metacpan.org/&quot;&gt;meta::cpan&lt;/a&gt; is a fast growing (feature-wise)
search tool for CPAN. &lt;a href=&quot;https://github.com/CPAN-API/cpan-api/blob/master/docs/API-docs.md&quot;&gt;meta::cpan
APIs&lt;/a&gt;
(&lt;a href=&quot;http://api.metacpan.org/&quot;&gt;entry point&lt;/a&gt;) allow programmale access to
the database.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://musicbrainz.org/&quot;&gt;MusicBrainz&lt;/a&gt; is an open music encyclopedia
that collects music metadata and makes it available to the public.
&lt;a href=&quot;http://musicbrainz.org/doc/Development&quot;&gt;Development&lt;/a&gt; explains how to
consume their APIs, with details on the &lt;a href=&quot;http://musicbrainz.org/doc/Development/JSON_Web_Service&quot;&gt;JSON
interface&lt;/a&gt;.
(&lt;a href=&quot;http://musicbrainz.org/ws/2/&quot;&gt;Entry point&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://hacktheuniverse.github.io/star-api/&quot;&gt;Star API&lt;/a&gt; &lt;em&gt;provides access
the Digital Universe Data set&lt;/em&gt;. (&lt;a href=&quot;http://star-api.herokuapp.com/api/v1/stars&quot;&gt;Entry
point&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://openweathermap.org/&quot;&gt;OpenWeatherMap&lt;/a&gt; &lt;em&gt;delivers 1 billion
forecasts per day&lt;/em&gt;. API description is
&lt;a href=&quot;http://openweathermap.org/api&quot;&gt;here&lt;/a&gt;. Well, you’re supposed to
register actually, as already written before…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org&quot;&gt;Wikipedia&lt;/a&gt; is a wonderful resource for
information… although you always have to remember that it’s not
fully peer-reviewed. It has an &lt;a href=&quot;https://www.mediawiki.org/wiki/API:Tutorial&quot;&gt;API
Tutorial&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://xkcd.com&quot;&gt;xkcd&lt;/a&gt; is &lt;em&gt;A webcomic of romance, sarcasm, math, and
language&lt;/em&gt;. Very funny. API hints &lt;a href=&quot;https://xkcd.com/json.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many more… including your very own API for the next-decade
killer application!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:credits&quot;&gt;

      &lt;p&gt;Photo credits: &lt;a href=&quot;http://www.loc.gov/pictures/item/95522788/&quot;&gt;Teepees on the
Columbia&lt;/a&gt;
by Ralph Irving Gifford, &lt;a href=&quot;http://www.loc.gov/pictures/item/95500540/&quot;&gt;Ute
Pagre&lt;/a&gt; by H.H. Tammen. &lt;a href=&quot;#fnref:credits&quot; class=&quot;reversefootnote&quot;&gt;&amp;#x2934;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:partially&quot;&gt;
      &lt;p&gt;You are still supposed to know how your data are &lt;em&gt;shaped&lt;/em&gt;,
although you might not know where the different elements in an array
are placed. &lt;a href=&quot;#fnref:partially&quot; class=&quot;reversefootnote&quot;&gt;&amp;#x2934;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/teepee/&quot;&gt;TeePee&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on December 27, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Changes, nags and git hooks]]></title>
  <link rel="alternate" type="text/html" href="/changes-nags-and-git-hooks/" />
  <id>/changes-nags-and-git-hooks</id>
  <published>2015-09-01T00:00:00+02:00</published>
  <updated>2015-09-01T00:00:00+02:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;I use &lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla&quot;&gt;Dist::Zilla&lt;/a&gt; with a few plugins, including &lt;code&gt;NextRelease&lt;/code&gt; and
&lt;code&gt;Git::Check&lt;/code&gt;. I was always nagged by the fact that committing actually
left the &lt;code&gt;Changes&lt;/code&gt; file uncommitted… until now.&lt;/p&gt;

&lt;p&gt;First of all, I discovered that there was no reason why I should have to
be nagged at all. The &lt;a href=&quot;http://dzil.org/tutorial/vcs-git.html&quot;&gt;documentation&lt;/a&gt; about
&lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla&quot;&gt;Dist::Zilla&lt;/a&gt; is pretty clear that both plugins run at the same stage, so
it’s only a matter of proper ordering&lt;sup id=&quot;fnref:impatient&quot;&gt;&lt;a href=&quot;#fn:impatient&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Guess what? My &lt;code&gt;dzil&lt;/code&gt;
file always has the &lt;em&gt;wrong&lt;/em&gt; order!&lt;/p&gt;

&lt;p&gt;The funny thing is that today I had some kind of epiphany and I
&lt;strong&gt;understood&lt;/strong&gt; why this thing was nagging me. It &lt;strong&gt;was supposed&lt;/strong&gt; to do
so! It &lt;strong&gt;was designed&lt;/strong&gt; to do so! In this way, I would be nagged to
actually populate the Changes file with something meaningful before doing
a release, right?&lt;/p&gt;

&lt;p&gt;Now, of course this was not the intended behaviour (again, see
&lt;a href=&quot;http://dzil.org/tutorial/vcs-git.html&quot;&gt;here&lt;/a&gt;) and there are better ways to ensure that &lt;code&gt;Changes&lt;/code&gt; is
populated in some meaningful way before doing a release
(&lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla::Plugin::CheckChangesHasContent&quot;&gt;Dist::Zilla::Plugin::CheckChangesHasContent&lt;/a&gt; being my new
plugin of election for this task), but in the excitement for my epiphany I
also figured that &lt;em&gt;presto!&lt;/em&gt;, I need a &lt;a href=&quot;http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks&quot;&gt;git&lt;/a&gt; &lt;a href=&quot;http://githooks.com/&quot;&gt;hook&lt;/a&gt;
to ensure that I don’t commit &lt;code&gt;Changes&lt;/code&gt; without intention (yes, I tend to
&lt;code&gt;git commit -a&lt;/code&gt; a bit too much).&lt;/p&gt;

&lt;p&gt;This is the &lt;code&gt;pre-commit&lt;/code&gt; hook that I came out with:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Changes&amp;#39;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;seen_target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;omode nmode ohash nhash changetype filename&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$filename&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$target&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;seen_target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$skip&lt;/span&gt; -ne &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# skip the first item only&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$seen_target&lt;/span&gt; -eq &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ERROR - &amp;#39;$target&amp;#39; MUST be committed alone&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
   &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &amp;lt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;git diff-index --cached HEAD&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, after the real &lt;em&gt;enlightenment&lt;/em&gt; came (i.e. finding
&lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla::Plugin::CheckChangesHasContent&quot;&gt;DZP::CheckChangesHasContent&lt;/a&gt;) this is obviously not needed any
more… but I’ll keep it around should the need arise.&lt;/p&gt;

&lt;p&gt;While using &lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla::Plugin::CheckChangesHasContent&quot;&gt;DZP::CheckChangesHasContent&lt;/a&gt;, I figured that the
first addition of some &lt;em&gt;change&lt;/em&gt; to the file would spoil all my efforts to
remember about &lt;code&gt;Changes&lt;/code&gt; before the release. My hands were much faster
than my brains, again: I was about to propose a patch for the plugin when
I simply read the documentation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It looks for an unindented line starting with the version to be
released. It then looks for any text from that line until the next
unindented line (or the end of the file), ignoring whitespace. […] If
you had nothing but whitespace between [them], the release would be
halted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, it is sufficient to add a &lt;strong&gt;non-indented&lt;/strong&gt; line immediately after the
&lt;code&gt;{{NEXT}}&lt;/code&gt; string to make sure the plugin will complain, e.g.:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{{NEXT}}
CHECK YOUR CHANGES AND REMOVE THIS LINE!
   - I did this
   - I did that

1.0  1972-11-09 07:45:00 Europe/Rome
   - Born&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now of course I would like that line to be added automatically… this
time, before forking the relevant plugin, I’ll try to think if there’s
some already available way to do that!&lt;/p&gt;

&lt;h2 id=&quot;update&quot;&gt;Update&lt;/h2&gt;

&lt;p&gt;There can be a workaround to obtain something very similar to
the above… It is sufficient to set the &lt;code&gt;format&lt;/code&gt; parameter of the
&lt;code&gt;NextRelease&lt;/code&gt; plugin to something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[NextRelease]
format = Changes for My::Module:%n%n%-9v %{yyyy-MM-dd HH:mm:ssZZZZZ VVVV}d%{ (TRIAL RELEASE)}T&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;i.e. the same format as the default one, but with some meaningful
introduction text (&lt;code&gt;Changes for...&lt;/code&gt; in our example, followed by two
newlines). In this way, the following &lt;code&gt;Changes&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{{NEXT}}
   - I did this
   - I did that

1.0  1972-11-09 07:45:00 Europe/Rome
   - Born&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;will generate this for the release package:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Changes for My::Module:

2.0  1990--11-09 07:45:00 Europe/Rome
   - I did this
   - I did that

1.0  1972-11-09 07:45:00 Europe/Rome
   - Born&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and will be updated into this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{{NEXT}}

Changes for My::Module:

2.0  1990--11-09 07:45:00 Europe/Rome
   - I did this
   - I did that

1.0  1972-11-09 07:45:00 Europe/Rome
   - Born&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, it will be sufficient to add new items &lt;em&gt;below the
introduction line&lt;/em&gt;, like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{{NEXT}}

Changes for My::Module:
   - This happened here
   - This happened there

2.0  1990--11-09 07:45:00 Europe/Rome
   - I did this
   - I did that

1.0  1972-11-09 07:45:00 Europe/Rome
   - Born&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;in order to &lt;em&gt;keep &lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla::Plugin::CheckChangesHasContent&quot;&gt;DZP::CheckChangesHasContent&lt;/a&gt; complain&lt;/em&gt; until
the intro line is removed from the file, like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{{NEXT}}
   - This happened here
   - This happened there

2.0  1990--11-09 07:45:00 Europe/Rome
   - I did this
   - I did that

1.0  1972-11-09 07:45:00 Europe/Rome
   - Born&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We’re ready for a new release now!&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:impatient&quot;&gt;
      &lt;p&gt;For those of you that are too lazy to click on the link and
read through the page, you are supposed to put &lt;code&gt;NextRelease&lt;/code&gt; before
&lt;code&gt;Git::Check&lt;/code&gt;. &lt;a href=&quot;#fnref:impatient&quot; class=&quot;reversefootnote&quot;&gt;&amp;#x2934;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/changes-nags-and-git-hooks/&quot;&gt;Changes, nags and git hooks&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on September 01, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Wrapper...l]]></title>
  <link rel="alternate" type="text/html" href="/wrapperl/" />
  <id>/wrapperl</id>
  <published>2015-04-26T00:00:00+02:00</published>
  <updated>2015-04-26T00:00:00+02:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;code&gt;wrapperl&lt;/code&gt; is a (Perl) program lets you wrap another Perl program
with some local-specific configurations.&lt;/p&gt;

&lt;p&gt;Why would you do this, e.g. as opposed to modifying the
&lt;em&gt;hash-bang&lt;/em&gt; line or setting &lt;code&gt;PERL5LIB&lt;/code&gt;, or calling the perl
executable directly? Well, lazyness of course, but also the fact
that in different environments the same program might need different
configurations, and changing those configurations possibly in many
little Perl programs quickly becomes an error-prone hassle.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wrapperl&lt;/code&gt; provides you with a consistent, minimal and easy to setup
way to concentrate local-specific configurations in
&lt;code&gt;wrapperl.env&lt;/code&gt; file, and be sure
that you will call your Perl program(s) with the right setup every time.&lt;/p&gt;

&lt;p&gt;This article contains only a brief extract from the documentation to
get your feet wet; you can find the whole thing on
&lt;a href=&quot;https://github.com/polettix/wrapperl&quot;&gt;the GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;installing&quot;&gt;Installing&lt;/h2&gt;

&lt;p&gt;Installion is easy: download &lt;code&gt;wrapperl&lt;/code&gt; from &lt;a href=&quot;https://raw.githubusercontent.com/polettix/wrapperl/master/wrapperl&quot;&gt;here&lt;/a&gt;
and put it somewhere in the environment(s) where you need it. It is not
necessary to put it in a directory in the &lt;code&gt;PATH&lt;/code&gt;, although it is
suggested in order to access all functionalities.&lt;/p&gt;

&lt;h2 id=&quot;a-complete-example&quot;&gt;A Complete Example&lt;/h2&gt;

&lt;p&gt;Sometimes an example is worth a thousands manuals.&lt;/p&gt;

&lt;h3 id=&quot;a-few-assumptions&quot;&gt;A few assumptions&lt;/h3&gt;

&lt;p&gt;Let’s make a few assumptions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you will write your program &lt;code&gt;prg.pl&lt;/code&gt;. If
you don’t even want to write one, you can copy and paste this:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env perl&lt;/span&gt;
print &lt;span class=&quot;s2&quot;&gt;&amp;quot;using perl &amp;#39;$^X&amp;#39;, \@INC contains:\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
print &lt;span class=&quot;s2&quot;&gt;&amp;quot;- &amp;#39;$_&amp;#39;\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; @INC&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;you do your coding in a development environment where:
    &lt;ul&gt;
      &lt;li&gt;you develop &lt;code&gt;prg.pl&lt;/code&gt; inside directory &lt;code&gt;/home/me/program&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;perl&lt;/code&gt; is located at &lt;code&gt;/home/me/perl/bin/perl&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;the libraries you need are stored in non-standard positions
  &lt;code&gt;/path/to/some/lib&lt;/code&gt; and &lt;code&gt;/path/to/another/lib&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;you deploy your program in a production environment with a different
setup, namely:
    &lt;ul&gt;
      &lt;li&gt;your program &lt;code&gt;prg.pl&lt;/code&gt; is deployed in directory &lt;code&gt;/app/program&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;perl&lt;/code&gt; is located at &lt;code&gt;/approved/perl/bin/perl&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;the libraries you need are all stored in &lt;code&gt;/approved/lib&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is what how you start in the development environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;me@devhost /home/me/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls -l
-rwxr-xr-x &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me &lt;span class=&quot;m&quot;&gt;74&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt; 22:28 prg.pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is what how you start in the production environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;me@production /app/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls -l
-rwxr-xr-x &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me &lt;span class=&quot;m&quot;&gt;74&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;25&lt;/span&gt; 20:51 prg.pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;step-1-symlink-to-wrapperl&quot;&gt;Step 1: symlink to &lt;code&gt;wrapperl&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In both environments, you create a symbolic link named &lt;code&gt;prg&lt;/code&gt;
pointing towards &lt;code&gt;wrapperl&lt;/code&gt;. The link is located inside the same
directory as &lt;code&gt;prg.pl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is what you end up with in the development environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;me@devhost /home/me/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls -l
lrwxrwxrwx &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me  &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt; 22:51 prg -&amp;gt; /home/me/bin/wrapperl
-rwxr-xr-x &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me &lt;span class=&quot;m&quot;&gt;74&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt; 22:28 prg.pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is what you have in the production environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;me@production /app/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls -l
lrwxrwxrwx &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me  &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;25&lt;/span&gt; 20:51 prg -&amp;gt; /usr/local/bin/wrapperl
-rwxr-xr-x &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me &lt;span class=&quot;m&quot;&gt;74&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;25&lt;/span&gt; 20:51 prg.pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;step-2-create-wrapperlenv-files&quot;&gt;Step 2: create &lt;code&gt;wrapperl.env&lt;/code&gt; files&lt;/h3&gt;

&lt;p&gt;In each environment (development and production in our example)
You create the &lt;code&gt;wrapperl.env&lt;/code&gt; file, which will hold configurations
that are specific for the environment it is located into.
We will put it in the same directory as &lt;code&gt;prg&lt;/code&gt; and &lt;code&gt;prg.pl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wrapperl.env&lt;/code&gt; is a standard Perl file, where you can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;set the environment variable &lt;code&gt;PERL5LIB&lt;/code&gt; to point towards the
library paths you need for loading your modules, and&lt;/li&gt;
  &lt;li&gt;set a specific perl binary by means of the &lt;code&gt;$PERL&lt;/code&gt; variable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For our example, this is what you end up with in the development
environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;me@devhost /home/me/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls -l
lrwxrwxrwx &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me  &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt; 22:51 prg -&amp;gt; /home/me/bin/wrapperl
-rwxr-xr-x &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me &lt;span class=&quot;m&quot;&gt;74&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt; 22:28 prg.pl
-rwxr-xr-x &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me &lt;span class=&quot;m&quot;&gt;90&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;22&lt;/span&gt; 12:35 wrapperl.env

me@devhost /home/me/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat wrapperl.env
&lt;span class=&quot;nv&quot;&gt;$ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;PERL5LIB&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/some/lib:/path/to/another/lib&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$PERL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/home/me/perl/bin/perl&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is what you have in the production environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;me@production /app/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls -l
lrwxrwxrwx &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me  &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;25&lt;/span&gt; 20:51 prg -&amp;gt; /usr/local/bin/wrapperl
-rwxr-xr-x &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me &lt;span class=&quot;m&quot;&gt;74&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;25&lt;/span&gt; 20:51 prg.pl
-rwxr-xr-x &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; me me &lt;span class=&quot;m&quot;&gt;66&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;25&lt;/span&gt; 20:51 wrapperl.env

me@production /app/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat wrapperl.env
&lt;span class=&quot;nv&quot;&gt;$ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;PERL5LIB&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/approved/lib&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$PERL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/approved/perl/bin/perl&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So yes, they two setups are mostly the same, except for the contents
of the &lt;code&gt;wrapperl.env&lt;/code&gt; files, each containing configurations that
are environment-specific.&lt;/p&gt;

&lt;h3 id=&quot;step-3-use-the-symlinks&quot;&gt;Step 3: use the symlinks&lt;/h3&gt;

&lt;p&gt;Now, you are ready to run your program in either environment, just
remember to execute the symbolic link to &lt;code&gt;wrapperl&lt;/code&gt; instead of your
program.&lt;/p&gt;

&lt;p&gt;In the development environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;me@devhost /home/me/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./prg
using perl &lt;span class=&quot;s1&quot;&gt;&amp;#39;/home/me/perl/bin/perl&amp;#39;&lt;/span&gt;, @INC contains:
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/another/lib/i686-linux&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/another/lib&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/some/lib/i686-linux&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/some/lib&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/home/me/perl/lib/site_perl/5.18.1/i686-linux&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/home/me/perl/lib/site_perl/5.18.1&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/home/me/perl/lib/5.18.1/i686-linux&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/home/me/perl/lib/5.18.1&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the production environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;me@production /app/program&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./prg
using perl &lt;span class=&quot;s1&quot;&gt;&amp;#39;/approved/perl/bin/perl&amp;#39;&lt;/span&gt;, @INC contains:
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/approved/lib/i686-linux&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/approved/lib&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/approved/perl/lib/site_perl/5.18.1/i686-linux&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/approved/perl/lib/site_perl/5.18.1&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/approved/perl/lib/5.18.1/i686-linux&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;/approved/perl/lib/5.18.1&amp;#39;&lt;/span&gt;
- &lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;can-you-path&quot;&gt;Can you &lt;code&gt;PATH&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;If you can put &lt;code&gt;wrapperl&lt;/code&gt; somewhere in the path (or in the same
location in every environment), you can even spare the symbolic
link. Just point the &lt;em&gt;hash-bang&lt;/em&gt; to &lt;code&gt;wrapperl&lt;/code&gt; and you’re done:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env wrapperl&lt;/span&gt;
print &lt;span class=&quot;s2&quot;&gt;&amp;quot;using perl &amp;#39;$^X&amp;#39;, \@INC contains:\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
print &lt;span class=&quot;s2&quot;&gt;&amp;quot;- &amp;#39;$_&amp;#39;\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; @INC&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As an added bonus of this approach, you can even name the program
whatever you like!&lt;/p&gt;

&lt;h2 id=&quot;where-do-we-go-from-here&quot;&gt;Where Do We Go From Here?&lt;/h2&gt;

&lt;p&gt;I can’t say that we have only scratched the surface, because the
example above covers the main use case for &lt;code&gt;wrapperl&lt;/code&gt;. On the other
hand, it is true that it can offer more, namely:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an easy way to call &lt;code&gt;perl&lt;/code&gt; based on the configurations found
in &lt;code&gt;wrapperl.env&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;an easy way to call &lt;code&gt;perldoc&lt;/code&gt; in a similar way, which of course
allows you to access the documentation of the modules installed
in the local libraries&lt;/li&gt;
  &lt;li&gt;a way to figure out which &lt;code&gt;wrapperl.env&lt;/code&gt; file is in use for a
specific symlink&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and probably something more. You can read the full documentation
&lt;a href=&quot;http://wrapperl.polettix.it&quot;&gt;here&lt;/a&gt; and peruse/fork the code repository
at &lt;a href=&quot;https://github.com/polettix/wrapperl&quot;&gt;wrapperl’s GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For now… That’s all folks!&lt;/p&gt;

&lt;h2 id=&quot;updates&quot;&gt;Updates&lt;/h2&gt;

&lt;p&gt;Added section &lt;em&gt;Can you PATH?&lt;/em&gt; on 2015-04-26.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/wrapperl/&quot;&gt;Wrapper...l&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on April 26, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Gerrit import - the hard way]]></title>
  <link rel="alternate" type="text/html" href="/gerrit-import-the-hard-way/" />
  <id>/gerrit-import-the-hard-way</id>
  <published>2015-03-22T00:00:00+01:00</published>
  <updated>2015-03-22T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;What if you started developing a tool using &lt;a href=&quot;http://www.git-scm.com/&quot;&gt;git&lt;/a&gt;, and after 400+
commits someone tells you to import it into a &lt;a href=&quot;https://code.google.com/p/gerrit/&quot;&gt;Gerrit&lt;/a&gt;-based
central repository where you barely have a bit for pushing
proposed changes? Well… it’s possible!&lt;/p&gt;

&lt;h2 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h2&gt;

&lt;p&gt;Let’s give things names:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;git-repo&lt;/em&gt; is the original repo you used so far. It might even be your
local copy of the code in your computer, this does not affect the test;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;gerrit-origin&lt;/em&gt; is the Fort-Knox central repository where you can push
proposed changes&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;gerrit-local&lt;/em&gt; is your humble local copy of &lt;em&gt;gerrit-origin&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are few assumptions that will make you decide whether it’s
worth reading on or not:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;you have &lt;em&gt;git-repo&lt;/em&gt; with a branch &lt;code&gt;source&lt;/code&gt; containing the commits you
want to push into &lt;em&gt;gerrit-origin&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;you are provided with means to access &lt;em&gt;gerrit-origin&lt;/em&gt; (i.e. clone it
and eventually push to it) and a branch &lt;code&gt;destination&lt;/code&gt; to push your
commits;&lt;/li&gt;
  &lt;li&gt;you want to preserve history, so each commit in the branch of &lt;em&gt;git-repo&lt;/em&gt;
will have to end up in a commit in &lt;em&gt;gerrit-origin&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;you only have a commit bit in &lt;em&gt;gerrit-origin&lt;/em&gt;, i.e. you have the right
to do a &lt;code&gt;git push origin HEAD:refs/for/master&lt;/code&gt; (see
&lt;a href=&quot;https://gerrit-documentation.storage.googleapis.com/Documentation/2.11/intro-quick.html#_creating_the_review&quot;&gt;Gerrit documentation&lt;/a&gt;) and hope that someone will
be so kind as to accept those changes, but nothing fancier.&lt;/li&gt;
  &lt;li&gt;this will be your first import of some consistent history, from that
point in time on you will use &lt;em&gt;gerrit-local&lt;/em&gt; and forget about
&lt;em&gt;git-repo&lt;/em&gt; (i.e. you will definitely jump on the &lt;a href=&quot;https://code.google.com/p/gerrit/&quot;&gt;Gerrit&lt;/a&gt; carriage for
this development).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We’ll see later what you can do if some of the above do not apply… you
lucky!&lt;/p&gt;

&lt;h2 id=&quot;assumptions-are-right&quot;&gt;Assumptions Are Right!&lt;/h2&gt;

&lt;p&gt;So the assumptions are right… let’s proceed in order. This is what we
are going to do (you’ll notice that &lt;a href=&quot;https://code.google.com/p/gerrit/&quot;&gt;Gerrit&lt;/a&gt; is somehow very fussy and
you will have to do a lot of work to make it happy):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;clone the &lt;em&gt;gerrit-origin&lt;/em&gt; into a local copy &lt;em&gt;gerrit-local&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;get the commits from branch &lt;code&gt;source&lt;/code&gt; in &lt;em&gt;git-repo&lt;/em&gt; into branch
&lt;code&gt;intermediate&lt;/code&gt; in &lt;em&gt;gerrit-local&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;adjust the imported commits in &lt;em&gt;gerrit-local&lt;/em&gt; to match the rules
set in &lt;em&gt;gerrit-origin&lt;/em&gt;. E.g. you might want to modify the committer’s
name or email to match what is set in &lt;em&gt;gerrit-origin&lt;/em&gt; in case you
saved your commits with an email address and you want to push
commits with another email;&lt;/li&gt;
  &lt;li&gt;add a ‘Commit-Id` to each commit message (or &lt;em&gt;gerrit-origin&lt;/em&gt; will
complain);&lt;/li&gt;
  &lt;li&gt;rebase &lt;code&gt;intermediate&lt;/code&gt; to &lt;code&gt;destination&lt;/code&gt;, so that &lt;em&gt;gerrit-origin&lt;/em&gt; will
see them as acceptable;&lt;/li&gt;
  &lt;li&gt;push to &lt;em&gt;gerrit-origin&lt;/em&gt; and cross fingers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cloning-the-repository&quot;&gt;Cloning the repository&lt;/h3&gt;

&lt;p&gt;First thing to do is to create &lt;em&gt;gerrit-local&lt;/em&gt; cloning &lt;em&gt;gerrit-origin&lt;/em&gt;.
We will assume that &lt;em&gt;gerrit-origin&lt;/em&gt; is at:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh://gerrithost:29418/GerritRepo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and that you want to clone it into &lt;code&gt;/path/to/GerritRepo&lt;/code&gt; so the clone
will be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /path/to
git clone ssh://gerrithost:29418/GerritRepo.git GerritRepo
cd GerritRepo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will provide you a fresh copy of the repository, but it’s still
not sufficient for setting up your &lt;a href=&quot;https://code.google.com/p/gerrit/&quot;&gt;Gerrit&lt;/a&gt; clone properly. Every time
you have to do a push, in fact, you will have to include a &lt;code&gt;Commit-Id&lt;/code&gt;
inside the commit message, and doing this manually is cumbersome. So
most probably you will do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scp -p -P 29418 john.doe@gerrithost:hooks/commit-msg .git/hooks/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install a &lt;em&gt;hook&lt;/em&gt; that will be called every time a commit
message is created, including the &lt;code&gt;Commit-Id&lt;/code&gt; inside the last paragraph
of the message itself and making Gerrit happy.&lt;/p&gt;

&lt;p&gt;Instructions for cloning and getting the hook script should be also
available in the &lt;a href=&quot;https://code.google.com/p/gerrit/&quot;&gt;Gerrit&lt;/a&gt; GUI - if you have access to it. See
&lt;a href=&quot;https://gerrit-documentation.storage.googleapis.com/Documentation/2.11/intro-quick.html#_cloning_the_repository&quot;&gt;cloning&lt;/a&gt; and &lt;a href=&quot;https://gerrit-documentation.storage.googleapis.com/Documentation/2.11/user-changeid.html#creation&quot;&gt;commit-msg creation&lt;/a&gt;
for details and possible variants that might apply to your case.&lt;/p&gt;

&lt;p&gt;Last thing, we ensure that the &lt;code&gt;destination&lt;/code&gt; branch is available as
a branch in &lt;em&gt;gerrit-local&lt;/em&gt; too:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b development origin/development
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;getting-your-commits-in-gerrit-local&quot;&gt;Getting your commits in &lt;em&gt;gerrit-local&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;We will do most of the work in &lt;em&gt;gerrit-local&lt;/em&gt; so we want to acquire the
relevant commits there. We will assume that &lt;em&gt;git-repo&lt;/em&gt; is at:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh://githost/GitRepo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;so we move into &lt;em&gt;gerrit-local&lt;/em&gt;’s directory and do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add git-repo ssh://githost/GitRepo.git
git fetch git-repo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the checkout its &lt;code&gt;source&lt;/code&gt; branch into the local &lt;code&gt;intermediate&lt;/code&gt;
for doing transformations:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b intermediate git-repo/source
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;transforming-the-commits&quot;&gt;Transforming the commits&lt;/h3&gt;

&lt;p&gt;Time for some commits mangling now. Your friend is &lt;code&gt;filter-branch&lt;/code&gt;, so
you might want to see some additional &lt;a href=&quot;http://www.git-scm.com/docs/git-filter-branch&quot;&gt;documentation&lt;/a&gt;
if you want to do different changes.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The changes in this section will change the SHA1 identifiers for all
  the commits. This should not be a problem because you are probably
  doing a transition towards &lt;a href=&quot;https://code.google.com/p/gerrit/&quot;&gt;Gerrit&lt;/a&gt; and will use &lt;em&gt;gerrit-origin&lt;/em&gt;
  after importing all commits as described in this article.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One problem that I had was about the commiter’s email address. This might
differ between &lt;em&gt;git-repo&lt;/em&gt; (e.g. it might be your personal email address)
and &lt;em&gt;gerrit-origin&lt;/em&gt; (e.g. for your work address, or another address that
you are using to contribute to the project in &lt;a href=&quot;https://code.google.com/p/gerrit/&quot;&gt;Gerrit&lt;/a&gt;). If this is
yours too, the following command (found &lt;a href=&quot;https://help.github.com/articles/changing-author-info/&quot;&gt;here&lt;/a&gt;) can be
useful:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git filter-branch --env-filter &#39;
    OLD_EMAIL=&quot;your-old-email@example.com&quot;
    CORRECT_NAME=&quot;Your Correct Name&quot;
    CORRECT_EMAIL=&quot;your-correct-email@example.com&quot;
    if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]; then
        export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;
        export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;
    fi
    if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]; then
        export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;
        export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;
    fi
&#39; --tag-name-filter cat -- --branches --tags
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, you will surely need to ensure that each commit has a &lt;code&gt;Commit-Id&lt;/code&gt;
inside. The hook you installed will be useful to do this, but it expects
to take its input from a file and not from the standard input so we will
use a pivot file &lt;code&gt;/tmp/mymessage&lt;/code&gt; for exchanging data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HOOK=&quot;$PWD/.git/hooks/commit-msg&quot;
git filter-branch --force --msg-filter &quot;
    cat - &amp;gt;/tmp/mymessage &amp;amp;&amp;amp;
    &#39;$HOOK&#39; /tmp/mymessage &amp;amp;&amp;amp;
    cat /tmp/mymessage
&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;rebasing-and-pushing&quot;&gt;Rebasing and pushing&lt;/h3&gt;

&lt;p&gt;We are now ready to do the rebase. This is needed because there is
currently no link between your new commits and whatever was in
&lt;em&gt;gerrit-origin&lt;/em&gt;, so you have to make sure this link is there.&lt;/p&gt;

&lt;p&gt;Rebase will be very simple - although the results will vary depending
on the contents of branch &lt;code&gt;destination&lt;/code&gt; in &lt;em&gt;gerrit-origin&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout intermediate
git rebase destination
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point it should be easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin HEAD:refs/for/destination
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you get errors, you might want to push only part of the commits and
then repeat - whatever is fine for you!&lt;/p&gt;

&lt;h2 id=&quot;what-if&quot;&gt;What if…&lt;/h2&gt;

&lt;p&gt;You might be in the situation in which some of the assumptions do not
really apply… the following hints might help.&lt;/p&gt;

&lt;h3 id=&quot;assumption-1-or-2-do-not-apply&quot;&gt;Assumption 1 or 2 do not apply?&lt;/h3&gt;

&lt;p&gt;Well, this article is probably not for you at all! Did you read it up
to here? Wow, you’re really curious!&lt;/p&gt;

&lt;h3 id=&quot;assumption-3-does-not-apply&quot;&gt;Assumption 3 does not apply?&lt;/h3&gt;

&lt;p&gt;If you’re not interested into preserving all intermediate commits, you
can just squash the whole thing into one single commit and then
push it. At this point you will not need to do any transformation,
because the commit hook will take care of setting the &lt;code&gt;Change-Id&lt;/code&gt; and
you will surely have updated your email at this point - right?!?&lt;/p&gt;

&lt;h3 id=&quot;assumption-4-does-not-apply&quot;&gt;Assumption 4 does not apply?&lt;/h3&gt;

&lt;p&gt;If you have wider powers on the Gerrit side, and this is an initial
import, then you probably can just work behind the scenes and set a
copy of &lt;em&gt;git-repo&lt;/em&gt; to what’s behind &lt;em&gt;gerrit-origin&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Another alternative is to temporarily disable &lt;code&gt;Change-Id&lt;/code&gt;s in the
Gerrit repo to simplify the import.&lt;/p&gt;

&lt;h3 id=&quot;assumption-5-does-not-apply&quot;&gt;Assumption 5 does not apply?&lt;/h3&gt;

&lt;p&gt;Well, your situation seems to be quite peculiar… good luck!&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/gerrit-import-the-hard-way/&quot;&gt;Gerrit import - the hard way&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on March 22, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Parachuting Whatever]]></title>
  <link rel="alternate" type="text/html" href="/parachuting-whatever/" />
  <id>/parachuting-whatever</id>
  <published>2015-02-15T00:00:00+01:00</published>
  <updated>2015-02-15T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;Many times I craft things that have to be installed in some place,
which means that an installer is a nice thing to have. Here’s one,
Perl-based.&lt;/p&gt;

&lt;p&gt;The basic idea that probably anyone has for a poor man’s deployment
system is to pack stuff in a tarball, together with a deployment
script inside that has to be executed in the target machine. Without
too much fantasy, I figured that I could walk the extra mile and
make a package that behaves like a tarball with a twist - i.e. it
is capable of executing things after unpacking.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Download &lt;a href=&quot;/assets/files/deployable&quot;&gt;&lt;em&gt;self-contained bundled version&lt;/em&gt;&lt;/a&gt; and save
it as &lt;code&gt;deployable&lt;/code&gt; in some directory in your &lt;code&gt;PATH&lt;/code&gt;. Make sure it’s
executable too.&lt;/p&gt;

&lt;p&gt;Put your stuff in a directory. The current directory is fine. Assume
it is exactly as you want it to appear when you unpack in the
destination. Include a deployment script, i.e. the one that you usually
include for starting the real deployment after unpacking –we’ll call
it &lt;code&gt;deploy.sh&lt;/code&gt;– and make sure it’s executable. You should have
something like this in the directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deploy.sh
file1.foo
file2.bar
somedir/
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To generate &lt;code&gt;package.pl&lt;/code&gt; ready for deployment, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deployable -o package.pl -d deploy.sh \
    file1.foo file2.bar somedir ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ship &lt;code&gt;package.pl&lt;/code&gt;, execute in place and you’re done.&lt;/p&gt;

&lt;h2 id=&quot;enter-deployable&quot;&gt;Enter &lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt; is a handful of tools to help you with remote management
of multiple servers. It was born when there was no Puppet or Chef in
town - not that I know of, at least - and worked pretty well for me.&lt;/p&gt;

&lt;p&gt;In this post we’ll concentrate on the main script –named after the
bunch of tools– i.e. the one that allows you to generate smart
packages.&lt;/p&gt;

&lt;p&gt;Before continuing, if you find it interesting, please note that you
will need to carry also the &lt;code&gt;remote&lt;/code&gt; script with you, together with
installing dependencies. If you like compact packages - and you
probably do if you’re interested in packing thing smartly - you
can download the &lt;a href=&quot;/assets/files/deployable&quot;&gt;&lt;em&gt;bundled&lt;/em&gt; version&lt;/a&gt;. Ensure to
put it in some place in &lt;code&gt;PATH&lt;/code&gt; and to set its execution bits, this
is what we will assume in the rest of this post.&lt;/p&gt;

&lt;p&gt;So what was your workflow before &lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt;? Let’s assume it was
something like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;place all relevant files in a directory (possibly in a subdirectory)&lt;/li&gt;
  &lt;li&gt;add a deployment script to the directory&lt;/li&gt;
  &lt;li&gt;create a tarball of that directory&lt;/li&gt;
  &lt;li&gt;write instructions to unpack the tarball and execute the
deployment script inside the directory that is created&lt;/li&gt;
  &lt;li&gt;ship the tarball and the instructions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Something along the following line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir foobar
cp /lots/of/stuff/* foobar
vi foobar/deploy.sh # and put what&#39;s needed
chmod +x foobar/deploy.sh
tar cvzf package.tar.gz foobar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You actually don’t have to change your workflow that much. If you
want to stick to it, you can &lt;em&gt;still&lt;/em&gt; put all your stuff in a directory,
like the first bullet above, and create a package with the whole
contents of that directory via &lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt; instead of the last step
in the example above:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# preparation goes exactly like before, but packaging is:
deployable -o /path/to/package.pl -H foobar -d deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You end up with &lt;code&gt;/path/to/package.pl&lt;/code&gt; (you can omit the path to create it
in the current directory of course). At this point, you hardly have to
write any instructions: just tell your recipients to put the script in
the destination server with the execution bits turned on, and execute it.&lt;/p&gt;

&lt;p&gt;So what does that command do? Easy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;option &lt;code&gt;-o&lt;/code&gt; sets the output. If not set, the resulting script will
be printed on standard output, but if you provide a filename
&lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt; will make it executable&lt;/li&gt;
  &lt;li&gt;option &lt;code&gt;-H&lt;/code&gt; (alias &lt;code&gt;--heredir&lt;/code&gt;) tells &lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt; where your stuff
is (in terms of a directory). The contents of the directory will
be included in the package, but the initial path set with &lt;code&gt;-H&lt;/code&gt; will
be stripped away. In the example above, file &lt;code&gt;foobar/deploy.sh&lt;/code&gt; will
be included simply as &lt;code&gt;deploy.sh&lt;/code&gt; (actually, as &lt;code&gt;./deploy.sh&lt;/code&gt;). This
is useful if you want to store all files/directories to be shipped
in one single place, but you don’t care about the containing
directory&lt;/li&gt;
  &lt;li&gt;option &lt;code&gt;-d&lt;/code&gt; tells &lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt; that the specified file (i.e.
&lt;code&gt;deploy.sh&lt;/code&gt; in our example) has to be executed. You can specify
whatever file you include, even multiple ones; only remember that
the path to the files that you include will be referred to their
position in the package, so in our example you have to specify it
as &lt;code&gt;deploy.sh&lt;/code&gt; instead of &lt;code&gt;foobar/deploy.sh&lt;/code&gt; because &lt;code&gt;foobar&lt;/code&gt; is
stripped away.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;shortcuts&quot;&gt;Shortcuts?&lt;/h2&gt;

&lt;p&gt;Here are some shortcuts that &lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt; provides.&lt;/p&gt;

&lt;h3 id=&quot;stuff-in-current-directory&quot;&gt;Stuff in current directory&lt;/h3&gt;

&lt;p&gt;If you just want to ship some files in the current directory, you’re not
obliged to use &lt;code&gt;-H&lt;/code&gt; at all, just tell &lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt; which files you want
to include. Remember that they will be recorded with the path you provide.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deployable -o p.pl file1 file2 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;execute-multiple-deployment-programs&quot;&gt;Execute multiple deployment programs&lt;/h3&gt;

&lt;p&gt;If you want to execute multiple programs, make sure they are all
executable and pass them with multiple &lt;code&gt;-d&lt;/code&gt; options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deployable -o p.pl -d exec1 -d exec2 exec1 exec2 file1 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to execute all executable files inside the default &lt;em&gt;current&lt;/em&gt;
directory, you can just pass the &lt;code&gt;-X&lt;/code&gt; command line parameter. Beware that
it will execute whatever it finds, so make sure that this is what you
actually want:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deployable -o p.pl -X exec1 exec2 file1 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;install-stuff-in-place&quot;&gt;Install stuff in place&lt;/h3&gt;

&lt;p&gt;At the time that I needed it, chances where that I had to update
some system files in multiple machines at once. This meant that I
wanted the tarball to &lt;em&gt;optionally&lt;/em&gt; extract things based on the
root directory (i.e. &lt;code&gt;/&lt;/code&gt;) so that the files go in place.&lt;/p&gt;

&lt;p&gt;While this is not hard to do with what explained above –it’s a
matter of crafting the &lt;code&gt;deploy.sh&lt;/code&gt; script for this– it was too
handy to leave outside. You have two ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create a directory &lt;code&gt;target-root&lt;/code&gt; and put all the stuff you want
to install like &lt;code&gt;target-root&lt;/code&gt; were the root directory &lt;code&gt;/&lt;/code&gt; of the
target system, or&lt;/li&gt;
  &lt;li&gt;include files/directories (presumably inside the current directory)
to be directly extracted in the root directory &lt;code&gt;/&lt;/code&gt; of the target
system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you go the first way, this is how you call &lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deployable -o p.pl -r target-root
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can of course add scripts to call within the same command line. If
you’re more into the second, this is how you do it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deployable -o p.pl -R etc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the-surface-is-scratched-now&quot;&gt;The surface is scratched now…&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt; has plenty of documentation. After installing it, you can
run either of these commands, in increasing level of verbosity:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deployable --usage
deployable --help
deployable --man
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and read it. Have fun!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/parachuting-whatever/&quot;&gt;Parachuting Whatever&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on February 15, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Parachuting Perl]]></title>
  <link rel="alternate" type="text/html" href="/parachuting-perl/" />
  <id>/parachuting-perl</id>
  <published>2015-02-07T00:00:00+01:00</published>
  <updated>2015-02-07T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;I’m probably not the only one in the world to work in an Enterprise-like
world. Which basically boils down to little Perl knowledge (at least
in the admittedly few Enteprises I got in contact with) and usage of
streamline Linux distribution with horribly old Perl versions.&lt;/p&gt;

&lt;p&gt;What I’m probably, again, not the only one in the world to do is to
just set up &lt;em&gt;my&lt;/em&gt; own &lt;code&gt;perl&lt;/code&gt; installation for usage by my applications. This
makes me comfortable about what I’m going to use, without messing with
the system’s &lt;code&gt;perl&lt;/code&gt;. After that, of course, there comes the problem of
many possible applications living together… so I have to cope with
this as well.&lt;/p&gt;

&lt;p&gt;One additional problem that might kick-in is when I have to use a different
&lt;code&gt;perl&lt;/code&gt; version for an application. As an example, I recently discovered
&lt;a href=&quot;https://metacpan.org/pod/Regexp::Grammars&quot;&gt;Regexp::Grammars&lt;/a&gt; is compatible with &lt;code&gt;perl&lt;/code&gt; starting from version 5.10, but
only if different from 5.18… so what if my environment is 5.18? There might
be the need to handle different &lt;code&gt;perl&lt;/code&gt; installations too, then.&lt;/p&gt;

&lt;p&gt;There are currently a lot of tools that simplify the task of having
one’s own &lt;code&gt;perl&lt;/code&gt;, keeping a private library for an application, possibly
shipping also the modules because there’s no connectivity to the
Internet… let’s see one possible workflow.&lt;/p&gt;

&lt;h2 id=&quot;the-plan&quot;&gt;The Plan&lt;/h2&gt;

&lt;p&gt;The plan is very simple:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;install &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; to address the possibility of multiple Perl versions. It
is quite lean and it seems to do its work without getting too much in
the way&lt;/li&gt;
  &lt;li&gt;build a private &lt;code&gt;perl&lt;/code&gt; through &lt;a href=&quot;https://metacpan.org/pod/distribution/Perl-Build/script/perl-build&quot;&gt;perl-build&lt;/a&gt;, which can be installed as
a plugin of &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt;, so that we can use &lt;code&gt;plenv&lt;/code&gt; only&lt;/li&gt;
  &lt;li&gt;install &lt;a href=&quot;https://github.com/miyagawa/cpanminus&quot;&gt;cpanminus&lt;/a&gt; (a.k.a. &lt;code&gt;cpanm&lt;/code&gt;) to easily handle module installation
later. Again, this can be handled as a plugin of &lt;code&gt;plenv&lt;/code&gt;, we’ll see how&lt;/li&gt;
  &lt;li&gt;declare the dependencies of our application in the root directory of the
application itself, through a &lt;code&gt;cpanfile&lt;/code&gt; declaration.&lt;/li&gt;
  &lt;li&gt;use &lt;a href=&quot;https://metacpan.org/pod/Carton&quot;&gt;carton&lt;/a&gt; to handle the installation of an application-private library
of code from the dependencies, so that we will be able to decouple from
the shared libraries installed in whatever &lt;code&gt;perl&lt;/code&gt; we will use. This allows
e.g. to have two different application use two different versions of a
library, but leverating on the exact same &lt;code&gt;perl&lt;/code&gt; installation. Carton
will also help us run our application with the right environment, more on
this later.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Should you have your development and deployment environment equal to each
other? Yes and no. For example, I already have [perlbrew] installed on my
dev machine, and the shift to &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; is something to do with a bit of
calm… so as long as I’m sure that I use the same &lt;code&gt;perl&lt;/code&gt; version in the
two places I should be fine. This means that steps 1..3 above will in
general be a pre-requisite on the target deployment machine, while
steps 4 and 5 are more on the development machine.&lt;/p&gt;

&lt;p&gt;So let’s start!&lt;/p&gt;

&lt;h2 id=&quot;deployment-environment-set-up&quot;&gt;Deployment Environment Set-Up&lt;/h2&gt;

&lt;p&gt;Depending on the target machine you will be using, it might be easy or
impossible to actually install your own &lt;code&gt;perl&lt;/code&gt; and its modules (especially
when compilation is needed). If this is the case, try to see if you can
create a compatible environment somewhere else, e.g. in a virtual machine
in your computer or online, so that you can be pretty sure that when you
copy things over you will be fine.&lt;/p&gt;

&lt;p&gt;In the following, then, we will assume
that the deployment machine is equipped with all the tools needed to
compile and install &lt;code&gt;perl&lt;/code&gt; and modules, which e.g. for a Debian release
would mean ensuring that package &lt;code&gt;build-essentials&lt;/code&gt; is in place, with
the addition of a system &lt;code&gt;perl&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt;. For other
&lt;em&gt;enterprise&lt;/em&gt;-like distributions like RHEL and SLES there are the
applicable package managers, otherwise you will have to roll your own!&lt;/p&gt;

&lt;p&gt;Before starting, we have to note that there is absolutely no need to
be &lt;code&gt;root&lt;/code&gt; here. As a matter of fact, it’s probably better &lt;em&gt;not&lt;/em&gt; to be
&lt;code&gt;root&lt;/code&gt; at all.&lt;/p&gt;

&lt;h3 id=&quot;plenv&quot;&gt;&lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The installation of &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; is (or can be) as simple as cloning its
repository on GitHub. We’ll also take care to install the other tools
as suggested by the documentation, that I will blatantly copy here (or so):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~
git clone git://github.com/tokuhirom/plenv.git .plenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it’s time to add &lt;code&gt;~/.plenv/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt; environment variable.
Where it is stored/set is actually a matter of the system you are in,
so your mileage may vary with the suggestion provided in the &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt;
documentation. Good places to look are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.bash_profile&lt;/code&gt; or &lt;code&gt;~/.profile&lt;/code&gt; if you’re using bash&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;~/.zshrc&lt;/code&gt; if you’re using zsh&lt;/li&gt;
  &lt;li&gt;whatever provided by the other shells&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can either edit the place where &lt;code&gt;PATH&lt;/code&gt; is set, or add a line like this
at the end (file and syntax depend from the shell and considerations above):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;export PATH=&quot;$HOME/.plenv/bin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, you can execute the following and have &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; &lt;em&gt;visible&lt;/em&gt;
in your shell:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exec &quot;$SHELL&quot; -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time for initializing &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; now. A sub-command tells you what to add
to the file you modified for the &lt;code&gt;PATH&lt;/code&gt; variable, just run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plenv init -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and look carefully at the output. For example, I have (more or less) this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PATH=&quot;$HOME/.plenv/shims:${PATH}&quot;
export PLENV_SHELL=bash
source &#39;$HOME/.plenv/libexec/../completions/plenv.bash&#39;
plenv() {
    local command
    command=&quot;$1&quot;
    if [ &quot;$#&quot; -gt 0 ]; then
        shift
    fi

    case &quot;$command&quot; in
    rehash|shell)
        eval &quot;`plenv &quot;sh-$command&quot; &quot;$@&quot;`&quot;;;
    *)
        command plenv &quot;$command&quot; &quot;$@&quot;;;
    esac
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it’s OK with your policies, then you can proceed in installing those
lines like you did for &lt;code&gt;PATH&lt;/code&gt; modification above. Actually, what is
suggested by the author of &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; is to add this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;eval &quot;$(plenv init -)&quot;&#39; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is less save than installing the lines above. Unless you are going
to update &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; in the future (e.g. with &lt;code&gt;git pull&lt;/code&gt; at some time) you’re
fine, but if you do update you might end up with less secure things
happening during that &lt;code&gt;init&lt;/code&gt; process that would be executed at every
login… the choice is yours to take. My only consideration is that you
probably already rely upon work done by complete strangers, and this seems
more or less the same situation.&lt;/p&gt;

&lt;p&gt;Again, to make the changes happen you have to update your shell:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exec &quot;$SHELL&quot; -l
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;plugging-perl-build-in&quot;&gt;Plugging &lt;a href=&quot;https://metacpan.org/pod/distribution/Perl-Build/script/perl-build&quot;&gt;perl-build&lt;/a&gt; in&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://metacpan.org/pod/distribution/Perl-Build/script/perl-build&quot;&gt;Perl-build&lt;/a&gt; is a separate tool from the same author, and
is targeted at assisting in the installation of a new &lt;code&gt;perl&lt;/code&gt;. Being from
the same author, anyway, makes it easy to integrate with &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt;, which
is what we will do here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://github.com/tokuhirom/Perl-Build.git \
   ~/.plenv/plugins/perl-build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, this is it!&lt;/p&gt;

&lt;h3 id=&quot;your-first-perl&quot;&gt;Your first &lt;code&gt;perl&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;It’s time for some serious compilation now. Make sure you know which
&lt;code&gt;perl&lt;/code&gt; version you need, and ask &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; to install it (it will use
&lt;a href=&quot;https://metacpan.org/pod/distribution/Perl-Build/script/perl-build&quot;&gt;perl-build&lt;/a&gt; behind the scenes for the heavy-lifting):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plenv install 5.20.1  # use *your* perl version of course!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wait a few minutes for the installation to complete, then let &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt;
regenerate the &lt;em&gt;shims&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plenv rehash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, this is written in the documentation and I respect it, but I
wonder whether this step is really necessary and, if it is, why at
all. Can’t this be done as the final part of &lt;code&gt;plenv install ...&lt;/code&gt;?
Maybe it is (looking at the contents of &lt;code&gt;~/.plenv/shims&lt;/code&gt; it appears
to be so) and I can’t read the documentation properly, go figure.&lt;/p&gt;

&lt;h3 id=&quot;installing-cpanminus&quot;&gt;Installing &lt;a href=&quot;https://github.com/miyagawa/cpanminus&quot;&gt;cpanminus&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Another capability offered by &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; is to install &lt;a href=&quot;https://github.com/miyagawa/cpanminus&quot;&gt;cpanminus&lt;/a&gt;. I think
most know it today, so I’ll not add anything on it.&lt;/p&gt;

&lt;p&gt;I don’t really like do to this using &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; though, because especially
in deployment machines I prefer to use the &lt;em&gt;fatpacked&lt;/em&gt; self-containing
version. We already added a couple of directories to the &lt;code&gt;PATH&lt;/code&gt;, so
we will install it in one of them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# you can do this with wget as well, of course
curl -L &#39;https://github.com/miyagawa/cpanminus/raw/devel/cpanm&#39; \
    &amp;gt; ~/.plenv/bin/cpanm
chmod a+x ~/.plenv/bin/cpanm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should Just Work.&lt;/p&gt;

&lt;h3 id=&quot;time-to-pack&quot;&gt;Time to pack…&lt;/h3&gt;

&lt;p&gt;The deployment server is ready at this point. Ok, sort of at least for my
taste.&lt;/p&gt;

&lt;p&gt;First of all there’s a lot of cruft left by &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; after installing
&lt;code&gt;perl&lt;/code&gt;, so I usually get rid of it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.plenv
rm -rf build cache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For perl 5.20.1 this saved me some 170+ MB, which are not bad when you
eventually have to pack it all for distributing into multiple deployment
machines. What I ended up was about 66 MB that shrink down to about 17 MB
after bzip2 compression, so it’s perfectly acceptable to have human
transfer time (unless your datacenter has shiny gigabit or multi-gigabit
networking equipment).&lt;/p&gt;

&lt;p&gt;Another thing that I like to have around is a script for making the
changes to the shell initialization when I will carry the whole
package around (because I usually have to). So I save something like this
inside `~/.plenv/bin/colonize.sh and provide execution permissions to it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# usually saved as ~/.plenv/bin/colonize.sh&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# change the target according to what your system has, e.g.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ~/.profile or ~/.bash_profile or ~/.zshrc or...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$HOME/.bashrc&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; grep &lt;span class=&quot;s1&quot;&gt;&amp;#39;^export PATH=.*/\.plenv/bin&amp;#39;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$target&amp;quot;&lt;/span&gt; &amp;gt;/dev/null 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;plenv already set-up in this system&amp;quot;&lt;/span&gt; &amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;2
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

cat &amp;gt;&amp;gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$target&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&amp;#39;END&amp;#39;&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;export PATH=&amp;quot;$HOME/.plenv/bin:$PATH&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;eval &amp;quot;$(plenv init -)&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;END&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point we’re really ready to pack (feel free to substitute the &lt;code&gt;j&lt;/code&gt;
with e.g. a &lt;code&gt;z&lt;/code&gt; if your system does not have &lt;code&gt;bzip2&lt;/code&gt; installed):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~
tar cvjf myperl.tar.bz2 .plenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install it into another (equivalent) deployment machine you just
have to transfer the file, unpack and &lt;em&gt;colonize&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scp myperl.tar.bz2 &quot;$user&quot;@&quot;$remote&quot;:/tmp
ssh &quot;$user&quot;@&quot;$remote&quot; \
    &#39;cd ~ &amp;amp;&amp;amp; tar xvf /tmp/myperl.tar.bz2 &amp;amp;&amp;amp; ./plenv/bin/colonize.sh&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;development-environment-set-up&quot;&gt;Development Environment Set-Up&lt;/h2&gt;

&lt;p&gt;You might have a brand new development machine and follow the steps above
to set it up exactly like a deployment one: congratulations! Otherwise, you
should at least ensure that when testing in your dev machine you are
using the same &lt;code&gt;perl&lt;/code&gt; version as you installed in the deployment machines,
with similar compilation options (e.g. with or without threads).&lt;/p&gt;

&lt;p&gt;In the following, we will take the hard way and assume that you don’t have
&lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; in the development machine. This is what I have today, so whatever
I write here wouldn’t be tested if I assumed that &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; is used in the
dev machine.&lt;/p&gt;

&lt;p&gt;It’s now time to concentrate on the application. Assuming it lives in its
own directory, with proper version control set up (e.g. &lt;code&gt;git&lt;/code&gt;), we have to
ensure that non-core modules are properly tracked, and &lt;a href=&quot;https://metacpan.org/pod/Carton&quot;&gt;carton&lt;/a&gt; will help
us out on this.&lt;/p&gt;

&lt;h3 id=&quot;dependencies-handling-with-carton&quot;&gt;Dependencies handling with &lt;a href=&quot;https://metacpan.org/pod/Carton&quot;&gt;carton&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Installing &lt;a href=&quot;https://metacpan.org/pod/Carton&quot;&gt;carton&lt;/a&gt; should not be a problem. You can do it via
&lt;a href=&quot;https://github.com/miyagawa/cpanminus&quot;&gt;cpanm&lt;/a&gt; on the &lt;code&gt;perl&lt;/code&gt; that you use on the development
machine.&lt;/p&gt;

&lt;p&gt;You declare your dependencies in a &lt;code&gt;cpanfile&lt;/code&gt; inside the root of your
project, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# This is file &quot;cpanfile&quot;
requires &#39;Log::Log4perl::Tiny&#39;, &#39;1.2.6&#39;;
requires &#39;Template::Perlish&#39;;
requires &#39;JSON&#39;, &#39;2.59&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, you can either specify the module version - e.g. because
you know that the specific version has a particular feature - or not. At
this point, &lt;a href=&quot;https://metacpan.org/pod/Carton&quot;&gt;carton&lt;/a&gt; helps you install these modules in a local directory
called &lt;code&gt;local&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;carton install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first time you run this it will create the &lt;code&gt;local&lt;/code&gt; directory and put
all installed modules there. Another important file that is created
is &lt;code&gt;cpanfile.snapshot&lt;/code&gt;, that records the &lt;code&gt;cpanfile&lt;/code&gt; and the results
of the installation in a manner that will allow the exact re-creation
of the environment created here. At this point &lt;code&gt;git&lt;/code&gt; will be complaining
about these new files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you definitely want &lt;code&gt;cpanfile&lt;/code&gt; and &lt;code&gt;cpanfile.snapshot&lt;/code&gt; to be tracked by
&lt;code&gt;git&lt;/code&gt;. The first helps you keep track of what you need, the second will
allow you to recreate the environment multiple times, and will help
anyone that wants to collaborate too. We’ll see how in a moment.&lt;/li&gt;
  &lt;li&gt;you definitely do &lt;em&gt;not&lt;/em&gt; want to track &lt;code&gt;local&lt;/code&gt;. At the point where you
have the instructions to recreate it with &lt;code&gt;cpanfile.snapshot&lt;/code&gt;, it does
not make sense to move it around. And, as you probably already guessed,
it will probably be difficult to move compiled modules around, unless
your development environment matches the deployment one perfectly (or
so).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which basically boils down to something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo local/ &amp;gt;&amp;gt; .gitignore
git add .gitignore cpanfile cpanfile.snapshot
git commit -m &#39;using carton dependencies handling&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;running-applications&quot;&gt;Running applications&lt;/h3&gt;

&lt;p&gt;Carton has its own way of helping you start applications with the
right environment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;carton exec -- program option option option...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It also plays well with &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt;, so if you set up a &lt;em&gt;local&lt;/em&gt; version of
&lt;code&gt;perl&lt;/code&gt; with it it will use that. My impression is that it fiddles with
&lt;code&gt;PERL5LIB&lt;/code&gt; to point towards the &lt;code&gt;local&lt;/code&gt; directory that was created.&lt;/p&gt;

&lt;p&gt;Another approach that does not require you to wrap your application
calls via &lt;a href=&quot;https://metacpan.org/pod/Carton&quot;&gt;carton&lt;/a&gt; - which might get annoying - is to set up usage
of the &lt;code&gt;local&lt;/code&gt; library directly from your application. You probably
already do something like this if you store most of your code inside
the &lt;code&gt;lib&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use FindBin &#39;$Bin&#39;;
use lib &quot;$Bin/../lib&quot;, &quot;$Bin/../local/lib/perl5&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;workflow&quot;&gt;Workflow&lt;/h2&gt;

&lt;p&gt;These are my suggestions for the update of the distributions. In my
case, the deployment machines do not have &lt;code&gt;git&lt;/code&gt; installed (it was on
the first one for installing &lt;a href=&quot;https://github.com/tokuhirom/plenv&quot;&gt;plenv&lt;/a&gt; but it is not a requirement) so
I do my deployments with good ol’ tarballs (well, I use &lt;a href=&quot;http://repo.or.cz/w/deployable.git&quot;&gt;deployable&lt;/a&gt;
but it’s another story).&lt;/p&gt;

&lt;h3 id=&quot;application-deployment-environment&quot;&gt;Application Deployment Environment&lt;/h3&gt;

&lt;p&gt;I use this kind of layout:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- application-container
    - application -&amp;gt; distro/application-2.0
    - distro
        - application-1.0
            - etc -&amp;gt; ../../etc
            - local -&amp;gt; ../../local
            - vendor -&amp;gt; ../../vendor
        - application-1.2
            - etc -&amp;gt; ../../etc
            - local -&amp;gt; ../../local
            - vendor -&amp;gt; ../../vendor
        - application-2.0
            - etc -&amp;gt; ../../etc
            - local -&amp;gt; ../../local
            - vendor -&amp;gt; ../../vendor
    - etc
    - local
    - vendor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is a higher level container directory that will hold the different
releases and also all local data, i.e. data that are specific to the
installation in the deployment server. In this example, they will be the
&lt;code&gt;etc&lt;/code&gt;, &lt;code&gt;local&lt;/code&gt; and &lt;code&gt;vendor&lt;/code&gt; directories, but there might be more of course.&lt;/p&gt;

&lt;p&gt;New packages are deposited and expanded inside the &lt;code&gt;distro&lt;/code&gt;, where you can
find the different releases in case quick rollback is needed. Installing
a new release is as simple as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;expanding the new tarball inside &lt;code&gt;distro&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;create the symbolic links to link back to &lt;code&gt;etc&lt;/code&gt;, &lt;code&gt;local&lt;/code&gt; and &lt;code&gt;vendor&lt;/code&gt;
(these might be part of the tarball itself)&lt;/li&gt;
  &lt;li&gt;move the &lt;code&gt;application&lt;/code&gt; symbolic link to point towards the new release
from a previous one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What’s the &lt;code&gt;vendor&lt;/code&gt; directory for then? Most of the times the deployment
machines are not connected to the Internet, and so you have to carry the
dependencies with you somehow. &lt;a href=&quot;https://metacpan.org/pod/Carton&quot;&gt;Carton&lt;/a&gt; allows you to create a
bundle of these modules like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;carton bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and this will create a &lt;code&gt;vendor&lt;/code&gt; sub-directory with all the needed stuff.
If you go this route, the suggestion is to put &lt;code&gt;vendor/&lt;/code&gt; too inside
&lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;deployment-strategy&quot;&gt;Deployment Strategy&lt;/h3&gt;

&lt;p&gt;Before the very first deployment, you will have to create the
directory layout described above:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /path/to/application/parent
mkdir -p application-container/{distro,etc,local,vendor}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For your application you create a distribution tarball, e.g.
&lt;code&gt;application-2.0.tar.bz2&lt;/code&gt;, and transfer it into the deployment
machine inside &lt;code&gt;application-container/distro&lt;/code&gt;. You can begin the
installation then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tar xvf application-2.0.tar.bz2
cd application-2.0
ln -s ../../etc
ln -s ../../local
ln -s ../../vendor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most the times you will not need to install new dependencies, but
sometimes (e.g. the very first time) you will. If this is
the case, you can generate the bundle of the dependency files
inside the development machine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;carton bundle
tar cvjf dependencies.tar.bz2 vendor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then transfer this bundle in the deployment machine and install
it (we will assume that &lt;code&gt;application-container/distro&lt;/code&gt; is going to
keep all our packages):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /path/to/application-container
tar xvf distro/dependencies.tar.bz2
cd application-container/distro/application-2.0
carton install --deployment --cached
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Last step is to activate the release:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /path/to/application-container
rm -f application
ln -s distro/application-2.0 application
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and restart your application, if applicable.&lt;/p&gt;

&lt;p&gt;Congratulations! You’re ready to start using your application!&lt;/p&gt;

&lt;h2 id=&quot;updates&quot;&gt;Updates&lt;/h2&gt;

&lt;p&gt;Changed how to call &lt;code&gt;carton exec&lt;/code&gt; to  more robust way - thanks Slobodan
Miskovic!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/parachuting-perl/&quot;&gt;Parachuting Perl&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on February 07, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[GitHub Pages]]></title>
  <link rel="alternate" type="text/html" href="/github-pages/" />
  <id>/github-pages</id>
  <published>2015-02-04T00:00:00+01:00</published>
  <updated>2015-02-04T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;I recently decided that I should probably write more. &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;
is a good place where to store what I write.&lt;/p&gt;

&lt;h2 id=&quot;what-is-github-pages&quot;&gt;What Is GitHub Pages&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; is a service provided by GitHub to host… pages. It is
a great way to add a website to a project hosted on GitHub, and also
quite simple to do by using git. The idea is that you create a
dedicated &lt;em&gt;branch&lt;/em&gt; in your project repository, called &lt;code&gt;gh-pages&lt;/code&gt;, and
put the website there. GitHub is then smart enough to take the contents
from that branch and expose them on the Internet at the right address.&lt;/p&gt;

&lt;p&gt;If your nickname on GitHub is &lt;code&gt;mynick&lt;/code&gt;, and the project is called
&lt;code&gt;myproject&lt;/code&gt;, then:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the project will be at &lt;code&gt;https://github.com/mynick/myproject&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;its pages will be at &lt;code&gt;http://mynick.github.io/myproject&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, my repository for the &lt;a href=&quot;https://github.com/polettix/Graphics-Potrace&quot;&gt;Potrace&lt;/a&gt; Perl bindings has:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;project repository at address
&lt;a href=&quot;https://github.com/polettix/Graphics-Potrace&quot;&gt;&lt;code&gt;https://github.com/polettix/Graphics-Potrace&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;its associated page(s) at address
&lt;a href=&quot;http://polettix.github.io/Graphics-Potrace&quot;&gt;&lt;code&gt;http://polettix.github.io/Graphics-Potrace&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;project-or-userassociation&quot;&gt;Project or User/Association?&lt;/h2&gt;

&lt;p&gt;What written above is fine for projects hosted on GitHub. As a matter
of fact, there is also a &lt;em&gt;standardized&lt;/em&gt; way to have similar pages for
a user or an organization.&lt;/p&gt;

&lt;p&gt;There is a slight inconsistency in how the thing is handled though:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it still relies on a GitHub project - good&lt;/li&gt;
  &lt;li&gt;the GitHub project MUST have a specific name, e.g.
&lt;code&gt;mynick.github.io&lt;/code&gt; - still good&lt;/li&gt;
  &lt;li&gt;the pages are hosted in the &lt;code&gt;master&lt;/code&gt; branch instead of
&lt;code&gt;gh-pages&lt;/code&gt; - this is a bummer!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;blog&quot;&gt;Blog?&lt;/h2&gt;

&lt;p&gt;With the tools above - especially considering the pages for a user
or an association - it is easy to think about hosting a blog on GitHub.
We will assume that it is hosted as a project by itself, not the one
for the user/association above (although you can easily tweak the
instructions below to make it happen).&lt;/p&gt;

&lt;p&gt;The basic idea is that keeping a blog’s pages is too cumbersome to
be done manually. You will probably want to provide a consistent look,
with all headers, navigation, sides, footers… all the bells and
whistles.&lt;/p&gt;

&lt;p&gt;One of the best approaches to take is to use some blog
generation system - we’ll use &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; here - so that we can concentrate
on writing the stuff, and let the system do the heavy lifting to generate
the final pages. Hence, it makes sense to consider the blog from two
points of view:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the generating system where you put your articles in&lt;/li&gt;
  &lt;li&gt;the final generated site&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This fits perfectly with GitHub: you can keep the generating system
as &lt;em&gt;the project&lt;/em&gt;, and its associated GitHub Pages as the real blog that
is served on the Internet.&lt;/p&gt;

&lt;h2 id=&quot;lets-start&quot;&gt;Let’s Start!&lt;/h2&gt;

&lt;p&gt;I set up my blog infrastructure using &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. After installing it,
create your new blog like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jekyll new myblog
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog
git init
git add .
git commit -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;initial import&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you have your local repository for the blog. At this point, you
are ready for creating a new repository in GitHub (let’s call it
&lt;code&gt;myblog&lt;/code&gt; in user &lt;code&gt;mynick&lt;/code&gt;) and tie them up:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git remote add origin git@github.com:mynick/myblog.git
git push -u origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It’s time to start generating pages at this point. Depending on how
you installed &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; or whatever different, you might have to use
&lt;code&gt;bundle&lt;/code&gt;, which is what we will assume here:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the generated stuff will live inside the &lt;code&gt;_site&lt;/code&gt; subdirectory. This
should be already included inside the &lt;code&gt;.gitignore&lt;/code&gt; file generated by
Jekyll automatically, but in case it’s a good moment for doing this.&lt;/p&gt;

&lt;p&gt;The suggestion is that the &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;gh-pages&lt;/code&gt; branches are really
separated from one another. Again, there might be many ways to do this,
I’m just providing you one here:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout master
git checkout --orphan gh-pages
git rm -rf .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point you should still have the &lt;code&gt;_site&lt;/code&gt; directory lying around,
and this is where the real contents of your site actually are. A basic
strategy can be to just copy the contents of that directory inside the
root directory of the repository:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;tar cf - -C _sites . &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tar xvf -
git add .
git commit -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;gh-pages initial import&amp;#39;&lt;/span&gt;
git push origin gh-pages:gh-pages&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There you go, your blog is online!&lt;/p&gt;

&lt;h2 id=&quot;routine-workflow&quot;&gt;Routine Workflow&lt;/h2&gt;

&lt;p&gt;What’s the workflow from now on? You will normally work in the &lt;code&gt;master&lt;/code&gt;
branch - we set all this up for this reason, actually - and will switch
on the &lt;code&gt;gh-pages&lt;/code&gt; branch only when needed.&lt;/p&gt;

&lt;p&gt;Adding posts or pages in Jekyll is quite easy and there is plenty of
documentation. When you’re done, make sure you are in the &lt;code&gt;master&lt;/code&gt;
branch and that changes are committed, otherwise you will not be able
to switch to the &lt;code&gt;gh-pages&lt;/code&gt; branch later on. It’s OK to have files that
are not yet onboarded in GitHub though, &lt;code&gt;git&lt;/code&gt; will not complain about
them.&lt;/p&gt;

&lt;p&gt;At this point, you have to follow these steps:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build
git checkout gh-pages
tar cf - -C _sites . &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tar xvf -
git add .
git commit -m &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date &lt;span class=&quot;s1&quot;&gt;&amp;#39;+blog status at %Y%m%d-%H%M%S&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
git push origin gh-pages:gh-pages
git checkout master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The copy using &lt;code&gt;tar&lt;/code&gt; is effective although not completely correct. In
particular, it will not take into consideration things that you &lt;em&gt;delete&lt;/em&gt;,
because all items will be added to what is already saved and committed.
In general this should not be a problem though, because you will mostly
be adding things, will you not?&lt;/p&gt;

&lt;p&gt;A better strategy is to use &lt;code&gt;git ls-files&lt;/code&gt; to list all files and remove
most of them before doing the copy with &lt;code&gt;tar&lt;/code&gt;. We should not get rid of
all of them though, because some might be important for the generic
&lt;em&gt;management&lt;/em&gt; of the pages (e.g. the &lt;code&gt;.gitignore&lt;/code&gt; file). We will assume
that there are no files with spaces, so this will work:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build
git checkout gh-pages
rm &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git ls-files &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -v &lt;span class=&quot;s1&quot;&gt;&amp;#39;^\.gitignore$&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
tar cf - -C _sites . &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tar xvf -
git add .
git commit -m &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date &lt;span class=&quot;s1&quot;&gt;&amp;#39;+blog status at %Y%m%d-%H%M%S&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
git push origin gh-pages:gh-pages
git checkout master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I eventually put the commands above in &lt;code&gt;publish.sh&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;MYDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;dirname &lt;span class=&quot;s2&quot;&gt;&amp;quot;$0&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;FULLME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;readlink -f &lt;span class=&quot;s2&quot;&gt;&amp;quot;$0&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BAREME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;s2&quot;&gt;&amp;quot;$0&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

die&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$*&amp;quot;&lt;/span&gt; &amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;2
   &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

main&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$MYDIR&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; die &lt;span class=&quot;s2&quot;&gt;&amp;quot;unable to go in $MYDIR&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; .. &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; die &lt;span class=&quot;s2&quot;&gt;&amp;quot;unable to go in parent directory of $MYDIR&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;in $PWD now&amp;quot;&lt;/span&gt;

   git checkout master &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; die &lt;span class=&quot;s1&quot;&gt;&amp;#39;unable to switch to master&amp;#39;&lt;/span&gt;
   bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; die &lt;span class=&quot;s2&quot;&gt;&amp;quot;unable to update contents&amp;quot;&lt;/span&gt;
   git checkout gh-pages &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; die &lt;span class=&quot;s1&quot;&gt;&amp;#39;unable to switch to gh-pages&amp;#39;&lt;/span&gt;
   tar cf - -C _site . &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tar xvf - &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git add . &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(date &amp;#39;+update at %Y%m%d-%H%M%S&amp;#39;)&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push origin gh-pages
   git checkout master &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; die &lt;span class=&quot;s1&quot;&gt;&amp;#39;unable to switch to master&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

main&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I’m not an expert on this, but it’s very probable that without resorting to
the trick of defining a function &lt;code&gt;main&lt;/code&gt; and calling it, things might go
very wrong in the execution of the script, because the script will live
in the &lt;code&gt;master&lt;/code&gt; branch but it might be unavailable in branch &lt;code&gt;gh-pages&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/github-pages/&quot;&gt;GitHub Pages&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on February 04, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[BitTorrent for personal file sharing]]></title>
  <link rel="alternate" type="text/html" href="/bittorrent/" />
  <id>/bittorrent</id>
  <published>2013-12-10T00:00:00+01:00</published>
  <updated>2013-12-10T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;I sometimes what to transfer a file from A to B and this file might be big.
Like a Virtual Machine Image around 20 GB.&lt;/p&gt;

&lt;p&gt;I discovered that BitTorrent can be quite powerful and robust for the file
transfer, but unfortunately there is not too much information around as to
set up a “personal” file sharing chain.&lt;/p&gt;

&lt;p&gt;One of the things that seem to be available are the DHT or &lt;em&gt;trackerless&lt;/em&gt;
torrents. Well, I did not manage to make one work, so I had to revert to a
more irritating method of setting up a tracker. Here’s how… without
using uTorrent, that is not freely available in Linux.&lt;/p&gt;

&lt;p&gt;The steps are quite simple:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;set up a Tracker&lt;/li&gt;
  &lt;li&gt;generate a torrent file&lt;/li&gt;
  &lt;li&gt;start a BitTorrent client where the file to transfer is, using the
torrent file to load it&lt;/li&gt;
  &lt;li&gt;send the torrent file to the recipient and start another BitTorrent
client with it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will see all of them step by step.&lt;/p&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;

&lt;p&gt;We will use the &lt;em&gt;standard&lt;/em&gt; BitTorrent client:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://bittorrent.cvs.sourceforge.net/viewvc/bittorrent/?view=tar&quot;&gt;tarball&lt;/a&gt; from SourceForge&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/files/bittorrent-20150201.tar.gz&quot;&gt;a snapshot of the above&lt;/a&gt; taken on February 1st, 2015&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unpack the whole thing and get into the BitTorrent directory. We’ll call
the directory you are into &lt;code&gt;$BT&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tracker-set-up&quot;&gt;Tracker Set-Up&lt;/h2&gt;

&lt;p&gt;The tracker is a server program that helps… tracking the download of the
different chunks by the interested clients. It acts as a very minimal web
server that only accepts &lt;code&gt;GET&lt;/code&gt; requests to a specific URI and with a
specific command line. You will not have to worry about this.&lt;/p&gt;

&lt;p&gt;You have to choose a port where your tracker will listen. We will just
select 12345 for our example, so you only have to start the tracker:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$BT&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;12345
./bttrack.py --port &lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; --dfile dfile-&lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; &amp;gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;log-$port.log&amp;quot;&lt;/span&gt; 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will start a Tracker in the background, listening on all the
interfaces at the port of your choice. The related URI is the following:
&lt;code&gt;http://your-server:12345/announce/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course, we are assuming that the Tracker can be reached through port
12345 of server &lt;code&gt;your-server&lt;/code&gt;… adjust according to your environment!&lt;/p&gt;

&lt;h2 id=&quot;torrent-file-creation&quot;&gt;Torrent File Creation&lt;/h2&gt;

&lt;p&gt;You don’t necessarily have a running Tracker to generate the torrent file,
but you will need one anyway… There are only a few really important
things to generate the torrent file: the Tracker’s URI and the file to
transfer. The command is pretty straightforward:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./btmakemetafile.py inputfile.ext http://your-server:12345/announce &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --target mystuff.torrent&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;bittorrent-client-server-side&quot;&gt;BitTorrent Client, &lt;em&gt;Server&lt;/em&gt;-side&lt;/h2&gt;

&lt;p&gt;This is quite easy… but with a twist. The client on the server will be
installed in the same host as the tracker, and this is a problem because the
server &lt;em&gt;normally&lt;/em&gt; relies upon the connection details (IP address) to
figure out where the peer is. In this case, it’s highly likely that you would
get some local address! Luckily there’s a parameter around this: &lt;code&gt;--ip&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./btdownloadheadless.py --ip &lt;span class=&quot;nv&quot;&gt;$visible_ip&lt;/span&gt; --minport &lt;span class=&quot;m&quot;&gt;54321&lt;/span&gt; --maxport &lt;span class=&quot;m&quot;&gt;54321&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&amp;quot;$torrentpath&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As said, you should set &lt;code&gt;$visible_ip&lt;/code&gt; to some address of the
serving machine that can be reached by the intended peer.&lt;/p&gt;

&lt;p&gt;You will have to start this command from the place where your file is,
otherwise this instance will try to download the relevant file instead of
seeding it.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;$torrenpath&lt;/code&gt; is supposed to carry the path to the torrent
file generated in the previous step.&lt;/p&gt;

&lt;p&gt;As you can see, we also chose to stick to a single port. This is important
later for setting up rules in the firewall.&lt;/p&gt;

&lt;h2 id=&quot;bittorrent-client-client-side&quot;&gt;BitTorrent Client, &lt;em&gt;Client&lt;/em&gt;-side&lt;/h2&gt;

&lt;p&gt;Here comes finally when you can download the torrent from the
destination. All you have to do is to send the torrent file (that is
way more compact!) to the recipient, and tell them to use their favourite
BitTorrent client to download it. Voilà!&lt;/p&gt;

&lt;h2 id=&quot;dont-forget-the-firewall&quot;&gt;Don’t Forget the Firewall!&lt;/h2&gt;

&lt;p&gt;If you are using some firewall you will have to ensure that the ports
are open. Most probably, the firewall will be iptables, in which case:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# this is for the Tracker&lt;/span&gt;
sudo iptables -A INPUT -p tcp -m tcp --dport &lt;span class=&quot;m&quot;&gt;12345&lt;/span&gt; -j ACCEPT

&lt;span class=&quot;c&quot;&gt;# this is for the Client&lt;/span&gt;
sudo iptables -A INPUT -p tcp -m tcp --dport &lt;span class=&quot;m&quot;&gt;54321&lt;/span&gt; -j ACCEPT&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;packing-it-all&quot;&gt;Packing it all&lt;/h2&gt;

&lt;p&gt;The following script can be executed on the host where you will be
serving the file. You can provide a port for the tracker, or let it
get one for you. It assumes that the following port is free as well,
and assigns it to the client (yes, not &lt;em&gt;that&lt;/em&gt; robust).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-$(&lt;/span&gt;perl -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;print int(50000 + rand 15000)&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-$(&lt;/span&gt;hostname&lt;span class=&quot;k&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-$(&lt;/span&gt;dig &lt;span class=&quot;s2&quot;&gt;&amp;quot;$hostname&amp;quot;&lt;/span&gt; +short&lt;span class=&quot;k&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CLIENTPORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BINDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;dirname &lt;span class=&quot;s2&quot;&gt;&amp;quot;$0&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BINDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;readlink -f &lt;span class=&quot;s2&quot;&gt;&amp;quot;$BINDIR&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BTTRACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$BINDIR/bttrack.py&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BTCLIENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$BINDIR/btdownloadheadless.py&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BTTORRENTCREATOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$BINDIR/btmakemetafile.py&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TORRENTFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$(basename &amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;)-$port.torrent&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create torrent file&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;$BTTORRENTCREATOR&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$filename&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://$hostname:$port/announce&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   --target &lt;span class=&quot;s2&quot;&gt;&amp;quot;$TORRENTFILE&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;created: $TORRENTFILE&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Start tracker, save pid for later&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;$BTTRACK&amp;quot;&lt;/span&gt; --port &lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; --dfile dfile-&lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &amp;gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;tracker-$port.log&amp;quot;&lt;/span&gt; 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Open ports. The client is blocking, so this has to be done before&lt;/span&gt;
sudo iptables -A INPUT -p tcp -m tcp --dport &lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; -j ACCEPT
sudo iptables -A INPUT -p tcp -m tcp --dport &lt;span class=&quot;nv&quot;&gt;$CLIENTPORT&lt;/span&gt; -j ACCEPT

&lt;span class=&quot;c&quot;&gt;# Start client&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;$BTCLIENT&amp;quot;&lt;/span&gt; --ip &lt;span class=&quot;s2&quot;&gt;&amp;quot;${ip:-$hostname}&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   --minport &lt;span class=&quot;nv&quot;&gt;$CLIENTPORT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   --maxport &lt;span class=&quot;nv&quot;&gt;$CLIENTPORT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&amp;quot;$TORRENTFILE&amp;quot;&lt;/span&gt; &amp;gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;client-$CLIENTPORT.log&amp;quot;&lt;/span&gt; 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# When client is interrupted, clean all up&lt;/span&gt;
sudo iptables -D INPUT -p tcp -m tcp --dport &lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; -j ACCEPT
sudo iptables -D INPUT -p tcp -m tcp --dport &lt;span class=&quot;nv&quot;&gt;$CLIENTPORT&lt;/span&gt; -j ACCEPT
&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$PID&amp;quot;&lt;/span&gt;
rm &lt;span class=&quot;s2&quot;&gt;&amp;quot;$TORRENTFILE&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;dfile-$port&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;client-$CLIENTPORT.log&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;tracker-$port.log&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


    &lt;p&gt;&lt;a href=&quot;/bittorrent/&quot;&gt;BitTorrent for personal file sharing&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on December 10, 2013.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Set up a remote git repository]]></title>
  <link rel="alternate" type="text/html" href="/git-remote-repository/" />
  <id>/git-remote-repository</id>
  <published>2013-11-06T00:00:00+01:00</published>
  <updated>2013-11-06T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;I sometimes happen to start a local repository that then I want to
replicate on my server, here’s what I use.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;basedirname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;s2&quot;&gt;&amp;quot;$PWD&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;perl/$basedirname&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;remote_hostname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;example.com
&lt;span class=&quot;nv&quot;&gt;remote_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ssh://user@$remote_hostname/path/to/git&amp;quot;&lt;/span&gt;

ssh &lt;span class=&quot;s2&quot;&gt;&amp;quot;$remote_hostname&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      cd git &amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      mkdir -p &amp;#39;$repository&amp;#39; &amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      cd &amp;#39;$repository&amp;#39; &amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      git init --bare&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;   &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
   git remote add &lt;span class=&quot;s2&quot;&gt;&amp;quot;$remote&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$remote_base/$repository&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
   git push -u --all origin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I call this script &lt;code&gt;remotise&lt;/code&gt;. When I want to set up the remote
repository, I hop into the relevant repository for the directory and issue:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /path/to/project

&lt;span class=&quot;c&quot;&gt;# Option 1: DWIM&lt;/span&gt;
remotise

&lt;span class=&quot;c&quot;&gt;# Option 2: set the path in the repository (I don&amp;#39;t do Perl only)&lt;/span&gt;
remotise web/someproject

&lt;span class=&quot;c&quot;&gt;# Option 3, set the name of the repository (shown by git memo) as well:&lt;/span&gt;
remotise web/someproject upstream&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s all folks!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/git-remote-repository/&quot;&gt;Set up a remote git repository&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on November 06, 2013.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[RRDtool - Sparse Notes]]></title>
  <link rel="alternate" type="text/html" href="/rrdtool/" />
  <id>/rrdtool</id>
  <published>2013-11-02T00:00:00+01:00</published>
  <updated>2013-11-02T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;http://oss.oetiker.ch/rrdtool/index.en.html&quot;&gt;RRDtool&lt;/a&gt; is a wonderful tool for collecting and graphing data.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;RRDtool is the OpenSource industry standard, high performance data logging
  and graphing system for time series data. RRDtool can be easily integrated
  in shell scripts, perl, python, ruby, lua or tcl applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take a look at the website for additional information… and read on for
some things that I find useful.&lt;/p&gt;

&lt;h2 id=&quot;data-collection&quot;&gt;Data collection&lt;/h2&gt;

&lt;p&gt;Data are collected into the database and fetched from it. The collection is
split into two parts: how they are read, and how they are stored.&lt;/p&gt;

&lt;p&gt;Reading of data is specified through the description of a &lt;em&gt;Data Source&lt;/em&gt;, or
&lt;code&gt;DS&lt;/code&gt;. See the docs about &lt;a href=&quot;http://oss.oetiker.ch/rrdtool/doc/rrdcreate.en.html&quot;&gt;rrdtool create&lt;/a&gt; for the details, but it’s useful
to know that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GAUGE&lt;/strong&gt;s are inputs that can go up and down. Like a temperature, the
voltage at some pin or the amount of money in a bank account.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;COUNTER&lt;/strong&gt; is for meters that can only increase, like e.g. the number of
times that you a light turns on, the quantity of bits that enter an interface
or that the sun rises in the morning.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DERIVE&lt;/strong&gt; can be used for the same kind of data that a GAUGE is for, but
focuses on the difference with respect to the previous read instead of the
absolute value. This can be useful e.g. if you want to track an increase or
decrease rate for a quantity. The docs page about &lt;a href=&quot;http://oss.oetiker.ch/rrdtool/doc/rrdcreate.en.html&quot;&gt;rrdtool create&lt;/a&gt; also has
additional remarks about the relation between DERIVE and COUNTER, so give it
a try if you’re having trouble with your COUNTERs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ABSOLUTE&lt;/strong&gt; is for counters that get reset upon reading. So, each time
you read the value you reset the counter, do you?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RRDtool is mostly interested into rates, so all of the above are actually
translated into a rate, except for GAUGEs that are stored as-is (so that
you can track things that actually have little to do with rates). If you
want to graph the stock market, use GAUGE.&lt;/p&gt;

&lt;h2 id=&quot;times&quot;&gt;Times&lt;/h2&gt;

&lt;p&gt;Time handling in RRDtool is quite interesting. It is assumed that you will
feed a new set of values every &lt;em&gt;step&lt;/em&gt;, where the step is specified
in seconds. The default is 300, so you’re supposed to feed a new set of
values every 5 minutes, but of course you can set what you see fit.&lt;/p&gt;

&lt;p&gt;The relevant concepts for times in RRDtool are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;step&lt;/strong&gt;, i.e. the length of the time range&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;start&lt;/strong&gt;, i.e. when a time range starts&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;end&lt;/strong&gt;, i.e. when a time range ends&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can set a start time when you create a database, but the &lt;em&gt;real&lt;/em&gt; start
time will be set depending on the step - in particular, as an integer
multiple of the step.&lt;/p&gt;

&lt;p&gt;It’s useful to think the line of time as a sequence of time intervals:
interval 1, interval 2, …, interval N. The real start is 0, corresponding
to when the epoch starts (January 1st, 1970), but time is actually a
sequence of intervals and not of points.&lt;/p&gt;

&lt;p&gt;Values stored in the database are always referred to one interval, not to
a point in time.&lt;/p&gt;

&lt;p&gt;So, what do start and end mean actually? They are used as ways to specify
the intervals we are interested into. Each is first framed into one
interval, then the sequence of intervals from the start’s to the end’s
(included) are considered.&lt;/p&gt;

&lt;p&gt;When we specify a point in time that separates two intervals, it is
assigned to the following one. So, if the step is equal to 60 and start
is 600 (separating the two intervals 540-600 and 600-660), the interval
considered is 600-660. This is the same as saying that intervals are
closed on the left and open on the right.&lt;/p&gt;

&lt;p&gt;Intervals are represented with the end time of the interval. so, in the
example above, if you specify start as 600, the related interval that
you will get first is the one marked with 660.&lt;/p&gt;

&lt;p&gt;Example: consider a database with a step of 60 seconds and capable of
collecting up to three values. The start time has to be “quite high” to
avoid incurring in some &lt;em&gt;do what I mean&lt;/em&gt; behaviour of RRDtool.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;600000000
&lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3
&lt;span class=&quot;nv&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;60

rrdtool create test.rrd &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   --step &lt;span class=&quot;nv&quot;&gt;$step&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   --start &lt;span class=&quot;nv&quot;&gt;$start&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   DS:testdata:GAUGE:120:U:U &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   RRA:MAX:0.5:1:&lt;span class=&quot;nv&quot;&gt;$items&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; i in &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$step&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
   rrdtool update test.rrd &lt;span class=&quot;nv&quot;&gt;$time&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;rrdtool last test.rrd&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

rrdtool fetch test.rrd MAX --start&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$start&lt;/span&gt; --end&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;start+180&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 600000060: 1.0000000000e+00
 600000120: 2.0000000000e+00
 600000180: 3.0000000000e+00
 600000240: -nan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which shows how both start, end and the marker for an interval are chosen
according to what described above.&lt;/p&gt;

&lt;p&gt;As an additional note, it has to be considered that real intervals might be
compound of multiples of the configured step. For example, if you have a
round robin archive (RRA) that aggregates 5 values with a step of 60, each
data point actually refers to 300 seconds (5 minutes). When this RRA is
accessed, the relevant start and stops will yield time intervals that align
to a 300-seconds chunking of the time line starting from the origin of the
epochs.&lt;/p&gt;

&lt;h2 id=&quot;getting-the-right-data&quot;&gt;Getting the right data&lt;/h2&gt;

&lt;p&gt;If you want to be sure to get the right data out of an RRD database, you
have to ensure some things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you know which round robin archive you’re looking at&lt;/li&gt;
  &lt;li&gt;you know how many data points to ask&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RRDtool will try to give you the best available data, but e.g. if you have
fine grained data for the last week and you ask for data in the last ten
days, you’ll hit a different RRA (if available).&lt;/p&gt;

&lt;p&gt;To get exactly all the data in a RRA you can do as follows (assuming the
database file is &lt;code&gt;test.rrd&lt;/code&gt;):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;run &lt;code&gt;rrdtool info test.rrd&lt;/code&gt; to get the relevant data. You
will find something like this:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;filename = &quot;test.rrd&quot;
rrd_version = &quot;0003&quot;
step = 60
last_update = 600018000
header_size = 736
ds[testdata].index = 0
ds[testdata].type = &quot;GAUGE&quot;
ds[testdata].minimal_heartbeat = 120
ds[testdata].min = NaN
ds[testdata].max = NaN
ds[testdata].last_ds = &quot;300&quot;
ds[testdata].value = 0.0000000000e+00
ds[testdata].unknown_sec = 0
rra[0].cf = &quot;MAX&quot;
rra[0].rows = 300
rra[0].cur_row = 157
rra[0].pdp_per_row = 1
rra[0].xff = 5.0000000000e-01
rra[0].cdp_prep[0].value = NaN
rra[0].cdp_prep[0].unknown_datapoints = 0
rra[1].cf = &quot;MAX&quot;
rra[1].rows = 300
rra[1].cur_row = 66
rra[1].pdp_per_row = 20
rra[1].xff = 5.0000000000e-01
rra[1].cdp_prep[0].value = -inf
rra[1].cdp_prep[0].unknown_datapoints = 0
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;detect the RRA - there might be many in a database, so pick your
favourite. We will assume that you want to focus on &lt;code&gt;rra[1]&lt;/code&gt; in the
example above;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;identify the following basic variables:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;step&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;last_update&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;pdp_per_row&lt;/code&gt; (&lt;code&gt;rra[1].pdp_per_row&lt;/code&gt; in the example)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;rows&lt;/code&gt; (&lt;code&gt;rra[1].rows&lt;/code&gt; in the example)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;calculate the RRA interval length as &lt;code&gt;superstep = step * pdp_per_row&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;calculate the end time of the last interval with meaningful data as
&lt;code&gt;real_end = last_update % superstep&lt;/code&gt; (&lt;code&gt;%&lt;/code&gt; representing the modulus
function)&lt;/li&gt;
  &lt;li&gt;consider &lt;code&gt;start = real_end - superstep * rows + 1&lt;/code&gt; and
&lt;code&gt;end = real_end - 1&lt;/code&gt;. The addition/subtraction of one second is to be
sure to fall &lt;em&gt;inside&lt;/em&gt; an interval instead of being at one border, just
to avoid surprises (this is actually needed for end only)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can then consider &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt; and &lt;code&gt;superstep&lt;/code&gt; for usage in
&lt;a href=&quot;http://oss.oetiker.ch/rrdtool/doc/rrdfetch.en.html&quot;&gt;rrdtool fetch&lt;/a&gt; (respectively for &lt;code&gt;--start&lt;/code&gt;, &lt;code&gt;--end&lt;/code&gt; and &lt;code&gt;--resolution&lt;/code&gt;)
and in &lt;a href=&quot;http://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html&quot;&gt;rrdtool graph&lt;/a&gt; (respectively for &lt;code&gt;--start&lt;/code&gt;, &lt;code&gt;--end&lt;/code&gt; and &lt;code&gt;--step&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The above is implemented in the following Perl program
&lt;code&gt;get-full-interval.pl&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;English&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw&amp;lt; -no_match_vars &amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Util&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw&amp;lt; reduce &amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dumper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RRDs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$OUTPUT_AUTOFLUSH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rra_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rrd_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rra&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rra_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$superstep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdp_per_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$real_end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$last&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;superstep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$end&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$real_end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$start&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$real_end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$superstep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;$start $end $superstep $rra-&amp;gt;{rows}\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rrd_info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$raw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RRDs::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%retval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%$raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_to_pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%retval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_to_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$$ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%retval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;## end sub rrd_info&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name_to_path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;m{^(.+?)\[(.+)\]$}mxs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;m{^(?:rra|cdp_prep)$}mxs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/\./&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;## end sub name_to_path&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path_to_pointer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# see http://www.perlmonks.org/?node_id=443584&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$$a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$$a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Call this program as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;get-full-interval.pl test.rrd 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where the first parameter is the name of the RRD database and the second
parametrs is the identifier of the RRA you are interested into. The program
will output, in order, the following parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;value for &lt;code&gt;--start&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;value for &lt;code&gt;--end&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;the length of the interval (to be used as &lt;code&gt;--step&lt;/code&gt; or &lt;code&gt;--resolution&lt;/code&gt;
where these parameters make sense)&lt;/li&gt;
  &lt;li&gt;the number of data points you will get (useful for setting the right
&lt;code&gt;--width&lt;/code&gt; if you want to produce a graph)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;graphing-a-whole-database&quot;&gt;Graphing a whole database&lt;/h2&gt;

&lt;p&gt;The following program produces a graph for each variable and each RRA you
have in your database, according to the hints provided in the previous
section:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;s2&quot;&gt;&amp;quot;$db&amp;quot;&lt;/span&gt; .rrd&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;rrdtool info &lt;span class=&quot;s2&quot;&gt;&amp;quot;$db&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^ds\[\(.*\)\]\.index.*/\1/p&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
rrdtool info &lt;span class=&quot;s2&quot;&gt;&amp;quot;$db&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^rra\[\(.*\)\]\.cf.*&amp;quot;\(.*\)&amp;quot;$/\1 \2/p&amp;#39;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;rra cf &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      ./get-full-interval.pl &lt;span class=&quot;s2&quot;&gt;&amp;quot;$db&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rra&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
         &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;start end step rows
         &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; variable in &lt;span class=&quot;nv&quot;&gt;$variables&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            rrdtool graph &lt;span class=&quot;s2&quot;&gt;&amp;quot;$root-$variable-$rra-$cf.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               --start &lt;span class=&quot;nv&quot;&gt;$start&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               --end &lt;span class=&quot;nv&quot;&gt;$end&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               --step &lt;span class=&quot;nv&quot;&gt;$step&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               --width &lt;span class=&quot;nv&quot;&gt;$rows&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               --disable-rrdtool-tag &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               &lt;span class=&quot;s2&quot;&gt;&amp;quot;DEF:v=$db:$variable:$cf&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               LINE1:v#000
         &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course this is one graph per variable without any fancy bell or
whistle… start from &lt;a href=&quot;http://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html&quot;&gt;rrdtool graph&lt;/a&gt; to learn all the masters’ tricks!&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/rrdtool/&quot;&gt;RRDtool - Sparse Notes&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on November 02, 2013.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[local::lib for distributions]]></title>
  <link rel="alternate" type="text/html" href="/local-lib-for-distributions/" />
  <id>/local-lib-for-distributions</id>
  <published>2010-07-30T00:00:00+02:00</published>
  <updated>2010-07-30T00:00:00+02:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://metacpan.org/pod/local::lib&quot;&gt;local::lib&lt;/a&gt; is a love-it-or-hate-it module, with the additional feature
that you don’t get the hate-it part.&lt;/p&gt;

&lt;p&gt;Recently, I had to develop a script to do a couple of HTTP redirections.
I headed towards CPAN, quickly found that &lt;a href=&quot;https://metacpan.org/pod/HTTP::Server::Simple&quot;&gt;HTTP::Server::Simple&lt;/a&gt; (and in
particular &lt;a href=&quot;https://metacpan.org/pod/HTTP::Server::Simple::CGI&quot;&gt;HTTP::Server::Simple::CGI&lt;/a&gt;) and in some twenty minutes I had a
working prototype. Forget that I changed my mind a couple of times
before having what I eventually used for my test…&lt;/p&gt;

&lt;p&gt;Now, I knew I had to go into an environment that could possibly prevent
me from using my machine to perform the test. As a matter of fact, I
didn’t know whether I could use the program anywhere, let alone know
what kind of Perl environment I would have found. Nightmare!&lt;/p&gt;

&lt;p&gt;Luckily enough, it turned out that I only needed modules that do not
require compilation. I love Pure Perl modules! So now I had the problem
to bundle all the needed non-core modules in a way that was convenient
to deliver. This is where &lt;a href=&quot;https://metacpan.org/pod/local::lib&quot;&gt;local::lib&lt;/a&gt; really saved the day,
and in particular its &lt;code&gt;--self-contained&lt;/code&gt; option. Well - yes -
I’ve seen options that were commented way better… but at least the
only reference in the synopsis made me curious enough to discover that
it was hitting the nail right in the head.&lt;/p&gt;

&lt;p&gt;On my machine I have my own compiled Perl version to tinker with, so I
installed &lt;a href=&quot;https://metacpan.org/pod/local::lib&quot;&gt;local::lib&lt;/a&gt; without the need to bootstrap anything. At this
point, all I had to do was something along these lines:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;shell$ perl -MCPAN -Mlocal::lib=--self-contained,my_lib -e &amp;#39;CPAN::install($_) for @ARGV&amp;#39; HTTP::Server::Simple URI Log::Log4perl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yes… I’m quite fond of &lt;code&gt;Log::Log4perl&lt;/code&gt;, but that’s another story.&lt;/p&gt;

&lt;p&gt;The installation above went smooth and installed all the modules, and
their needed &lt;em&gt;non-core&lt;/em&gt; dependencies, under the directory tree starting
from &lt;code&gt;my_lib&lt;/code&gt;. I checked that there were actually no compiled components
- dependencies could play some trick - and I verified that I had been
lucky. Yay!&lt;/p&gt;

&lt;p&gt;The directory structure you end up with is more or less the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;my_lib/bin
my_lib/lib/perl5/...
my_lib/man&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I didn’t need either the bin or the man subdirectory, so I just moved
the contents &lt;code&gt;my_lib/lib/perl5&lt;/code&gt; into a &lt;code&gt;lib&lt;/code&gt; subdirectory, removed what
remained of &lt;code&gt;my_lib&lt;/code&gt; and… that’s it! Well, wait a minute, I had to
make a slight change to the code as well:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#...
use FindBin;
use lib $FindBin::Bin;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;OK, now &lt;em&gt;that’s it&lt;/em&gt;! The funny part? I was actually able to use my
laptop, so I didn’t need anything of this…&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/local-lib-for-distributions/&quot;&gt;local::lib for distributions&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on July 30, 2010.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Carp::Always would have helped]]></title>
  <link rel="alternate" type="text/html" href="/carp-always/" />
  <id>/carp-always</id>
  <published>2010-05-09T00:00:00+02:00</published>
  <updated>2010-05-09T00:00:00+02:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;Yesterday I wrote an &lt;a href=&quot;dist-zilla&quot;&gt;article&lt;/a&gt; about &lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla&quot;&gt;Dist::Zilla&lt;/a&gt; and,
at a certain point, I had issues with a missing &lt;code&gt;Changes&lt;/code&gt; file,
that triggered an error whose source was not evident:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ dzil release
[DZ] beginning to build Sample-Module
[BumpVersionFromGit] Bumping version from 0.1.3 to 0.1.4
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
[DZ] writing Sample-Module in Sample-Module-0.1.4
[DZ] writing archive to Sample-Module-0.1.4.tar.gz
[@Filter/Check] branch master is in a clean state
[@Filter/TestRelease] ...
...
[@Filter/TestRelease] all&amp;#39;s well; removing .build/OIeyjyhBZd
[FakeRelease] Fake release happening (nothing was really done)
can&amp;#39;t open Changes for reading: No such file or directory\
 at /opt/perl-5.8.8/lib/site_perl/5.8.8/Dist/Zilla/File/OnDisk.pm line 31.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To find out the offending plugin I decided to hack
&lt;code&gt;Dist::Zilla::File::OnDisk&lt;/code&gt;, turning a &lt;code&gt;die()&lt;/code&gt; into a &lt;code&gt;Carp::confess()&lt;/code&gt;
to see what was going wrong:&lt;/p&gt;

&lt;pre&gt;
&lt;em style=&quot;color:red&quot;&gt;--- src.OnDisk.pm&lt;/em&gt;
&lt;em style=&quot;color:green&quot;&gt;+++ dst.OnDisk.pm&lt;/em&gt;
@@ -28,7 +28,8 @@
 sub _read_file {
   my ($self) = @_;
 
   my $fname = $self-&amp;gt;_original_name;
&lt;em style=&quot;color:red&quot;&gt;-  open my $fh, &#39;&amp;lt;&#39;, $fname or die &quot;can&#39;t open $fname for reading: $!&quot;;&lt;/em&gt;
&lt;em style=&quot;color:green&quot;&gt;+  use Carp;
+  open my $fh, &#39;&amp;lt;&#39;, $fname or Carp::confess &quot;can&#39;t open $fname for reading: $!&quot;;&lt;/em&gt;
   my $content = do { local $/; &amp;lt;$fh&amp;gt; };
 }

&lt;/pre&gt;

&lt;p&gt;Had I read the &lt;em&gt;title&lt;/em&gt; of &lt;a href=&quot;http://d.hatena.ne.jp/tokuhirom/&quot;&gt;Tokuhiro Matsuno&lt;/a&gt;’s post
&lt;a href=&quot;http://d.hatena.ne.jp/tokuhirom/20100508/1273279912&quot;&gt;Carp::Always::Color&lt;/a&gt;
(well, I can’t read Japanese, so I can’t go beyond an
English title!), I would have avoided all the editing mess to just
use &lt;a href=&quot;http://search.cpan.org/~ferreira/&quot;&gt;Adriano Ferreira&lt;/a&gt;’s
&lt;a href=&quot;https://metacpan.org/pod/Carp::Always&quot;&gt;Carp::Always&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, instead of editing the file, I should have find out where
&lt;code&gt;dzil&lt;/code&gt; is installed in my system:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ which dzil
/opt/perl/bin/dzil&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This way, the &lt;code&gt;perl&lt;/code&gt; executable can be called directly to add &lt;a href=&quot;https://metacpan.org/pod/Carp::Always&quot;&gt;Carp::Always&lt;/a&gt;
in the command line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ perl -MCarp::Always /opt/perl/bin/dzil release
[DZ] beginning to build Sample-Module
[BumpVersionFromGit] Bumping version from 0.1.3 to 0.1.4
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
[DZ] writing Sample-Module in Sample-Module-0.1.4
[DZ] writing archive to Sample-Module-0.1.4.tar.gz
[@Filter/Check] branch master is in a clean state
[@Filter/TestRelease] ...
...
[@Filter/TestRelease] all&amp;#39;s well; removing .build/dE1qIIQWEG
[FakeRelease] Fake release happening (nothing was really done)
can&amp;#39;t open Changes for reading: No such file or directory\
 at /opt/perl-5.8.8/lib/site_perl/5.8.8/Dist/Zilla/File/OnDisk.pm line 31
   Dist::Zilla::File::OnDisk::_read_file(...
   Dist::Zilla::File::OnDisk::__ANON__(...
   Class::MOP::Attribute::default(...
   Dist::Zilla::File::OnDisk::content(...
   &amp;lt;em style=&amp;quot;color:red&amp;quot;&amp;gt;Dist::Zilla::Plugin::Git::Commit&amp;lt;/em&amp;gt;::_get_changes(...
   Dist::Zilla::Plugin::Git::Commit::__ANON__(...
   String::Formatter::method_replace(...
   String::Formatter::format(...
   String::Formatter::__ANON__(...
   Dist::Zilla::Plugin::Git::Commit::get_commit_message(...
   Dist::Zilla::Plugin::Git::Commit::after_release(...
   Dist::Zilla::release(...
   Dist::Zilla::App::Command::release::execute(...
   App::Cmd::execute_command(...
   App::Cmd::run(...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Voilà&lt;/em&gt;, a perfect stack trace with the info I was after!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/carp-always/&quot;&gt;Carp::Always would have helped&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on May 09, 2010.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Giving Dist::Zilla a try]]></title>
  <link rel="alternate" type="text/html" href="/dist-zilla/" />
  <id>/dist-zilla</id>
  <published>2010-05-08T00:00:00+02:00</published>
  <updated>2010-05-08T00:00:00+02:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;I’m just new to &lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla&quot;&gt;Dist::Zilla&lt;/a&gt;,
so these are the records of what I found about it… If you’re impatient
and only want the results, go to &lt;a href=&quot;#the-lucky-path&quot;&gt;The Lucky Path&lt;/a&gt;
section below, otherwise keep reading!&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;The installation was more or less flawless. There are a number of
modules that get installed, other get updated. Curiously enough, the
installation for &lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla&quot;&gt;Dist::Zilla&lt;/a&gt; itself went wrong due to &lt;a href=&quot;http://rt.perl.org/rt3/Public/Bug/Display.html?id=3038&quot;&gt;a bug in perl
5.8.x&lt;/a&gt;’s regular
expression operator &lt;code&gt;qr&lt;/code&gt; that triggers an error in one of the tests.&lt;/p&gt;

&lt;h3 id=&quot;starting-a-new-module&quot;&gt;Starting a new module&lt;/h3&gt;

&lt;p&gt;This step requires you to do work! From the
&lt;a href=&quot;http://dzil.org/&quot;&gt;official tutorial&lt;/a&gt; (as of May 8, 2010):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This document will be overhauled when dzil new is more useful.&lt;br /&gt;
For now, we won’t even cover the new command, because it’s so pointless.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So let’s follow &lt;a href=&quot;http://dzil.org/tutorial/new-dist.html&quot;&gt;the hints here&lt;/a&gt;
and create something:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla$ mkdir Sample-Module
~/dzilla$ cd Sample-Module
~/dzilla/Sample-Module$ mkdir t
~/dzilla/Sample-Module$ mkdir -p lib/Sample
~/dzilla/Sample-Module$ vi t/00-load.t
~/dzilla/Sample-Module$ showfile t/00-load.t

|  # vim: filetype=perl :
|  use strict;
|  use warnings;
|
|  use Test::More tests =&amp;gt; 1; # last test to print
|
|  BEGIN {
|     use_ok(&amp;#39;Sample::Module&amp;#39;);
|  }
|
|  diag(&amp;quot;Testing Sample::Module $Sample::Module::VERSION&amp;quot;);

~/dzilla/Sample-Module$ vi lib/Sample/Module.pm
~/dzilla/Sample-Module$ show lib/Sample/Module.pm

|  package Sample::Module;
|  use strict;
|  use warnings;
|  use English qw( -no_match_vars );
|  use Carp;
|
|  1;
|  __END__

~/dzilla/Sample-Module$ vi dist.ini
~/dzilla/Sample-Module$ show dist.ini

|  name    = Sample-Module
|  author  = Flavio Poletti &amp;lt;polettix@cpan.org&amp;gt;
|  license = Perl_5
|  copyright_holder = Flavio Poletti
|  
|  [@Basic]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In case you’re wondering, I’m working in Linux and the &lt;code&gt;show&lt;/code&gt;
stuff above is a shell function defined as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; show&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;    &lt;/span&gt;sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^/|  /&amp;#39;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Well… there’s nothing to tell me what to do now, so let’s just
&lt;code&gt;build&lt;/code&gt; it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ dzil build
[DZ] beginning to build Sample-Module
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
Unable to extract an abstract from lib/Sample.pm. Please add...
[DZ] no version was ever set...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Bummer! There seem to be two problems here (and with the tutorial): the
first one is the absence of the &lt;em&gt;abstract&lt;/em&gt;, the other one seems more
serious because it triggers some error internally to &lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla&quot;&gt;Dist::Zilla&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;adding-an-abstract&quot;&gt;Adding an &lt;code&gt;ABSTRACT&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Fixing the first issue should be simple, I remember reading about the
abstract &lt;a href=&quot;http://dzil.org/tutorial/writing-docs.html&quot;&gt;somewhere&lt;/a&gt;
and it seems to just require an additional line in the module file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ vi lib/Sample/Module.pm
~/dzilla/Sample-Module$ show lib/Sample/Module.pm

|   package Sample::Module;
|   # ABSTRACT: a sample module to play with Dist::Zilla
|   
|   use strict;
|   use warnings;
|   use English qw( -no_match_vars );
|   use Carp;
|   
|   1;
|   __END__

~/dzilla/Sample-Module$ dzil build
[DZ] beginning to build Sample-Module
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
[DZ] no version was ever set...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I just think that some &lt;em&gt;explicit&lt;/em&gt; mention about the &lt;code&gt;ABSTRACT&lt;/code&gt;
would be nice on the reader in the tutorial!&lt;/p&gt;

&lt;h3 id=&quot;dealing-with-the-version&quot;&gt;Dealing with the &lt;em&gt;version&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://dzil.org/tutorial/versioning.html&quot;&gt;Managing Version Numbering with Dist::Zilla&lt;/a&gt;
seems to be a good candidate to get rid of the second error. I find
particularly reassuring the following sentence:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The simplest way to specify your dist’s version is to put it in &lt;em&gt;dist.ini&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;so let’s try it immediately:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ vi dist.ini
~/dzilla/Sample-Module$ show dist.ini

|   name    = Sample-Module
|   &amp;lt;em style=&amp;quot;color:red&amp;quot;&amp;gt;version = 3.14.15&amp;lt;/em&amp;gt;
|   author  = Flavio Poletti &amp;lt;polettix@cpan.org&amp;gt;
|   license = Perl_5
|   copyright_holder = Flavio Poletti
|   
|   [@Basic]

~/dzilla/Sample-Module$ dzil build
[DZ] beginning to build Sample-Module
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
[DZ] writing Sample-Module in Sample-Module-3.14.15
[DZ] writing archive to Sample-Module-3.14.15.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;WTF? Definitely not what I expected from a &lt;code&gt;build&lt;/code&gt; command!
&lt;a href=&quot;#build-wtf&quot;&gt;I’ll dig it later&lt;/a&gt;, now let’s try to test it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ dzil test
[DZ] building test distribution under .build/krERIMYW7M
[DZ] beginning to build Sample-Module
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
[DZ] writing Sample-Module in .build/krERIMYW7M
Checking if your kit is complete...
Looks good
Writing Makefile for Sample::Module
cp lib/Sample/Module.pm blib/lib/Sample/Module.pm
PERL_DL_NONLAZY=1 /opt/perl-5.8.8/bin/perl...
&amp;lt;em style=&amp;quot;color:red&amp;quot;&amp;gt;t/00-load.t .. 1/1 Use of uninitialized value in concatenation (.) or string at t/00-load.t line 11.&amp;lt;/em&amp;gt;
# Testing Sample::Module 
t/00-load.t .. ok   
All tests successful.
Files=1, Tests=1,  0 wallclock secs ( 0.01 usr  0.02 sys +  0.02 cusr  0.00 csys =  0.05 CPU)
Result: PASS
[DZ] all&amp;#39;s well; removing .build/krERIMYW7M&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yay, it’s working… more or less. There is still no &lt;code&gt;$VERSION&lt;/code&gt;
in my module, and this is something that annoyed me a lot in these years.
Maybe it’s time to read some more from the tutorial:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are a number of plugins that put your version number to use.
PkgVersion inserts a $VERSION definition in all your packages so that
they’ll all have versions matching distribution’s version. NextRelease
adds version headers to your changelog file so you don’t need to worry
about what the next version number will be until it’s built. PodVersion
or PodWeaver can insert a =head1 VERSION section in your documentation.
The Git integration plugins system uses your version to tag releases.&lt;/p&gt;

  &lt;p&gt;All of these plugins go a long way to taking care of version
accounting for you. PkgVersion and the Pod mungers, especially,
eliminate the need to update multiple files in multiple ways.&lt;/p&gt;

  &lt;p&gt;The next step to letting Dist::Zilla help manage your versions is to
let it manange your version numbering, too.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, let’s try this again then…&lt;/p&gt;

&lt;h3 id=&quot;dealing-with-the-version-reloaded&quot;&gt;Dealing with the éversion*, reloaded&lt;/h3&gt;

&lt;p&gt;I would actually have done this step in any case, because I’m lazy and
I like my system to figure out stuff like version numbering, unless it’s
time that I really need to bump the version. I also use
&lt;a href=&quot;http://git-scm.com/&quot;&gt;git&lt;/a&gt;, so it seems I’m quite lucky because
of &lt;a href=&quot;http://search.cpan.org/dist/Dist-Zilla-Plugin-BumpVersionFromGit/&quot;&gt;Dist::Zilla::Plugin::BumpVersionFromGit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The installation of this module is not clean, anyway. In particular,
it seems that using Debian’s git is not liked very much by this module,
that has tests fixed for version 1.7 while I have 1.5:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#   Failed test at t/basic.t line 45.
#                   &amp;#39;git: &amp;#39;a-command-not-likely-to-exist&amp;#39; is not a git-command. See &amp;#39;git --help&amp;#39;.
# &amp;#39;
#     doesn&amp;#39;t match &amp;#39;(?-xism:which does not exist)&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;How the hell did they decide to change error messages is obscure to me.
Now the problem is… to install or not to install? Probably the best thing
to do would be to self-compile git and go with the bleading edge, but I’m
lazy enough to decide that &lt;code&gt;git tag&lt;/code&gt; is probably unchanged…
so I go for &lt;code&gt;make install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After the installation, following &lt;a href=&quot;http://search.cpan.org/dist/Dist-Zilla-Plugin-BumpVersionFromGit/&quot;&gt;Dist::Zilla::Plugin::BumpVersionFromGit&lt;/a&gt;
should be easy:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ vi dist.ini
~/dzilla/Sample-Module$ show dist.ini

|   name    = Sample-Module
|   author  = Flavio Poletti &amp;lt;polettix@cpan.org&amp;gt;
|   license = Perl_5
|   copyright_holder = Flavio Poletti
|   
|   [@Basic]
|   
|   [BumpVersionFromGit]
|   first_version = 0.1.0
|   version_regexp  = ^v(.+)$&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So let’s try:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ dzil test
[DZ] building test distribution under .build/hYUzF1mKs7
[DZ] beginning to build Sample-Module
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
fatal: Not a git repository&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ach! I didn’t initialise the git repository!!! Let’s fix this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ git init
Initialized empty Git repository in .git/
~/dzilla/Sample-Module$ git add dist.ini lib/Sample/Module.pm t/00-load.t
~/dzilla/Sample-Module$ git commit -m &amp;#39;Initial import&amp;#39;
Created initial commit bf8a91c: Initial import
 3 files changed, 31 insertions(+), 0 deletions(-)
 create mode 100644 dist.ini
 create mode 100644 lib/Sample/Module.pm
 create mode 100644 t/00-load.t&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and give it a new try:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ dzil test
[DZ] building test distribution under .build/6rSmgX1Gpw
[DZ] beginning to build Sample-Module
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
[DZ] writing Sample-Module in .build/6rSmgX1Gpw
Checking if your kit is complete...
Looks good
Writing Makefile for Sample::Module
cp lib/Sample/Module.pm blib/lib/Sample/Module.pm
PERL_DL_NONLAZY=1 /opt/perl-5.8.8/bin/perl...
t/00-load.t .. 1/1 Use of uninitialized value in concatenation (.) or string at t/00-load.t line 11.
# Testing Sample::Module 
t/00-load.t .. ok   
All tests successful.
Files=1, Tests=1,  0 wallclock secs ( 0.00 usr  0.02 sys +  0.01 cusr  0.02 csys =  0.05 CPU)
Result: PASS
[DZ] all&amp;#39;s well; removing .build/6rSmgX1Gpw&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What’s wrong now?!? OK I get it, it draws the &lt;em&gt;whole bundle&lt;/em&gt; version
number from git, but still does not set it inside modules; it seems that I
did not read the tutorial with sufficient attention:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are a number of plugins that put your version number to use.
&lt;strong&gt;PkgVersion inserts a &lt;code&gt;$VERSION&lt;/code&gt; definition in all your packages so
that they’ll all have versions matching distribution’s version.&lt;/strong&gt;
NextRelease adds version headers to your changelog file so you don’t
need to worry about what the next version number will be until it’s
built. PodVersion or PodWeaver can insert a &lt;code&gt;=head1 VERSION&lt;/code&gt; section in
your documentation. The Git integration plugins system uses your version
to tag releases.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s add &lt;code&gt;PkgVersion&lt;/code&gt; then, and give it yet another try:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ vi dist.ini
~/dzilla/Sample-Module$ show dist.ini

|   name    = Sample-Module
|   author  = Flavio Poletti &amp;lt;polettix@cpan.org&amp;gt;
|   license = Perl_5
|   copyright_holder = Flavio Poletti
|   
|   [@Basic]
|   [PkgVersion]
|   
|   [BumpVersionFromGit]
|   first_version = 0.1.0
|   version_regexp  = ^v(.+)$

~/dzilla/Sample-Module$ dzil test
[DZ] building test distribution under .build/uFlnF2gzDc
[DZ] beginning to build Sample-Module
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
[DZ] writing Sample-Module in .build/uFlnF2gzDc
Checking if your kit is complete...
Looks good
Writing Makefile for Sample::Module
cp lib/Sample/Module.pm blib/lib/Sample/Module.pm
PERL_DL_NONLAZY=1 /opt/perl-5.8.8/bin/perl...
t/00-load.t .. 1/1 # Testing Sample::Module 0.1.0
t/00-load.t .. ok   
All tests successful.
Files=1, Tests=1,  1 wallclock secs ( 0.01 usr  0.02 sys +  0.01 cusr  0.01 csys =  0.05 CPU)
Result: PASS
[DZ] all&amp;#39;s well; removing .build/uFlnF2gzDc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;According to the docs, I can bump the version by myself:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ V=3.14.15 dzil build
[DZ] beginning to build Sample-Module
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
[DZ] writing Sample-Module in Sample-Module-&amp;lt;em style=&amp;quot;color:red&amp;quot;&amp;gt;3.14.15&amp;lt;/em&amp;gt;
[DZ] writing archive to Sample-Module-&amp;lt;em style=&amp;quot;color:red&amp;quot;&amp;gt;3.14.15&amp;lt;/em&amp;gt;.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;build-wtf&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;dzil-build-wtf&quot;&gt;&lt;code&gt;dzil build&lt;/code&gt; WTF?&lt;/h3&gt;

&lt;p&gt;I expected &lt;code&gt;build&lt;/code&gt; to do something similar
to either &lt;a href=&quot;https://metacpan.org/pod/Module::Build&quot;&gt;Module::Build&lt;/a&gt;’s &lt;code&gt;./Build&lt;/code&gt;
or &lt;a href=&quot;https://metacpan.org/pod/ExtUtils::MakeMaker&quot;&gt;ExtUtils::MakeMaker&lt;/a&gt;’s &lt;code&gt;make&lt;/code&gt;,
but it seems that it actually builds up the
distribution file, &lt;em&gt;a-la&lt;/em&gt; &lt;code&gt;./Build dist&lt;/code&gt; or &lt;code&gt;make dist&lt;/code&gt;. To be
fair, it’s written in the help:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ dzil | grep build:
     build: build your dist&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;but I’m not particularly fond of these changes in terminology, especially
when they change from well-established conventions.&lt;/p&gt;

&lt;p&gt;As a CPAN author that uses these modules from some time,
&lt;code&gt;dist&lt;/code&gt; would be much, much better.&lt;/p&gt;

&lt;h3 id=&quot;so-whats-inside-that-package&quot;&gt;So, what’s inside that package?&lt;/h3&gt;

&lt;p&gt;This is what’s inside the directory after running &lt;code&gt;dzil build&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ dir
total 24
-rw-r--r-- 1 poletti dialout  148 2010-05-08 12:52 dist.ini
drwxr-xr-x 3 poletti dialout 4096 2010-05-08 12:20 lib
drwxr-xr-x 4 poletti dialout 4096 2010-05-08 12:52 Sample-Module-3.14.15
-rw-r--r-- 1 poletti dialout 7920 2010-05-08 12:52 Sample-Module-3.14.15.tar.gz
drwxr-xr-x 2 poletti dialout 4096 2010-05-08 12:21 t
~/dzilla/Sample-Module$ cd Sample-Module-3.14.15
~/dzilla/Sample-Module/Sample-Module-3.14.15$ dir
total 48
-rw-r--r-- 1 poletti dialout   148 2010-05-08 12:52 dist.ini
drwxr-xr-x 3 poletti dialout  4096 2010-05-08 12:52 lib
-rw-r--r-- 1 poletti dialout 18258 2010-05-08 12:52 LICENSE
-rw-r--r-- 1 poletti dialout   977 2010-05-08 12:52 Makefile.PL
-rw-r--r-- 1 poletti dialout    86 2010-05-08 12:52 MANIFEST
-rw-r--r-- 1 poletti dialout   386 2010-05-08 12:52 META.yml
-rw-r--r-- 1 poletti dialout   311 2010-05-08 12:52 README
drwxr-xr-x 2 poletti dialout  4096 2010-05-08 12:52 t&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Well, it seems that promises have been kept!&lt;/p&gt;

&lt;h3 id=&quot;dealing-with-the-version-revolution&quot;&gt;Dealing with the &lt;em&gt;version&lt;/em&gt;, revolution&lt;/h3&gt;

&lt;p&gt;There’s one final thing to do with version numbering, anyway: git must be
told to “remember” it, otherwise I’m still stuck in dealing with this
stuff by myself. &lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla::Plugin::Git&quot;&gt;Dist::Zilla::Plugin::Git&lt;/a&gt; comes to the
rescue, according to &lt;a href=&quot;http://dzil.org/tutorial/vcs-git.html&quot;&gt;this tutorial page&lt;/a&gt;.
Well, actually the tutorial page gives for granted that you already
know the module and installed it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ vi dist.ini
~/dzilla/Sample-Module$ show dist.ini

|   name    = Sample-Module
|   author  = Flavio Poletti &amp;lt;polettix@cpan.org&amp;gt;
|   license = Perl_5
|   copyright_holder = Flavio Poletti
|   
|   [@Basic]
|   [PkgVersion]
|   [@Git]
|   
|   [BumpVersionFromGit]
|   first_version = 0.1.0
|   version_regexp  = ^v(.+)$

~/dzilla/Sample-Module$ dzil test
couldn&amp;#39;t load plugin @Git given in config: Can&amp;#39;t locate Dist/Zilla/PluginBundle/Git.pm
...
[lots of error lines here]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unluckily, the module installation is not clean due to git’s version…
again. From the &lt;code&gt;Changes&lt;/code&gt; file:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;fix tests to work with git 1.7.0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This time the problem seems to be a bit more serious, so I decide to
upgrade git and the module eventually gets installed. Time to give it a try:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ dzil release
[DZ] beginning to build Sample-Module
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
[DZ] writing Sample-Module in Sample-Module-0.1.0
[DZ] writing archive to Sample-Module-0.1.0.tar.gz
[@Basic/TestRelease] ...
...
Result: PASS
[@Basic/TestRelease] all&amp;#39;s well; removing .build/uFQW51GQq_

*** Preparing to upload Sample-Module-0.1.0.tar.gz to CPAN ***

Do you want to continue the release process? (yes/no) [no]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hey, wait a moment! I have uncommitted files, why didn’t it spot them?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ git status
# On branch master
# Changed but not updated:
...
# Untracked files:
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It turns out to be an ordering problem inside &lt;code&gt;dist.ini&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ vi dist.ini
~/dzilla/Sample-Module$ show dist.ini

|   name    = Sample-Module
|   author  = Flavio Poletti &amp;lt;polettix@cpan.org&amp;gt;
|   license = Perl_5
|   copyright_holder = Flavio Poletti
|   
|   &amp;lt;em style=&amp;quot;color:red&amp;quot;&amp;gt;[@Git]&amp;lt;/em&amp;gt;
|   [@Basic]
|   [PkgVersion]
|   
|   [BumpVersionFromGit]
|   first_version = 0.1.0
|   version_regexp  = ^v(.+)$

~/dzilla/Sample-Module$ dzil release
[DZ] beginning to build Sample-Module
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
[DZ] writing Sample-Module in Sample-Module-0.1.0
[DZ] writing archive to Sample-Module-0.1.0.tar.gz
[@Git/Check] branch master has some untracked files:
[@Git/Check]   Sample-Module-0.1.0.tar.gz
[@Git/Check]   Sample-Module-0.1.0/LICENSE
[@Git/Check]   Sample-Module-0.1.0/MANIFEST
[@Git/Check]   Sample-Module-0.1.0/META.yml
[@Git/Check]   Sample-Module-0.1.0/Makefile.PL
[@Git/Check]   Sample-Module-0.1.0/README
[@Git/Check]   Sample-Module-0.1.0/dist.ini
[@Git/Check]   Sample-Module-0.1.0/lib/Sample/Module.pm
[@Git/Check]   Sample-Module-0.1.0/t/00-load.t ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The check works, at last. It’s interesting (and correct) that &lt;code&gt;dist.ini&lt;/code&gt;
does not participate in the checks. Now let’s see if it all works, it’s
necessary to add the release package names in the exclusion list for
git:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ vi .git/info/exclude
~/dzilla/Sample-Module$ show .git/info/exclude

|   # git-ls-files --others --exclude-from=.git/info/exclude
|   # Lines that start with &amp;#39;#&amp;#39; are comments.
|   # For a project mostly in C, the following would be a good set of
|   # exclude patterns (uncomment them if you want to use them):
|   # *.[oa]
|   # *~
|   Sample-Module-*&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then re-run the &lt;code&gt;release&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ dzil release
[DZ] beginning to build Sample-Module
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
[DZ] writing Sample-Module in Sample-Module-0.1.0
[DZ] writing archive to Sample-Module-0.1.0.tar.gz
[@Git/Check] branch master is in a clean state
[@Basic/TestRelease] Extracting ...
...
[@Basic/TestRelease] all&amp;#39;s well; removing .build/EqUfLZpmQJ

*** Preparing to upload Sample-Module-0.1.0.tar.gz to CPAN ***

Do you want to continue the release process? (yes/no) [no]^C
[@Basic/ConfirmRelease] Aborting release...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Well, we’re going a bit too far, I don’t want to push this stuff to
CPAN. It seems that this is due to some plugin in the &lt;code&gt;@Basic&lt;/code&gt; bundle,
so let’s see how to disable it… In &lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla&quot;&gt;Dist::Zilla&lt;/a&gt; distribution page
there’s an interesting &lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla::PluginBundle::Filter&quot;&gt;Dist::Zilla::PluginBundle::Filter&lt;/a&gt; so I get rid
of the basic bundle and go for the filter:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ vi dist.ini
~/dzilla/Sample-Module$ show dist.ini

|   name    = Sample-Module
|   author  = Flavio Poletti &amp;lt;polettix@cpan.org&amp;gt;
|   license = Perl_5
|   copyright_holder = Flavio Poletti
|   
|   [@Git]
|   &amp;lt;em style=&amp;quot;color:red&amp;quot;&amp;gt;[@Filter]&amp;lt;/em&amp;gt;
|   &amp;lt;em style=&amp;quot;color:red&amp;quot;&amp;gt;bundle = @Basic&amp;lt;/em&amp;gt;
|   &amp;lt;em style=&amp;quot;color:red&amp;quot;&amp;gt;remove = UploadToCPAN&amp;lt;/em&amp;gt;
|   &amp;lt;em style=&amp;quot;color:red&amp;quot;&amp;gt;remove = ConfirmRelease&amp;lt;/em&amp;gt;
|   [PkgVersion]
|   
|   [BumpVersionFromGit]
|   first_version = 0.1.0
|   version_regexp  = ^v(.+)$&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Time for a new test&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ dzil release
you can&amp;#39;t release without any Releaser plugins ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ouch! I hope &lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla::Plugin::FakeRelease&quot;&gt;Dist::Zilla::Plugin::FakeRelease&lt;/a&gt; will help me out:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ vi dist.ini
~/dzilla/Sample-Module$ show dist.ini

|   name    = Sample-Module
|   author  = Flavio Poletti &amp;lt;polettix@cpan.org&amp;gt;
|   license = Perl_5
|   copyright_holder = Flavio Poletti
|   
|   [@Git]
|   [@Filter]
|   bundle = @Basic
|   remove = UploadToCPAN
|   remove = ConfirmRelease
|   &amp;lt;em style=&amp;quot;color:red&amp;quot;&amp;gt;[FakeRelease]&amp;lt;/em&amp;gt;
|   [PkgVersion]
|   
|   [BumpVersionFromGit]
|   first_version = 0.1.0
|   version_regexp  = ^v(.+)$&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, just to double-check the &lt;code&gt;Git::Check&lt;/code&gt; module, I modify a file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ vi lib/Sample/Module.pm
~/dzilla/Sample-Module$ show lib/Sample/Module.pm

|   package Sample::Module;
|   # ABSTRACT: a sample module to play with Dist::Zilla
|   # just a comment
|   
|   use strict;
|   use warnings;
|   use English qw( -no_match_vars );
|   use Carp;
|   
|   1;
|   __END__&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and run the &lt;code&gt;release&lt;/code&gt; command once again:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ dzil release
[DZ] beginning to build Sample-Module
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
[DZ] writing Sample-Module in Sample-Module-0.1.0
[DZ] writing archive to Sample-Module-0.1.0.tar.gz
[@Git/Check] branch master has some uncommitted files:
[@Git/Check]   lib/Sample/Module.pm ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Awesome! After committing let’s try this again:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ git commit lib/Sample/Module.pm -m &amp;quot;added comment&amp;quot;
~/dzilla/Sample-Module$ dzil release
[DZ] beginning to build Sample-Module
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
[DZ] writing Sample-Module in Sample-Module-0.1.0
[DZ] writing archive to Sample-Module-0.1.0.tar.gz
[@Git/Check] branch master is in a clean state
[@Filter/TestRelease] ...
...
[@Filter/TestRelease] all&amp;#39;s well; removing .build/yqbgoYW_GV
[FakeRelease] Fake release happening (nothing was really done)
[@Git/Tag] Tagged v0.1.0
[@Git/Push] pushing to origin
fatal: &amp;#39;origin&amp;#39; does not appear to be a git repository
fatal: The remote end hung up unexpectedly&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Uhm, it seems that I’d better get rid of the &lt;code&gt;Git::Push&lt;/code&gt; plugin,
because my repository is local:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ vi dist.ini
~/dzilla/Sample-Module$ show dist.ini

|   name    = Sample-Module
|   author  = Flavio Poletti &amp;lt;polettix@cpan.org&amp;gt;
|   license = Perl_5
|   copyright_holder = Flavio Poletti
|   
|   [@Filter]
|   bundle = @Git
|   remove = Git::Push
|   [@Filter]
|   bundle = @Basic
|   remove = UploadToCPAN
|   remove = ConfirmRelease
|   [FakeRelease]
|   [PkgVersion]
|   
|   [BumpVersionFromGit]
|   first_version = 0.1.0
|   version_regexp  = ^v(.+)$

~/dzilla/Sample-Module$ dzil release
[DZ] beginning to build Sample-Module
[BumpVersionFromGit] Bumping version from 0.1.0 to 0.1.1
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
[DZ] writing Sample-Module in Sample-Module-0.1.1
[DZ] writing archive to Sample-Module-0.1.1.tar.gz
[@Filter/Check] branch master is in a clean state
[@Filter/TestRelease] Extracting ...
...
[@Filter/TestRelease] all&amp;#39;s well; removing .build/E9CAlzs8sG
[FakeRelease] Fake release happening (nothing was really done)
can&amp;#39;t open Changes for reading:  No such file or directory\
 at /opt/perl-5.8.8/lib/site_perl/5.8.8/Dist/Zilla/File/OnDisk.pm line 31&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;OK, the version bumping works, all’s well but… there’s an error at the
end! First of all, I wonder why it didn’t pop up last time the release
process blocked in &lt;code&gt;Git::Push&lt;/code&gt;, but whatever the reason I have
to find who’s preventing this release from happening. This requires a
little hack into &lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla&quot;&gt;Dist::Zilla&lt;/a&gt; itself, in particular inside the
offending module &lt;code&gt;Dist::Zilla::File::OnDisk&lt;/code&gt; we change the
&lt;code&gt;die()&lt;/code&gt; into &lt;code&gt;Carp::confess&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;can&amp;#39;t open Changes for reading: No such file or directory...
   Dist::Zilla::File::OnDisk::_read_file(...
   Dist::Zilla::File::OnDisk::__ANON__(...
   Class::MOP::Attribute::default(...
   Dist::Zilla::File::OnDisk::content(...
   Dist::Zilla::Plugin::Git::Commit::_get_changes(...
   Dist::Zilla::Plugin::Git::Commit::__ANON__(...
   String::Formatter::method_replace(...
   String::Formatter::format(...
   String::Formatter::__ANON__(...
   Dist::Zilla::Plugin::Git::Commit::get_commit_message(...
   &amp;lt;em style=&amp;quot;color:red&amp;quot;&amp;gt;Dist::Zilla::Plugin::Git::Commit&amp;lt;/em&amp;gt;::after_release(...
   Dist::Zilla::release(...
   Dist::Zilla::App::Command::release::execute(...
   App::Cmd::execute_command(...
   App::Cmd::run(...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So that’s the culprit… &lt;code&gt;DZP::Git::Commit&lt;/code&gt;! For the &lt;code&gt;$VERSION&lt;/code&gt; stuff we
don’t actually need it, so let’s rule it away for the moment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ vi dist.ini
~/dzilla/Sample-Module$ show dist.ini

|   name    = Sample-Module
|   author  = Flavio Poletti &amp;lt;polettix@cpan.org&amp;gt;
|   license = Perl_5
|   copyright_holder = Flavio Poletti
|   
|   [@Filter]
|   bundle = @Git
|   remove = Git::Push
|   remove = Git::Commit
|   [@Filter]
|   bundle = @Basic
|   remove = UploadToCPAN
|   remove = ConfirmRelease
|   [FakeRelease]
|   [PkgVersion]
|   
|   [BumpVersionFromGit]
|   first_version = 0.1.0
|   version_regexp  = ^v(.+)$

~/dzilla/Sample-Module$ dzil release
[DZ] beginning to build Sample-Module
[BumpVersionFromGit] Bumping version from 0.1.0 to 0.1.1
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
[DZ] writing Sample-Module in Sample-Module-0.1.1
[DZ] writing archive to Sample-Module-0.1.1.tar.gz
[@Filter/Check] branch master is in a clean state
[@Filter/TestRelease] Extracting ...
...
[@Filter/TestRelease] all&amp;#39;s well; removing .build/ieACRWrTGf
[FakeRelease] Fake release happening (nothing was really done)
[@Filter/Tag] Tagged v0.1.1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At the very last!!! Anyway, having a &lt;code&gt;Changes&lt;/code&gt; file is actually a good
thing, so let’s add one and restore the ruled out plugin:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ touch Changes
~/dzilla/Sample-Module$ git add Changes
~/dzilla/Sample-Module$ git commit Changes -m &amp;#39;added Changes file&amp;#39;
[master 27e56cd] added Changes file
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 Changes
~/dzilla/Sample-Module$ vi dist.ini
~/dzilla/Sample-Module$ show dist.ini

|   name    = Sample-Module
|   author  = Flavio Poletti &amp;lt;polettix@cpan.org&amp;gt;
|   license = Perl_5
|   copyright_holder = Flavio Poletti
|   
|   [@Filter]
|   bundle = @Git
|   remove = Git::Push
|   [@Filter]
|   bundle = @Basic
|   remove = UploadToCPAN
|   remove = ConfirmRelease
|   [FakeRelease]
|   [PkgVersion]
|   
|   [BumpVersionFromGit]
|   first_version = 0.1.0
|   version_regexp  = ^v(.+)$

~/dzilla/Sample-Module$ dzil release
[DZ] beginning to build Sample-Module
[BumpVersionFromGit] Bumping version from 0.1.1 to 0.1.2
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
[DZ] writing Sample-Module in Sample-Module-0.1.2
[DZ] writing archive to Sample-Module-0.1.2.tar.gz
[@Filter/Check] branch master is in a clean state
[@Filter/TestRelease] ...
...
[@Filter/TestRelease] all&amp;#39;s well; removing .build/dvgGmImcg2
[FakeRelease] Fake release happening (nothing was really done)
[@Filter/Commit] Committed dist.ini
[@Filter/Tag] Tagged v0.1.2
~/dzilla/Sample-Module$ show Changes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Much ado abouth nothing? Maybe I have to actually do some changes, let’s
try:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ vi lib/Sample/Module.pm
~/dzilla/Sample-Module$ show lib/Sample/Module.pm

|   package Sample::Module;
|   # ABSTRACT: a sample module to play with Dist::Zilla
|   # just a comment, extended
|   
|   use strict;
|   use warnings;
|   use English qw( -no_match_vars );
|   use Carp;
|   
|   1;
|   __END__

~/dzilla/Sample-Module$ dzil release
[DZ] beginning to build Sample-Module
[BumpVersionFromGit] Bumping version from 0.1.2 to 0.1.3
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
[DZ] writing Sample-Module in Sample-Module-0.1.3
[DZ] writing archive to Sample-Module-0.1.3.tar.gz
[@Filter/Check] branch master has some uncommitted files:
[@Filter/Check]   lib/Sample/Module.pm ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Correct, let’s commit and go forth:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample-Module$ git commit -a -m &amp;quot;extended the comment&amp;quot;
[master 71a01c0] extended the comment
 1 files changed, 1 insertions(+), 1 deletions(-)
&amp;lt;b&amp;gt;~/dzilla/Sample-Module$ dzil release&amp;lt;/b&amp;gt;
[DZ] beginning to build Sample-Module
[BumpVersionFromGit] Bumping version from 0.1.2 to 0.1.3
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
[DZ] writing Sample-Module in Sample-Module-0.1.3
[DZ] writing archive to Sample-Module-0.1.3.tar.gz
[@Filter/Check] branch master is in a clean state
[@Filter/TestRelease] ...
...
[@Filter/TestRelease] all&amp;#39;s well; removing .build/yn5wsMwfpC
[FakeRelease] Fake release happening (nothing was really done)
[@Filter/Tag] Tagged v0.1.3
~/dzilla/Sample-Module$ show Changes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Still nothing, but this will probably be meat for some future article!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: I later tried to move the &lt;code&gt;Git&lt;/code&gt; stuff before
the &lt;code&gt;Basic&lt;/code&gt; and release stuff, and it actually worked as expected:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~dzilla/Sample-Module$ show dist.ini

|   name    = Sample-Module
|   author  = Flavio Poletti &amp;lt;polettix@cpan.org&amp;gt;
|   license = Perl_5
|   copyright_holder = Flavio Poletti
|   
|   [@Filter]
|   bundle = @Basic
|   remove = UploadToCPAN
|   remove = ConfirmRelease
|   [FakeRelease]
|   [@Filter]
|   bundle = @Git
|   remove = Git::Push
|   [PkgVersion]
|   
|   [BumpVersionFromGit]
|   first_version = 0.1.0
|   version_regexp  = ^v(.+)$

~dzilla/Sample-Module$ dzil release
[DZ] beginning to build Sample-Module
[BumpVersionFromGit] Bumping version from 0.1.3 to 0.1.4
[DZ] guessing dist&amp;#39;s main_module is lib/Sample/Module.pm
[DZ] extracting distribution abstract from lib/Sample/Module.pm
[DZ] writing Sample-Module in Sample-Module-0.1.4
[DZ] writing archive to Sample-Module-0.1.4.tar.gz
[@Filter/TestRelease] Extracting ...
...
[@Filter/TestRelease] all&amp;#39;s well; removing .build/zD6QJBMw7z
[@Filter/Check] branch master has some untracked files:
[@Filter/Check]   adjust.pl ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I don’t actually understand why this happens; anyway, I still think that
keeping the &lt;code&gt;Git::Check&lt;/code&gt; stuff before is better, because the whole
build and test stuff is not performed if there are pending commits.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;the-lucky-path&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-lucky-path&quot;&gt;The Lucky Path&lt;/h3&gt;

&lt;p&gt;Well, back to the very beginning… what should I do to:
- start using &lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla&quot;&gt;Dist::Zilla&lt;/a&gt; from scratch
- with basic integration with &lt;a href=&quot;http://www.git-scm.com/&quot;&gt;git&lt;/a&gt;
- and with automatic version numbering?&lt;/p&gt;

&lt;p&gt;Here’s my recipe!&lt;/p&gt;

&lt;h4 id=&quot;install-needed-stuff&quot;&gt;Install needed stuff&lt;/h4&gt;

&lt;p&gt;You’ll need a reasonably recent version of &lt;a href=&quot;http://www.git-scm.com/&quot;&gt;git&lt;/a&gt;, so install it beforehand.
Then install the Perl modules:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla$ cpanm Dist::Zilla Dist::Zilla::Plugin::BumpVersionFromGit Dist::Zilla::Plugin::Git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;create-module-directory-and-stuff&quot;&gt;Create module directory and stuff&lt;/h4&gt;

&lt;p&gt;This is up to you, just a minimal example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla$ mkdir Sample
~/dzilla$ cd Sample
~/dzilla/Sample$ mkdir lib
~/dzilla/Sample$ cat &amp;gt;lib/Sample.pm &amp;lt;&amp;lt;END_OF_MODULE
package Sample;
# ABSTRACT: whatever
1;
__END__
END_OF_MODULE
~/dzilla/Sample$ touch Changes
~/dzilla/Sample$ git init
Initialized empty Git repository in /home/poletti/sviluppo/perl/dzilla/Sample/.git/
~/dzilla/Sample$ git add .
~/dzilla/Sample$ git commit -m &amp;#39;Initial import&amp;#39;
[master (root-commit) 3b19203] Initial import
 1 files changed, 3 insertions(+), 0 deletions(-)
 create mode 100644 Changes
 create mode 100644 lib/Sample.pm
~/dzilla/Sample$ echo &amp;#39;Sample-*&amp;#39; &amp;gt;&amp;gt; .git/info/exclude&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember to ensure that the &lt;code&gt;Changes&lt;/code&gt; file is created, or
&lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla::Plugin::Git::Commit&quot;&gt;Dist::Zilla::Plugin::Git::Commit&lt;/a&gt; will complain later.&lt;/p&gt;

&lt;h4 id=&quot;create-distini&quot;&gt;Create &lt;code&gt;dist.ini&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Now create &lt;code&gt;dist.ini&lt;/code&gt;, the configuration file for &lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla&quot;&gt;Dist::Zilla&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample$ cat &amp;gt;dist.ini &amp;lt;&amp;lt;END_OF_FILE
name    = Sample
author  = A. U. Thor &amp;lt;someone@example.com&amp;gt;
license = Perl_5
copyright_holder = A. U. Thor

[@Filter]
bundle = @Git
remove = Git::Push
[@Filter]
bundle = @Basic
remove = ConfirmRelease
remove = UploadToCPAN
[FakeRelease]
[PkgVersion]

[BumpVersionFromGit]
first_version = 0.1.0
version_regexp  = ^v(.+)$
END_OF_FILE
~/dzilla/Sample$ git add dist.ini
~/dzilla/Sample$ git commit -m &amp;#39;added dist.ini&amp;#39;
[master 98feba7] added dist.ini
 1 files changed, 18 insertions(+), 0 deletions(-)
 create mode 100644 dist.ini&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;enjoy-your-toolchain&quot;&gt;Enjoy your toolchain&lt;/h4&gt;

&lt;p&gt;At this point, you can check the toolchain:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample$ dzil release
[DZ] beginning to build Sample
[DZ] guessing dist&amp;#39;s main_module is lib/Sample.pm
[DZ] extracting distribution abstract from lib/Sample.pm
[DZ] writing Sample in Sample-0.1.0
[DZ] writing archive to Sample-0.1.0.tar.gz
[@Filter/Check] branch master is in a clean state
[@Filter/TestRelease] Extracting ~/dzilla/Sample/Sample-0.1.0.tar.gz to .build/3GuZPYcWef
Checking if your kit is complete...
Looks good
Writing Makefile for Sample
cp lib/Sample.pm blib/lib/Sample.pm
No tests defined for Sample extension.
[@Filter/TestRelease] all&amp;#39;s well; removing .build/3GuZPYcWef
[FakeRelease] Fake release happening (nothing was really done)
[@Filter/Tag] Tagged v0.1.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you want, you can restore the automatic upload to CPAN feature of
&lt;code&gt;release&lt;/code&gt;, by changing the dist.ini file like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/dzilla/Sample$ cat &amp;gt;dist.ini &amp;lt;&amp;lt;END_OF_FILE
name    = Sample
author  = A. U. Thor &amp;lt;someone@example.com&amp;gt;
license = Perl_5
copyright_holder = A. U. Thor

[@Filter]
bundle = @Git
remove = Git::Push
[@Basic]
[PkgVersion]

[BumpVersionFromGit]
first_version = 0.1.0
version_regexp  = ^v(.+)$
END_OF_FILE&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;a-shell-script-to-rule-them-all&quot;&gt;A shell script to rule them all&lt;/h4&gt;

&lt;p&gt;This script should do all that you need, just cross your fingers:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir Sample
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Sample

mkdir lib
cat &amp;gt;lib/Sample.pm &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;END_OF_MODULE&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;package Sample;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;# ABSTRACT: whatever&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;1;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;__END__&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;END_OF_MODULE&lt;/span&gt;

touch Changes

cat &amp;gt;dist.ini &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;END_OF_FILE&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;name    = Sample&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;author  = A. U. Thor &lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;license = Perl_5&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;copyright_holder = A. U. Thor&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;[@Filter]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;bundle = @Git&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;remove = Git::Push&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;[@Filter]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;bundle = @Basic&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;remove = ConfirmRelease&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;remove = UploadToCPAN&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;[FakeRelease]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;[PkgVersion]&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;[BumpVersionFromGit]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;first_version = 0.1.0&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;version_regexp  = ^v(.+)$&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;END_OF_FILE&lt;/span&gt;

git init
git add .
git commit -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;Initial import&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Sample-*&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; .git/info/exclude

dzil release&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;thats-all-folks&quot;&gt;That’s all, folks&lt;/h3&gt;

&lt;p&gt;Well, it seems that &lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla&quot;&gt;Dist::Zilla&lt;/a&gt;
has its sharp edges, but seems that it’s actually possible to start using
it and it’s quite promising… Stay tuned for further adventures of this
total newbie in &lt;a href=&quot;https://metacpan.org/pod/Dist::Zilla&quot;&gt;Dist::Zilla&lt;/a&gt;’s world!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/dist-zilla/&quot;&gt;Giving Dist::Zilla a try&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on May 08, 2010.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Why parsing should be simple?]]></title>
  <link rel="alternate" type="text/html" href="/perl-5-parsing/" />
  <id>/perl-5-parsing</id>
  <published>2009-12-15T00:00:00+01:00</published>
  <updated>2009-12-15T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;Following &lt;a href=&quot;http://greenokapi.net/blog/2009/12/15/github-language-statistics/&quot;&gt;an article&lt;/a&gt;
by &lt;a href=&quot;http://greenokapi.net/blog&quot;&gt;osfameron&lt;/a&gt; (found
thanks to &lt;a href=&quot;http://ironman.enlightenedperl.org/&quot;&gt;Planet Perl Iron Man&lt;/a&gt;) I landed
on &lt;a href=&quot;http://corte.si/posts/code/devsurvey/index.html&quot;&gt;the interesting analysis&lt;/a&gt;
performed by Aldo Cortesi. I was quite
unsurprised at seeing yet another variant of the old thorny “Perl is
dead or at least does not feel very well” infamous adage.&lt;/p&gt;

&lt;p&gt;I was a bit more surprised at
seeing &lt;a href=&quot;http://corte.si/posts/code/devsurvey/index.html#comment-25790536&quot;&gt;this comment&lt;/a&gt;
(&lt;em&gt;this comment does not seem to appear any more now&lt;/em&gt;):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;At the risk of inflaming more Perl
programmers to come and manfully defend their language on my blog, I
think there’s a reason why Python has a nice BNF grammar, and Perl has
5600 lines of ad-hoc parsing code:
&lt;a href=&quot;http://www.perlmonks.org/?node_id=663393&quot;&gt;http://www.perlmonks.org/?node_id=663393&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I wonder which reason Aldo is thinking about. IMHO, the reason is that
probably Python development focuses more on language orthogonality and
Perl development more on programmers’ ease at the possible expense of a
more complicated compiler, but it’s just me.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/perl-5-parsing/&quot;&gt;Why parsing should be simple?&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on December 15, 2009.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[IO::Zlib and saved space]]></title>
  <link rel="alternate" type="text/html" href="/io-zlib/" />
  <id>/io-zlib</id>
  <published>2009-12-05T00:00:00+01:00</published>
  <updated>2009-12-05T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;A few days ago a colleague asked me about using Perl for analysing some
ASA firewall logs in order to spot how many public addresses are needed
for NATting users towards the Internet. The basic regular expression to
capture the bits of information that he needs is quite straightforward,
but what was interesting is that the files he has to work on are
gzipped, and he had already extracted a sample one to work on. I
remembered that there is &lt;a href=&quot;https://metacpan.org/pod/IO::Zlib&quot;&gt;IO::Zlib&lt;/a&gt;
and this is what I did:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;&amp;lt;$fh&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$inside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$outside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/Built\ dynamic\ translation\ from\ inside:(.*?)\ to\ outside:(.*?)/mxs&lt;/span&gt;
            &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;# use $inside and $outside&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;close&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;exception for &amp;#39;$file&amp;#39;: $EVAL_ERROR&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;_open&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /\.gz \z/mxs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$fh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;IO::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Zlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$fh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;die&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;IO::Zlib complained: $OS_ERROR&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;
         &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;die&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;open(): $OS_ERROR&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It worked pretty well so nothing to complain. Just before blogging about it, I
paid a due visit to the documentation, and I discovered that I was more or less
lucky: there are limitations in using the module, which basically boil down to
&lt;code&gt;$fh&lt;/code&gt; not being what you expect from a full fledged filehandle. But,
at least, it should work out of the box if all you need is to read the file
one line at a time.&lt;/p&gt;

&lt;p&gt;The module isn’t in the core distribution, but it’s a common
prerequisite so chances are that you already have it in your distro.
It’s a bit weird that it is known by &lt;a href=&quot;https://metacpan.org/pod/corelist&quot;&gt;corelist&lt;/a&gt;
to have been included in 5.9.3:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;IO::Zlib was first released with perl 5.009003&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;even though there is no trace of it in 5.10. Go figure. Anyway, it
should be a bit more common to find than the alternative
&lt;a href=&quot;https://metacpan.org/pod/PerlIO::gzip&quot;&gt;PerlIO::gzip&lt;/a&gt;, which would make
the &lt;code&gt;sub _open&lt;/code&gt; unneeded when substituted with this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;lt;:autopop&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;die&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;...&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I wonder how much Perl IO layers are used out there.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/io-zlib/&quot;&gt;IO::Zlib and saved space&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on December 05, 2009.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Equality is reflexive... isn't it?]]></title>
  <link rel="alternate" type="text/html" href="/perl6-junction/" />
  <id>/perl6-junction</id>
  <published>2009-11-29T00:00:00+01:00</published>
  <updated>2009-11-29T00:00:00+01:00</updated>
  <author>
    <name>Flavio Poletti</name>
    <uri></uri>
    <email>flavio@polettix.it</email>
  </author>
  <content type="html">
    &lt;p&gt;I read about &lt;a href=&quot;http://search.cpan.org/dist/Perl6-Junction&quot;&gt;Perl6::Junction&lt;/a&gt;
in an &lt;a href=&quot;http://blogs.perl.org/users/marc_sebastian_jakobs/2009/11/my-favorite-module-of-the-month-perl6junction.html&quot;&gt;article&lt;/a&gt;
on &lt;a href=&quot;http://blogs.perl.org/&quot;&gt;blogs.perl.org&lt;/a&gt; and I was tickled. I quickly
went on CPAN to see what the module was about beyond the post above, and
saw two enthusiastic reviews by two bigs (at least this is what I
consider both of them).&lt;/p&gt;

&lt;p&gt;I have to say that I was a bit disappointed in seeing that they both
talked about very clear documentation, while it seemed a bit too minimal
for my taste. I do agree that the test suite is complete, anyway, and
it’s a useful source for examples too! The tests are indeed quite
extensive, and there are also tests for something that made me curious,
i.e.: “will it be possible to use junctions on both sides?”. The answer
turns out to be positive, and there are tests for those cases (see the
&lt;code&gt;t/join.t&lt;/code&gt; test file for details).&lt;/p&gt;

&lt;p&gt;One funny thing in the module is that the following both apply:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$is_true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$is_NOT_true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It actually makes sense: the first says “do all elements in the &lt;code&gt;{3, 4}&lt;/code&gt;
set have something equal to them in the &lt;code&gt;{3, 4}&lt;/code&gt; set?”. Course they do,
because &lt;code&gt;3&lt;/code&gt; in the first set has &lt;code&gt;3&lt;/code&gt; in the second, and &lt;code&gt;4&lt;/code&gt; in the first set
has &lt;code&gt;4&lt;/code&gt; in the second. The second says “is any element in the &lt;code&gt;{3, 4}&lt;/code&gt; equal
to all the elements in &lt;code&gt;{3, 4}&lt;/code&gt;?”. Course there isn’t, because &lt;code&gt;3&lt;/code&gt; from the
first set is equal to &lt;code&gt;3&lt;/code&gt; in the second set, but fails to be equal to &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hence, the (numeric) equality operator does not maintain the reflexive
property here, and it seems just… &lt;em&gt;weird&lt;/em&gt;, even though it makes
perfectly sense.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/perl6-junction/&quot;&gt;Equality is reflexive... isn&#39;t it?&lt;/a&gt; was originally published by Flavio Poletti at &lt;a href=&quot;&quot;&gt;PolettiX!&lt;/a&gt; on November 29, 2009.&lt;/p&gt;
  </content>
</entry>

</feed>
